cscope 15 /usr/local/src/STM32/beginning_stm32f103c8t6/rtos/blinky               0000414199
	@../libwwg/include/getline.h

4 #i‚de‡
GETLINE_H


5 
	#GETLINE_H


	)

7 
	~<°döt.h
>

9 #ifde‡
__˝lu•lus


13 
gëlöe
(*
buf
,
bufsiz
,(*
gëc
)(),(*
putc
)(
ch
));

15 #ifde‡
__˝lu•lus


	@../libwwg/include/intelhex.h

6 #i‚de‡
INTELHEX_H


7 
	#INTELHEX_H


	)

9 
	~<°dboﬁ.h
>

10 
	~<°döt.h
>

12 #ifde‡
__˝lu•lus


20 
	ss_ihex
 {

21 
uöt32_t
 
ba£addr
;

22 
uöt32_t
 
addr
;

23 
uöt8_t
 
Àngth
;

24 
uöt8_t
 
πy≥
;

25 
uöt8_t
 
checksum
;

26 
uöt8_t
 
compcsum
;

27 
uöt8_t
 
d©a
[128];

28 
uöt32_t
 
com∑ddr
;

31 
	#IHEX_RT_DATA
 0x00

32 
	#IHEX_RT_EOF
 0x01

33 
	#IHEX_RT_XSEG
 0x02

34 
	#IHEX_RT_XLADDR
 0x04

35 
	#IHEX_RT_SLADDR
 0x05

36 

	)

37 
	#IHEX_FAIL
 0x0100

38 

	)

39 
s_ihex
 
	ts_ihex
;

41 
ihex_öô
(
s_ihex
 *
ihex
);

42 
ihex_∑r£
(
s_ihex
 *
ihex
,c⁄° *
ãxt
);

44 #ifde‡
__˝lu•lus


	@../libwwg/include/mcuio.h

5 #i‚de‡
MCUIO_H


6 
	#MCUIO_H


	)

8 
	~<°döt.h
>

9 
	~<°dboﬁ.h
>

11 
	~<u¨éib.h
>

12 
	~<usbcdc.h
>

13 
	~<gëlöe.h
>

15 #ifde‡
__˝lu•lus


31 (*
putch_t
)(
	tch
);

32 (*
puts_t
)(c⁄° *
	tbuf
);

33 (*
¥ötf_t
)(c⁄° *
	tf‹m©
,...Ë
	t__©åibuã
((f‹m©(
	t¥ötf
,1,2)));

34 (*
v¥ötf_t
)(c⁄° *
	tf‹m©
,
	tva_li°
 
	t≠
);

35 (*
gëch_t
)();

36 (*
≥ek_t
)();

37 (*
gës_t
)(*
	tbuf
,
	tmaxbuf
);

38 (*
wrôe_t
)(c⁄° *
	tbuf
,
	tbyãs
);

40 
	ss_mcuio
 {

41 
putch_t
 
putc
;

42 
puts_t
 
puts
;

43 
v¥ötf_t
 
v¥ötf
;

44 
gëch_t
 
gëc
;

45 
≥ek_t
 
≥ek
;

46 
gës_t
 
gës
;

47 
wrôe_t
 
wrôe
;

48 
gës_t
 
gëlöe
;

55 c⁄° 
s_mcuio


56 *
mcu_u¨t1
,

57 *
mcu_u¨t2
,

58 *
mcu_u¨t3
,

59 *
mcu_usb
;

60 c⁄° 
s_mcuio


61 *
mcu_°dio
;

67 
ölöe
 
mcu_putc
(c⁄° 
s_mcuio
 *
dev
,
ch
Ë{ 
	gdev
->
putc
(ch); }

68 
ölöe
 
mcu_puts
(c⁄° 
s_mcuio
 *
dev
,c⁄° *
buf
Ë{ 
	gdev
->
puts
(buf); }

69 
ölöe
 
mcu_v¥ötf
(c⁄° 
s_mcuio
 *
dev
,c⁄° *
f‹m©
,
va_li°
 
≠
Ë{  
	gdev
->
v¥ötf
(format,ap); }

70 
mcu_¥ötf
(c⁄° 
s_mcuio
 *
dev
,c⁄° *
f‹m©
,...Ë
__©åibuã
((f‹m©(
¥ötf
,2,3)));

71 
ölöe
 
mcu_gëc
(c⁄° 
s_mcuio
 *
dev
Ë{  
	gdev
->
gëc
(); }

72 
ölöe
 
mcu_≥ek
(c⁄° 
s_mcuio
 *
dev
Ë{  
	gdev
->
≥ek
(); }

73 
ölöe
 
mcu_gës
(c⁄° 
s_mcuio
 *
dev
,*
buf
,
maxbuf
Ë{  
	gdev
->
gës
(buf,maxbuf); }

74 
ölöe
 
mcu_wrôe
(c⁄° 
s_mcuio
 *
dev
,c⁄° *
buf
,
byãs
Ë{ 
	gdev
->
wrôe
(buf,bytes); }

75 
ölöe
 
mcu_gëlöe
(c⁄° 
s_mcuio
 *
dev
,*
buf
,
maxbuf
Ë{  
gëlöe
(buf,maxbuf,dev->
gëc
,dev->
putc
); }

81 
ölöe
 
°d_£t_devi˚
(c⁄° 
s_mcuio
 *
devi˚
Ë{ 
	gmcu_°dio
 = device; }

83 
ölöe
 
°d_putc
(
ch
Ë{ 
mcu_putc
(
mcu_°dio
,ch); }

84 
ölöe
 
°d_puts
(c⁄° *
buf
Ë{ 
mcu_puts
(
mcu_°dio
,buf); }

85 
ölöe
 
°d_v¥ötf
(c⁄° *
f‹m©
,
va_li°
 
≠
Ë{  
	gmcu_°dio
->
v¥ötf
(format,ap); }

86 
°d_¥ötf
(c⁄° *
f‹m©
,...Ë
__©åibuã
((f‹m©(
¥ötf
,1,2)));

87 
ölöe
 
°d_gëc
(Ë{  
mcu_gëc
(
mcu_°dio
); }

88 
ölöe
 
°d_≥ek
(Ë{  
mcu_≥ek
(
mcu_°dio
); }

89 
ölöe
 
°d_gës
(*
buf
,
maxbuf
Ë{  
mcu_gës
(
mcu_°dio
,buf,maxbuf); }

90 
ölöe
 
°d_wrôe
(c⁄° *
buf
,
byãs
Ë{ 
mcu_wrôe
(
mcu_°dio
,buf,bytes); }

91 
ölöe
 
°d_gëlöe
(*
buf
,
maxbuf
Ë{  
mcu_gëlöe
(
mcu_°dio
,buf,maxbuf); }

93 #ifde‡
__˝lu•lus


	@../libwwg/include/miniprintf.h

8 #i‚de‡
MINIPRINTF_H


9 
	#MINIPRINTF_H


	)

11 #ifde‡
__˝lu•lus


15 
	~<°d¨g.h
>

17 
möi_v¥ötf_cooked
((*
putc
)(),c⁄° *
f‹m©
,
va_li°
 
¨gs
);

18 
möi_v¥ötf_uncooked
((*
putc
)(),c⁄° *
f‹m©
,
va_li°
 
¨gs
);

20 
möi_¢¥ötf
(*
buf
,
maxbuf
,c⁄° *
f‹m©
,...)

21 
__©åibuã
((
f‹m©
(
¥ötf
,3,4)));

23 #ifde‡
__˝lu•lus


34 
Te°ed
 
™d
 
e°im©ed
 
to
 
ªquúe
 
about
 640 
byãs
 
of
 
code
 
STM32F103C8T6
. 
Should


35 
be
 
ußbÀ
 
⁄
 
™y
 
MCU
 
∂©f‹m
 
th©
 
suµ‹ts
:

37 
	~<°d¨g.h
>

38 
	~<°rög.h
>

40 
SUPPORT
:

42 
Each
 
f‹m©
 
ôem
 %+0
wd
, %0
wx
 
™d
 
°rögs
 %-
ws
, 
the
 
fﬁlowög


43 
≠∂õs
:

45 + 
O±i⁄Æ
: 
Indiˇãs
 
sign
 
should
 
Æways
 
¥öt
 (
d
 
™d
 
x
)

46 - 
O±i⁄Æ
: 
Indiˇãs
 
fõld
 
should
 
be
 
À·
 
ju°ifõd
 (
s
)

47 0 
O±i⁄Æ
: 
Pad
 
wôh
 
Àadög
 
	$zîos
 (
d
 
™d
 
x
)

48 
w
 
O±i⁄Æ
: 
DecimÆ
 
fõld
 
width


50 
F‹m©s
 %
c
, %
d
, %
x
 
™d
 %
s
 
¨e
 
	`suµ‹ãd
 (
⁄ly
). '%%' 
¥öts
 
as
 '%'.

52 
Flﬂtög
 
poöt
 
is
 
nŸ
 
suµ‹ãd
, 
kìpög
 
this
 
libøry
 
möimÆ
.

54 
FORMAT
 
EXAMPLES
:

56 %+05d '+00009' 
is
 9.

57 %
d
 '9'

59 %04x '001F' 
is
 31

60 %
x
 '1F'

61 %-9
s
 'ab¯ ' 
°rög
 
was
 'abc'

62 %9
s
 'ábc'

63 %
s
 'abc'

65 
STRING
 
FORMATTING
:

67 
	`möi_¢¥ötf
(*
buf
,
maxbuf
,c⁄° *
f‹m©
,...);

69 
Sì
 
°™d¨d
 
	`¢¥ötf
(3). 
NŸe
 
th©
 
the
 
ouçut
 
is
 
nuŒ
 
ãrmö©ed


70 
whí
 
the
 
buf„r
 
size
 
≥rmôs
.

72 
DEVICE
 
FORMATTING
 
HOWTO
:

74 
	`möi_v¥ötf_cooked
((*
putc
)(),c⁄° *
f‹m©
,
va_li°
 
¨gs
);

75 
	`möi_v¥ötf_uncooked
((*
putc
)(),c⁄° *
f‹m©
,
va_li°
 
¨gs
);

77 (0Ë
Decide
: 
cooked
 
‹
 
uncooked
 
ouçut
?

79 
COOKED
 
móns
 
th©
 
a
 
CR
 
is
 
£¡
 
a·î
 
evîy
 
LF
 i†£¡ 
out
,

80 
like
 
UNIX
 
ãrmöÆ
 
ouçut
.

82 
UNCOOKED
 
móns
 
no
 
CR
 
¥o˚ssög
 
is
 
≥rf‹med
. 
Like
 
¢¥ötf
,

83 
wh©
 
you
 
f‹m©
 
is
 wh© you 
gë
.

85 (1Ë
De˛¨e
 
your
 
own
 
putc
 
fun˘i⁄
, 
somëhög
 
like
:

87 
	$u¨t_putc
(
ch
) {

88 
	`ußπ_£nd_blockög
(
USART1
,
ch
);

89 
	}
}

91 (2Ë
De˛¨e
 
your
 
own
 
¥ötf
 
	gfun˘i⁄
:

93 
	$u¨t_¥ötf
(c⁄° *
f‹m©
,...)

94 
	`__©åibuã
((
	`f‹m©
(
¥ötf
,1,2)));

96 
	$u¨t_¥ötf
(c⁄° *
f‹m©
,...) {

97 
va_li°
 
¨gs
;

98 
rc
;

100 
	`va_°¨t
(
¨gs
,
f‹m©
);

101 
rc
 = 
	`möi_v¥ötf_cooked
(
u¨t_putc
,
f‹m©
,
¨gs
);

102 
	`va_íd
(
¨gs
);

103  
rc
;

104 
	}
}

106 
The
 
©åibuã
 
˛au£
 
is
 
	g›ti⁄Æ
, 
but
 
whí
 
¥ovided
 
ˇn
 
⁄ly


107 
≠≥¨
 
ö
 
the
 
fun˘i⁄
 
	g¥ŸŸy≥
. 
It
 
Ælows
Åhê
compûî
 
to


108 
check
 
th©
 
you
 
have
 
≠¥›rüã
 
¨gumíts
 
óch
 
f‹m©
 
	gôem
.

110 (3Ë
U£
 
	gô
:

112 
Êó_cou¡
 = 45;

114 
u¨t_¥ötf
("My dog ha†%d fÀas.\n",
Êó_cou¡
);

116 
	gNOTES
:

117 1. 
Sèck
 
ußge
 
is
 
möimÆ
 (
≥rh≠s
 256 
byãs
).

118 2. 
No
 
mÆloc
/
ªÆloc
/
‰ì
 
ˇŒs
 (
no
 
hóp
 
ußge
)

119 3. 
Re
-
íå™t
 (
no
 
°‹age
 
u£d
)

120 4. 
Com¥omizes
 
Ávouªd
 
smÆÀr
 
code
 
ovî
 
•ìd
.

	@../libwwg/include/monitor.h

5 #i‚de‡
MONITOR_H


6 
	#MONITOR_H


	)

8 
m⁄ô‹
();

	@../libwwg/include/uartlib.h

20 #i‚de‡
UARTLIB_H


21 
	#UARTLIB_H


	)

23 
	~<°d¨g.h
>

25 
›í_u¨t
(
uöt32_t
 
u¨äo
,uöt32_à
baud
,c⁄° *
cfg
,c⁄° *
mode
,
πs
,
˘s
);

26 
˛o£_u¨t
(
uöt32_t
 
u¨äo
);

28 
putc_u¨t_nb
(
uöt32_t
 
u¨äo
,
ch
);

29 
putc_u¨t
(
uöt32_t
 
u¨äo
,
ch
);

30 
wrôe_u¨t
(
uöt32_t
 
u¨äo
,c⁄° *
buf
,uöt32_à
size
);

31 
puts_u¨t
(
uöt32_t
 
u¨äo
,c⁄° *
buf
);

32 
gëc_u¨t_nb
(
uöt32_t
 
u¨äo
);

33 
gëc_u¨t
(
uöt32_t
 
u¨äo
);

34 
gëlöe_u¨t
(
uöt32_t
 
u¨äo
,*
buf
,uöt32_à
bufsiz
);

36 
u¨t1_putc
(
ch
);

37 
u¨t1_puts
(c⁄° *
buf
);

38 
u¨t1_v¥ötf
(c⁄° *
f‹m©
,
va_li°
 
≠
);

39 
	$u¨t1_¥ötf
(c⁄° *
f‹m©
,...Ë
	`__©åibuã
((
	`f‹m©
(
¥ötf
,1,2)));

40 
	`u¨t1_gëc
();

41 
	`u¨t1_≥ek
();

42 
	`u¨t1_gës
(*
buf
,
bufsiz
);

43 
	`u¨t1_wrôe
(c⁄° *
buf
,
byãs
);

44 
	`u¨t1_gëlöe
(*
buf
,
bufsiz
);

46 
	`u¨t2_putc
(
ch
);

47 
	`u¨t2_puts
(c⁄° *
buf
);

48 
	`u¨t2_v¥ötf
(c⁄° *
f‹m©
,
va_li°
 
≠
);

49 
	$u¨t2_¥ötf
(c⁄° *
f‹m©
,...Ë
	`__©åibuã
((
	`f‹m©
(
¥ötf
,1,2)));

50 
	`u¨t2_gëc
();

51 
	`u¨t2_≥ek
();

52 
	`u¨t2_gës
(*
buf
,
bufsiz
);

53 
	`u¨t2_wrôe
(c⁄° *
buf
,
byãs
);

54 
	`u¨t2_gëlöe
(*
buf
,
bufsiz
);

56 
	`u¨t3_putc
(
ch
);

57 
	`u¨t3_puts
(c⁄° *
buf
);

58 
	`u¨t3_v¥ötf
(c⁄° *
f‹m©
,
va_li°
 
≠
);

59 
	$u¨t3_¥ötf
(c⁄° *
f‹m©
,...Ë
	`__©åibuã
((
	`f‹m©
(
¥ötf
,1,2)));

60 
	`u¨t3_gëc
();

61 
	`u¨t3_≥ek
();

62 
	`u¨t3_gës
(*
buf
,
bufsiz
);

63 
	`u¨t3_wrôe
(c⁄° *
buf
,
byãs
);

64 
	`u¨t3_gëlöe
(*
buf
,
bufsiz
);

	@../libwwg/include/usbcdc.h

4 #i‚de‡
LIBUSBCDC_H


5 
	#LIBUSBCDC_H


	)

7 
	~<°d¨g.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<°dboﬁ.h
>

12 #ifde‡
__˝lu•lus


16 
usb_°¨t
(
boﬁ
 
gpio_öô
,
¥i‹ôy
);

17 
usb_ªady
();

19 
usb_putc
(
ch
);

20 
usb_puts
(c⁄° *
buf
);

21 
usb_wrôe
(c⁄° *
buf
,
byãs
);

22 
usb_v¥ötf
(c⁄° *
f‹m©
,
va_li°
 
≠
);

24 
usb_¥ötf
(c⁄° *
f‹m©
,...);

26 
usb_gëc
();

27 
usb_≥ek
();

28 
usb_gës
(*
buf
,
maxbuf
);

29 
usb_gëlöe
(*
buf
,
maxbuf
);

31 
usb_yõld
();

33 #ifde‡
__˝lu•lus


	@../libwwg/include/utils.h

4 #ifde‡
UTILS_H


5 
	#UTILS_H


	)

7 
ölöe
 
TickTy≥_t


8 
	$ticksdiff
(
TickTy≥_t
 
fú°
,TickTy≥_à
œ°
) {

10 i‡–
œ°
 > 
fú°
 )

11  
œ°
 - 
fú°
;

12  (~(
TickTy≥_t
)0 - 
fú°
Ë+ 1 + 
œ°
;

13 
	}
}

	@../libwwg/include/winbond.h

4 #i‚de‡
WINBOND_H


5 
	#WINBOND_H


	)

7 
	~<°döt.h
>

8 
	~<°dboﬁ.h
>

10 
	#W25_CMD_MANUF_DEVICE
 0x90

	)

11 
	#W25_CMD_JEDEC_ID
 0x9F

	)

12 
	#W25_CMD_WRITE_EN
 0x06

	)

13 
	#W25_CMD_WRITE_DI
 0x04

	)

14 
	#W25_CMD_READ_SR1
 0x05

	)

15 
	#W25_CMD_READ_SR2
 0x35

	)

16 
	#W25_CMD_CHIP_ERASE
 0xC7

	)

17 
	#W25_CMD_READ_DATA
 0x03

	)

18 
	#W25_CMD_FAST_READ
 0x0B

	)

19 
	#W25_CMD_WRITE_DATA
 0x02

	)

20 
	#W25_CMD_READ_UID
 0x4B

	)

21 
	#W25_CMD_PWR_ON
 0xAB

	)

22 
	#W25_CMD_PWR_OFF
 0xB9

	)

23 
	#W25_CMD_ERA_SECTOR
 0x20

	)

24 
	#W25_CMD_ERA_32K
 0x52

	)

25 
	#W25_CMD_ERA_64K
 0xD8

	)

27 
	#DUMMY
 0x00

	)

29 
	#W25_SR1_BUSY
 0x01

	)

30 
	#W25_SR1_WEL
 0x02

	)

32 
uöt8_t
 
w25_ªad_§1
(
uöt32_t
 
•i
);

33 
uöt8_t
 
w25_ªad_§2
(
uöt32_t
 
•i
);

34 
w25_waô
(
uöt32_t
 
•i
);

35 
boﬁ
 
w25_is_w¥Ÿe˘
(
uöt32_t
 
•i
);

36 
w25_wrôe_í
(
uöt32_t
 
•i
,
boﬁ
 
í
);

38 
uöt16_t
 
w25_m™uf_devi˚
(
uöt32_t
 
•i
);

39 
uöt32_t
 
w25_JEDEC_ID
(uöt32_à
•i
);

40 
w25_ªad_uid
(
uöt32_t
 
•i
,*
buf
,
uöt16_t
 
byãs
);

42 
w25_powî
(
uöt32_t
 
•i
,
boﬁ
 
⁄
);

44 
uöt32_t
 
w25_ªad_d©a
(uöt32_à
•i
,uöt32_à
addr
,*
d©a
,uöt32_à
byãs
);

45 
w25_wrôe_d©a
(
uöt32_t
 
•i
,uöt32_à
addr
,*
d©a
,uöt32_à
byãs
);

47 
boﬁ
 
w25_chù_îa£
(
uöt32_t
 
•i
);

48 
boﬁ
 
w25_îa£_block
(
uöt32_t
 
•i
,uöt32_à
addr
,
uöt8_t
 
cmd
);

50 
w25_•i_£tup
(

51 
uöt32_t
 
•i
,

52 
boﬁ
 
bôs8
,

53 
boﬁ
 
msbfú°
,

54 
boﬁ
 
mode0
,

55 
uöt8_t
 
Â˛k_div


	@../libwwg/src/getline.c

4 
	~<gëlöe.h
>

11 
	~<°rög.h
>

13 
	#CONTROL
(
c
Ë((cË& 0x1F)

	)

36 
	$gëlöe
(*
buf
,
bufsiz
,(*
gë
)(),(*
put
)(
ch
)) {

37 
ch
 = 0;

38 
bufx
 = 0, 
buÊí
 = 0;

40 i‡–
bufsiz
 <= 1 )

42 --
bufsiz
;

44  
ch
 != '\n' ) {

45 
ch
 = 
	`gë
();

47  
ch
 ) {

48 
	`CONTROL
('U'):

49  ; 
bufx
 > 0; --bufx )

50 
	`put
('\b');

51  ; 
bufx
 < 
buÊí
; ++bufx )

52 
	`put
(' ');

53 
buÊí
 = 0;

55 
	`CONTROL
('A'):

56  ; 
bufx
 > 0; --bufx )

57 
	`put
('\b');

59 
	`CONTROL
('B'):

60 i‡–
bufx
 > 0 ) {

61 --
bufx
;

62 
	`put
('\b');

65 
	`CONTROL
('F'):

66 i‡–
bufx
 < 
bufsiz
 && bufx < 
buÊí
 )

67 
	`put
(
buf
[++
bufx
]);

69 
	`CONTROL
('E'):

70  ; 
bufx
 < 
buÊí
; ++bufx )

71 
	`put
(
buf
[
bufx
]);

73 
	`CONTROL
('H'):

75 i‡–
bufx
 <= 0 )

77 --
bufx
;

78 
	`put
('\b');

80 
	`CONTROL
('D'):

81 i‡–
bufx
 < 
buÊí
 ) {

82 
	`memmove
(
buf
+
bufx
,buf+bufx+1,
buÊí
-bufx-1);

83 --
buÊí
;

84  
x
=
bufx
; x<
buÊí
; ++x )

85 
	`put
(
buf
[
x
]);

86 
	`put
(' ');

87  
x
=
buÊí
+1; x>
bufx
; --x )

88 
	`put
('\b');

91 
	`CONTROL
('I'):

92 i‡–
bufx
 < 
buÊí
 && buÊí + 1 < 
bufsiz
 ) {

93 
	`memmove
(
buf
+
bufx
+1,buf+bufx,
buÊí
-bufx);

94 
buf
[
bufx
] = ' ';

95 ++
buÊí
;

96 
	`put
(' ');

97  
x
=
bufx
+1; x<
buÊí
; ++x )

98 
	`put
(
buf
[
x
]);

99  
x
=
bufx
; x<
buÊí
; ++x )

100 
	`put
('\b');

105 
ch
 = '\n';

108 i‡–
bufx
 >
bufsiz
 ) {

109 
	`put
(0x07);

112 
buf
[
bufx
++] = 
ch
;

113 
	`put
(
ch
);

114 i‡–
bufx
 > 
buÊí
 )

115 
buÊí
 = 
bufx
;

118 i‡–
bufx
 > 
buÊí
 )

119 
buÊí
 = 
bufx
;

122 
buf
[
buÊí
] = 0;

123 
	`put
('\n');

124 
	`put
('\r');

125  
bufx
;

126 
	}
}

	@../libwwg/src/intelhex.c

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

8 
	~"öãlhex.h
"

15 
	$ihex_öô
(
s_ihex
 *
ihex
) {

16 
	`mem£t
(
ihex
,0, *ihex);

17 
	}
}

23 
uöt32_t


24 
	$to_hex
(c⁄° *
ãxt
,
n
,c⁄° **
Ω
) {

25 
buf
[
n
+1];

27 
	`°∫˝y
(
buf
,
ãxt
,
n
)[n] = 0;

28 *
Ω
 = 
ãxt
 + 
	`°æí
(
buf
);

29  
	`°πoul
(
buf
,0,16);

30 
	}
}

39 
	$ihex_∑r£
(
s_ihex
 *
ihex
,c⁄° *
ãxt
) {

40 c⁄° *
˝
 = 
	`°rchr
(
ãxt
,':');

41 
csum
;

43 i‡–!
˝
 )

44  
IHEX_FAIL
;

46 
	`mem£t
(
ihex
->
d©a
,0, ihex->data);

48 ++
˝
;

49 
ihex
->
Àngth
 = 
	`to_hex
(
˝
,2,&cp);

50 
ihex
->
addr
 = 
	`to_hex
(
˝
,4,&cp);

51 
ihex
->
πy≥
 = 
	`to_hex
(
˝
,2,&cp);

53 i‡–
ihex
->
Àngth
 >  ihex->
d©a
 )

54  
IHEX_FAIL
;

56 
csum
 = 
ihex
->
Àngth
 + ((ihex->
addr
 >> 8) & 0xFF) + (ihex->addr & 0xFF)

57 + 
ihex
->
πy≥
;

59  
ux
=0; ux<
ihex
->
Àngth
; ++ux ) {

60 
ihex
->
d©a
[
ux
] = 
	`to_hex
(
˝
,2,&cp);

61 
csum
 +
ihex
->
d©a
[
ux
];

63 
ihex
->
checksum
 = 
	`to_hex
(
˝
,2,&cp);

64 
ihex
->
compcsum
 = (-()(
csum
 & 0x0FF)) & 0xFF;

65 i‡–
ihex
->
compcsum
 !ihex->
checksum
 )

66  
IHEX_FAIL
;

68 i‡–
ihex
->
πy≥
 =
IHEX_RT_XLADDR
 ) {

69 
ihex
->
ba£addr
 = (
uöt32_t
)ihex->
d©a
[0] << 24

70 | (
uöt32_t
)
ihex
->
d©a
[1] << 16;

71 } i‡–
ihex
->
πy≥
 =
IHEX_RT_SLADDR
 ) {

72 
ihex
->
com∑ddr
 = (
uöt32_t
)ihex->
d©a
[0] << 24

73 | (
uöt32_t
)
ihex
->
d©a
[1] << 16

74 | (
uöt32_t
)
ihex
->
d©a
[2] << 8

75 | (
uöt32_t
)
ihex
->
d©a
[3];

77 
ihex
->
com∑ddr
 = ihex->
ba£addr
 + ihex->
addr
;

79  
ihex
->
πy≥
;

80 
	}
}

	@../libwwg/src/mcuio.c

5 
	~<°d¨g.h
>

6 
	~<mcuio.h
>

8 c⁄° 
s_mcuio
 
	gdev_u¨t1
 =

9 { 
u¨t1_putc
, 
u¨t1_puts
, 
u¨t1_v¥ötf
, 
u¨t1_gëc
, 
u¨t1_≥ek
, 
u¨t1_gës
, 
u¨t1_wrôe
, 
u¨t1_gëlöe
 };

11 c⁄° 
s_mcuio
 
	gdev_u¨t2
 =

12 { 
u¨t2_putc
, 
u¨t2_puts
, 
u¨t2_v¥ötf
, 
u¨t2_gëc
, 
u¨t2_≥ek
, 
u¨t2_gës
, 
u¨t2_wrôe
, 
u¨t2_gëlöe
 };

14 c⁄° 
s_mcuio
 
	gdev_u¨t3
 =

15 { 
u¨t3_putc
, 
u¨t3_puts
, 
u¨t3_v¥ötf
, 
u¨t3_gëc
, 
u¨t3_≥ek
, 
u¨t3_gës
, 
u¨t3_wrôe
, 
u¨t3_gëlöe
 };

17 c⁄° 
s_mcuio
 
	gdev_usb
 =

18 { 
usb_putc
, 
usb_puts
, 
usb_v¥ötf
, 
usb_gëc
, 
usb_≥ek
, 
usb_gës
, 
usb_wrôe
, 
usb_gëlöe
 };

20 c⁄° 
s_mcuio


21 *
	gmcu_u¨t1
 = &
dev_u¨t1
,

22 *
	gmcu_u¨t2
 = &
dev_u¨t2
,

23 *
	gmcu_u¨t3
 = &
dev_u¨t3
,

24 *
	gmcu_usb
 = &
dev_usb
;

26 c⁄° 
s_mcuio


27 *
	gmcu_°dio
 = &
dev_usb
;

30 
	$mcu_¥ötf
(c⁄° 
s_mcuio
 *
dev
,c⁄° *
f‹m©
,...) {

31 
va_li°
 
≠
;

32 
rc
;

34 
	`va_°¨t
(
≠
,
f‹m©
);

35 
rc
 = 
dev
->
	`v¥ötf
(
f‹m©
,
≠
);

36 
	`va_íd
(
≠
);

37  
rc
;

38 
	}
}

41 
	$°d_¥ötf
(c⁄° *
f‹m©
,...) {

42 
va_li°
 
≠
;

43 
rc
;

45 
	`va_°¨t
(
≠
,
f‹m©
);

46 
rc
 = 
mcu_°dio
->
	`v¥ötf
(
f‹m©
,
≠
);

47 
	`va_íd
(
≠
);

48  
rc
;

49 
	}
}

	@../libwwg/src/miniprintf.c

8 
	~<°rög.h
>

9 
	~<°dboﬁ.h
>

10 
	~<möùrötf.h
>

16 
	ss_möi_¨gs
 {

17 (*
	mputc
)(,*);

18 *
	m¨gp
;

21 
s_möi_¨gs
 
	tmöürg_t
;

29 
	$möi_wrôe
(
möürg_t
 *
möi
,c⁄° *
msg
) {

30 
ch
;

32  (
ch
 = *
msg
++) != 0 )

33 
möi
->
	`putc
(
ch
,möi->
¨gp
);

34 
	}
}

41 
	$möi_∑d
(
möürg_t
 *
möi
,
∑d
,
width
,c⁄° *
ãxt
) {

42 
¶í
;

44 i‡–
width
 > 0 ) {

45 
¶í
 = 
	`°æí
(
ãxt
);

47  
width
 -
¶í
; width > 0; --width )

48 
möi
->
	`putc
(
∑d
,möi->
¨gp
);

50 
	}
}

57 
	$öã∫Æ_v¥ötf
(
möürg_t
 *
möi
,c⁄° *
f‹m©
,
va_li°
 
¨g
) {

58 
ch
, 
∑d
, 
sgn
;

59 
vöt
, 
width
;

60 
vl⁄g
;

61 
uöt
;

62 
ul⁄g
;

63 c⁄° *
•å
;

64 
buf
[40], *
b±r
;

65 
cˇ£
 = 0;

66 
boﬁ
 
l⁄gf
;

68  (
ch
 = *
f‹m©
++) != 0 ) {

69 i‡–
ch
 != '%' ) {

71 
möi
->
	`putc
(
ch
,möi->
¨gp
);

78 
∑d
 = ' ';

79 
sgn
 = 0;

80 
ch
 = *
f‹m©
++;

82 i‡–
ch
 == '+' || ch == '-' ) {

83 
sgn
 = 
ch
;

84 
ch
 = *
f‹m©
++;

87 i‡–
ch
 == '0' ) {

88 
∑d
 = 
ch
;

89 
ch
 = *
f‹m©
++;

95  
width
 = 0; 
ch
 && ch >'0' && ch <'9'; ch = *
f‹m©
++ )

96 
width
 = width * 10 + (
ch
 & 0x0F);

98 i‡–!
ch
 )

101 i‡–
ch
 == 'l' ) {

102 
l⁄gf
 = 
åue
;

103 
ch
 = *
f‹m©
++;

109  
ch
 ) {

111 i‡–!
l⁄gf
 )

112 
vöt
 = 
	`va_¨g
(
¨g
,);

113 
vöt
 = 
	`va_¨g
(
¨g
,);

114 
möi
->
	`putc
(()
vöt
,möi->
¨gp
);

118 i‡–!
l⁄gf
 ) {

119 
uöt
 = 
	`va_¨g
(
¨g
,);

120 
b±r
 = 
buf
 +  buf;

121 *--
b±r
 = 0;

123 *--
b±r
 = 
uöt
 % 10u + '0';

124 
uöt
 /= 10u;

125 }  
uöt
 != 0 );

127 
ul⁄g
 = 
	`va_¨g
(
¨g
,);

128 
b±r
 = 
buf
 +  buf;

129 *--
b±r
 = 0;

131 *--
b±r
 = 
ul⁄g
 % 10u + '0';

132 
ul⁄g
 /= 10u;

133 }  
ul⁄g
 != 0 );

135 
	`möi_∑d
(
möi
,
∑d
,
width
,
b±r
);

136 
	`möi_wrôe
(
möi
,
b±r
);

140 i‡–!
l⁄gf
 ) {

141 
vöt
 = 
	`va_¨g
(
¨g
,);

142 i‡–
vöt
 < 0 ) {

143 
möi
->
	`putc
('-',möi->
¨gp
);

144 
vöt
 = -vint;

145 } i‡–
sgn
 == '+' )

146 
möi
->
	`putc
(
sgn
,möi->
¨gp
);

147 
b±r
 = 
buf
 +  buf;

148 *--
b±r
 = 0;

150 *--
b±r
 = 
vöt
 % 10 + '0';

151 
vöt
 /= 10;

152 }  
vöt
 != 0 );

154 
vl⁄g
 = 
	`va_¨g
(
¨g
,);

155 i‡–
vl⁄g
 < 0 ) {

156 
möi
->
	`putc
('-',möi->
¨gp
);

157 
vl⁄g
 = -vlong;

158 } i‡–
sgn
 == '+' )

159 
möi
->
	`putc
(
sgn
,möi->
¨gp
);

160 
b±r
 = 
buf
 +  buf;

161 *--
b±r
 = 0;

163 *--
b±r
 = 
vl⁄g
 % 10 + '0';

164 
vl⁄g
 /= 10;

165 }  
vl⁄g
 != 0 );

167 
	`möi_∑d
(
möi
,
∑d
,
width
,
b±r
);

168 
	`möi_wrôe
(
möi
,
b±r
);

172 
	`möi_wrôe
(
möi
,"0x");

175 
cˇ£
 = 0x20;

178 i‡–!
l⁄gf
 ) {

179 
uöt
 = 
	`va_¨g
(
¨g
,);

180 
b±r
 = 
buf
 +  buf;

181 *--
b±r
 = 0;

183 
ch
 = 
uöt
 & 0x0F;

184 *--
b±r
 = 
ch
 + (ch <9 ? '0' : ('A'^
cˇ£
)-10);

185 
uöt
 >>= 4;

186 }  
uöt
 != 0 );

188 
ul⁄g
 = 
	`va_¨g
(
¨g
,);

189 
b±r
 = 
buf
 +  buf;

190 *--
b±r
 = 0;

192 
ch
 = 
ul⁄g
 & 0x0F;

193 *--
b±r
 = 
ch
 + (ch <9 ? '0' : ('A'^
cˇ£
)-10);

194 
ul⁄g
 >>= 4;

195 }  
ul⁄g
 != 0 );

197 
	`möi_∑d
(
möi
,
∑d
,
width
,
b±r
);

198 
	`möi_wrôe
(
möi
,
b±r
);

202 
•å
 = 
	`va_¨g
(
¨g
,const *);

203 i‡–
sgn
 != '-' )

204 
	`möi_∑d
(
möi
,
∑d
,
width
,
•å
);

205 
	`möi_wrôe
(
möi
,
•å
);

206 i‡–
sgn
 == '-' )

207 
	`möi_∑d
(
möi
,
∑d
,
width
,
•å
);

211 
möi
->
	`putc
(
ch
,möi->
¨gp
);

215 
möi
->
	`putc
('%',möi->
¨gp
);

216 
möi
->
	`putc
('?',möi->
¨gp
);

217 
möi
->
	`putc
(
ch
,möi->
¨gp
);

220 
	}
}

226 
	ss_öã∫Æ
 {

227 (*
	mputc
)();

228 
	mcou¡
;

229 
	mcooked
 : 1;

233 
	$möi_putc
(
ch
,*
¨gp
) {

234 
s_öã∫Æ
 *
öã∫p
 = (s_öã∫Æ *)
¨gp
;

236 
öã∫p
->
	`putc
(
ch
);

237 ++
öã∫p
->
cou¡
;

239 i‡–
ch
 ='\n' && 
öã∫p
->
cooked
 != 0 ) {

241 
öã∫p
->
	`putc
('\r');

242 ++
öã∫p
->
cou¡
;

244 
	}
}

251 
	$möi_v¥ötf0
((*
putc
)(),
cooked
,c⁄° *
f‹m©
,
va_li°
 
¨gs
) {

252 
möürg_t
 
möi
;

253 
s_öã∫Æ
 
öã∫
;

255 
öã∫
.
putc
 =Öutc;

256 
öã∫
.
cou¡
 = 0u;

257 
öã∫
.
cooked
 = !!cooked;

259 
möi
.
putc
 = 
möi_putc
;

260 
möi
.
¨gp
 = (*)&
öã∫
;

262 
	`öã∫Æ_v¥ötf
(&
möi
,
f‹m©
,
¨gs
);

263  
öã∫
.
cou¡
;

264 
	}
}

271 
	$möi_v¥ötf_cooked
((*
putc
)(),c⁄° *
f‹m©
,
va_li°
 
¨gs
) {

272  
	`möi_v¥ötf0
(
putc
,1,
f‹m©
,
¨gs
);

273 
	}
}

280 
	$möi_v¥ötf_uncooked
((*
putc
)(),c⁄° *
f‹m©
,
va_li°
 
¨gs
) {

281  
	`möi_v¥ötf0
(
putc
,0,
f‹m©
,
¨gs
);

282 
	}
}

288 
	ss_möi_•rötf
 {

289 *
	mbuf
;

290 
	mmaxbuf
;

291 *
	m±r
;

295 
	$möi_•utc
(
ch
,*
¨gp
) {

296 
s_möi_•rötf
 *
˘l
 = (s_möi_•röt‡*)
¨gp
;

298 i‡–()(
˘l
->
±r
 - cé->
buf
Ë>˘l->
maxbuf
 )

300 *
˘l
->
±r
++ = 
ch
;

301 
	}
}

308 
	$möi_¢¥ötf
(*
buf
,
maxbuf
,c⁄° *
f‹m©
,...) {

309 
möürg_t
 
möi
;

310 
s_möi_•rötf
 
˘l
;

311 
va_li°
 
¨gs
;

312 
cou¡
;

314 
möi
.
putc
 = 
möi_•utc
;

315 
möi
.
¨gp
 = (*)&
˘l
;

317 
˘l
.
±r
 = cé.
buf
 = buf;

318 
˘l
.
maxbuf
 = maxbuf;

320 
	`va_°¨t
(
¨gs
,
f‹m©
);

321 
	`öã∫Æ_v¥ötf
(&
möi
,
f‹m©
,
¨gs
);

322 
	`va_íd
(
¨gs
);

324 
cou¡
 = ()(
˘l
.
±r
 - cé.
buf
);

325 
	`möi_•utc
(0,&
˘l
);

326  
cou¡
;

327 
	}
}

	@../libwwg/src/monitor.c

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<°dboﬁ.h
>

8 
	~<˘y≥.h
>

10 
	~<lib›ícm3/cm3/c‹ãx.h
>

11 
	~<lib›ícm3/cm3/scb.h
>

12 
	~<lib›ícm3/°m32/rcc.h
>

13 
	~<lib›ícm3/°m32/gpio.h
>

14 
	~<lib›ícm3/cm3/scb.h
>

15 
	~<lib›ícm3/°m32/exti.h
>

16 
	~<lib›ícm3/°m32/adc.h
>

17 
	~<lib›ícm3/°m32/timî.h
>

18 
	~<lib›ícm3/°m32/dma.h
>

19 
	~<lib›ícm3/°m32/πc.h
>

20 
	~<lib›ícm3/°m32/f1/bkp.h
>

21 
	~<lib›ícm3/°m32/f1/nvic.h
>

22 
	~<lib›ícm3/°m32/ˇn.h
>

24 
	~<FªeRTOS.h
>

25 
	~<mcuio.h
>

26 
	~<möùrötf.h
>

27 
	~<m⁄ô‹.h
>

29 
	eF‹m©
 {

30 
	mBö¨y
=0,

31 
	mDecimÆ
,

32 
	mHex
,

35 
	sbdesc
 {

36 
	msbô
 : 5;

37 
	mbôs
 : 6;

38 
F‹m©
 
	mf‹m©
 : 3;

39 
	mwidth
 : 6;

40 c⁄° *
	mdesc
;

44 
	$putbö
(*
buf
,
uöt32_t
 
v
,
bôs
) {

45 
ãmp
[34], *
p
;

47 
p
 = 
ãmp
 + Åemp;

48  *--
p
 = 0; 
bôs
 > 0; --bits ) {

49 *--
p
 = (
v
 & 1) ? '1' : '0';

50 
v
 >>= 1;

52 
	`°r˝y
(
buf
,
p
);

53 
	}
}

56 
	$dump_hdrs
(
x
,c⁄° 
bdesc
 *
desc
,
n
) {

57 
w
, 
tw
, 
b
, 
fú°
=
x
;

59 
	`°d_¥ötf
(" ");

60  ; 
x
<
n
; ++x ) {

61 
w
 = 
desc
[
x
].
width
;

62 
tw
 = 
	`°æí
(
desc
[
x
].desc);

64 i‡–
x
 > 
fú°
 && 
w
 < 0 ) {

65 
	`°d_putc
('\n');

66  
x
;

67 } i‡–
w
 < 0 )

68 
w
 = -w;

70 i‡–
tw
 > 
w
 )

71 
b
 = 
tw
 - 
w
;

72 
b
 = 
w
 - 
tw
;

74  
b
-- > 0 )

75 
	`°d_putc
(' ');

77 
	`°d_¥ötf
("%s%s",

78 
desc
[
x
].desc,

79 
x
+1 < 
n
 ? "|" : "\n");

82 
	}
}

85 
	$dump_vÆs
(
x
,
uöt32_t
 
ªg
,c⁄° 
bdesc
 *
desc
,
n
) {

86 
buf
[40];

87 
uöt32_t
 
v
, 
mask
, 
shi·r
;

88 
w
, 
tw
, 
b
, 
fú°
=
x
;

90 
	`°d_¥ötf
(" ");

91  ; 
x
<
n
; ++x ) {

92 
w
 = 
desc
[
x
].
width
;

93 i‡–
x
>
fú°
 && 
w
 < 0 ) {

94 
	`°d_putc
('\n');

96 } i‡–
w
 < 0 )

97 
w
 = -w;

99 
mask
 = (1 << 
desc
[
x
].
bôs
) - 1;

100 
shi·r
 = 
desc
[
x
].
sbô
 - desc[x].
bôs
 + 1;

101 
v
 = (
ªg
 >> 
shi·r
Ë& 
mask
;

102  
desc
[
x
].
f‹m©
 ) {

103 
Bö¨y
:

104 
	`putbö
(
buf
,
v
,
desc
[
x
].
bôs
);

106 
DecimÆ
:

107 
	`möi_¢¥ötf
(
buf
, buf,"%d",()
v
);

109 
Hex
:

110 
	`möi_¢¥ötf
(
buf
, buf,"$%X",()
v
);

113 
buf
[0] = '?';

114 
buf
[1] = 0;

117 
tw
 = 
	`°æí
(
buf
);

119 i‡–
tw
 > 
w
 )

120 
b
 = 
tw
 - 
w
;

121 
b
 = 
w
 - 
tw
;

123  
b
-- > 0 )

124 
	`°d_putc
(' ');

126 
	`°d_¥ötf
("%s%c",
buf
,
x
+1 < 
n
 ? '|' : '\n');

128 
	}
}

131 
	$dump_ªg_öfo
(vﬁ©ûê
uöt32_t
 *
øddr
,c⁄° *
dev
,
no
,c⁄° *
des¸ù
) {

132 
uöt32_t
 
ªg
 = *
øddr
;

133 
«me
[32];

135 i‡–
no
 > 0 )

136 
	`möi_¢¥ötf
(
«me
,Çame,"%s%d_%s",
dev
,
no
,
des¸ù
);

137 
	`möi_¢¥ötf
(
«me
,Çame,"%s%s%s",

138 
dev
,

139 
des¸ù
 ? "_" : "",

140 
des¸ù
 ? descrip : "");

141 
	`°d_¥ötf
("\n%-12s: $%08X @ $%08X\n",
«me
,()
ªg
,()
øddr
);

142 
	}
}

145 
	$dump_ªg_sim∂e16
(vﬁ©ûê
uöt32_t
 *
øddr
,c⁄° *
dev
,
no
,c⁄° *
des¸ù
,
uöt16_t
 
vÆue
) {

146 
uöt32_t
 
ªg
 = *
øddr
;

147 
«me
[32];

149 i‡–
no
 > 0 )

150 
	`möi_¢¥ötf
(
«me
,Çame,"%s%d_%s",
dev
,
no
,
des¸ù
);

151 
	`möi_¢¥ötf
(
«me
,Çame,"%s%s%s",

152 
dev
,

153 
des¸ù
 ? "_" : "",

154 
des¸ù
 ? descrip : "");

155 
	`°d_¥ötf
("%-12s: $%08X @ $%08X, VALUE: $%08X %5u",
«me
,()
ªg
,()
øddr
,()
vÆue
,()value);

156 i‡–
vÆue
 & 0x8000 )

157 
	`°d_¥ötf
(" (%d)",()
vÆue
);

158 
	`°d_¥ötf
("\n");

159 
	}
}

162 
	$dump_ªg
(vﬁ©ûê
uöt32_t
 *
øddr
,c⁄° *
dev
,
no
,c⁄° *
des¸ù
,c⁄° 
bdesc
 *
desc
,
n
) {

163 
uöt32_t
 
ªg
 = *
øddr
;

164 
x
, 
x2
;

166 
	`dump_ªg_öfo
(
øddr
,
dev
,
no
,
des¸ù
);

167 
x
 = 
	`dump_hdrs
(0,
desc
,
n
);

168 
	`dump_vÆs
(0,
ªg
,
desc
,
n
);

170  ; 
x
 > 0; x = 
x2
 ) {

171 
x2
 = 
	`dump_hdrs
(
x
,
desc
,
n
);

172 
	`dump_vÆs
(
x
,
ªg
,
desc
,
n
);

174 
	}
}

177 
	$dump_rcc
() {

178 c⁄° 
bdesc
 
rcc_¸
[] = {

179 { 31, 6, 
Bö¨y
, 6, "res" },

180 { 25, 1, 
Bö¨y
, 6, "PLLRDY" },

181 { 24, 1, 
Bö¨y
, 5, "PLLON" },

182 { 23, 4, 
Bö¨y
, 4, "res" },

183 { 19, 1, 
Bö¨y
, 5, "CSSON" },

184 { 18, 1, 
Bö¨y
, 6, "HSEBYP" },

185 { 17, 1, 
Bö¨y
, 6, "HSERDY" },

186 { 16, 1, 
Bö¨y
, 5, "HSEON" },

187 { 15, 8, 
Hex
, 6, "HSICAL" },

188 { 7, 5, 
Hex
, 7, "HSITRIM" },

189 { 2, 1, 
Bö¨y
, 3, "res" },

190 { 1, 1, 
Bö¨y
, 6, "HSIRDY" },

191 { 0, 1, 
Bö¨y
, 5, "HSION" }

193 c⁄° 
bdesc
 
rcc_cfgr
[] = {

194 { 31, 5, 
Bö¨y
, 5, "res" },

195 { 26, 3, 
Bö¨y
, 3, "MCO" },

196 { 23, 1, 
Bö¨y
, 3, "res" },

197 { 22, 1, 
Bö¨y
, 6, "USBPRE" },

198 { 21, 4, 
Bö¨y
, 6, "PLLMUL" },

199 { 17, 1, 
Bö¨y
, 8, "PLLXTPRE" },

200 { 16, 1, 
Bö¨y
, 6, "PLLSRC" },

201 { 15, 2, 
Bö¨y
, 6, "ADCPRE" },

202 { 13, 3, 
Bö¨y
, 5, "PPRE2" },

203 { 10, 3, 
Bö¨y
, 5, "PPRE1" },

204 { 7, 4, 
Bö¨y
, 4, "HPRE" },

205 { 3, 2, 
Bö¨y
, 3, "SWS" },

206 { 1, 2, 
Bö¨y
, 2, "SW" }

208 c⁄° 
bdesc
 
rcc_cú
[] = {

209 { 31, 8, 
Bö¨y
, 8, "res" },

210 { 23, 1, 
Bö¨y
, 4, "CSSC" },

211 { 22, 2, 
Bö¨y
, 3, "res" },

212 { 20, 1, 
Bö¨y
, 7, "PLLRDYC" },

213 { 19, 1, 
Bö¨y
, 7, "HSERDYC" },

214 { 18, 1, 
Bö¨y
, 7, "HSIRDYC" },

215 { 17, 1, 
Bö¨y
, 7, "LSERDYC" },

216 { 16, 1, 
Bö¨y
, 7, "LSIRDYC" },

217 { 15, 3, 
Bö¨y
, -3, "res" },

218 { 12, 1, 
Bö¨y
, 8, "PLLRDYIE" },

219 { 11, 1, 
Bö¨y
, 8, "HSERDYIE" },

220 { 10, 1, 
Bö¨y
, 8, "HSIRDYIE" },

221 { 9, 1, 
Bö¨y
, 8, "LSERDYIE" },

222 { 8, 1, 
Bö¨y
, 8, "LSIRDYIE" },

223 { 7, 1, 
Bö¨y
, 4, "CSSF" },

224 { 6, 2, 
Bö¨y
, 3, "res" },

225 { 4, 1, 
Bö¨y
, 7, "PLLRDYF" },

226 { 3, 1, 
Bö¨y
, 7, "HSERDYF" },

227 { 2, 1, 
Bö¨y
, 7, "HSIRDYF" },

228 { 1, 1, 
Bö¨y
, 7, "LSERDYF" },

229 { 0, 1, 
Bö¨y
, 7, "LSIRDYF" },

231 c⁄° 
bdesc
 
rcc_≠b2r°r
[] = {

232 { 31, 10, 
Bö¨y
, 10, "res" },

233 { 21, 1, 
Bö¨y
, 8, "TIM11RST" },

234 { 20, 1, 
Bö¨y
, 8, "TIM10RST" },

235 { 19, 1, 
Bö¨y
, 7, "TIM9RST" },

236 { 18, 3, 
Bö¨y
, 3, "res" },

237 { 15, 1, 
Bö¨y
, -7, "ADC3RST" },

238 { 14, 1, 
Bö¨y
, 9, "USART1RST" },

239 { 13, 1, 
Bö¨y
, 7, "TIM8RST" },

240 { 12, 1, 
Bö¨y
, 7, "SPI1RST" },

241 { 11, 1, 
Bö¨y
, 7, "TIM1RST" },

242 { 10, 1, 
Bö¨y
, 7, "ADC2RST" },

243 { 9, 1, 
Bö¨y
, 7, "ADC1RST" },

244 { 8, 1, 
Bö¨y
, 7, "IOPGRST" },

245 { 7, 1, 
Bö¨y
, 7, "IOPFRST" },

246 { 6, 1, 
Bö¨y
, 7, "IOPERST" },

247 { 5, 1, 
Bö¨y
, 7, "IOPDRST" },

248 { 4, 1, 
Bö¨y
, 7, "IOPCRST" },

249 { 3, 1, 
Bö¨y
, 7, "IOPBRST" },

250 { 2, 1, 
Bö¨y
, 7, "IOPARST" },

251 { 1, 1, 
Bö¨y
, 3, "res" },

252 { 0, 1, 
Bö¨y
, 7, "AFIORST" }

254 c⁄° 
bdesc
 
rcc_ahbír
[] = {

255 { 31, 21, 
Bö¨y
, 21, "res" },

256 { 10, 1, 
Bö¨y
, 6, "SDIOEN" },

257 { 9, 1, 
Bö¨y
, 3, "res" },

258 { 8, 1, 
Bö¨y
, 6, "FSMCEN" },

259 { 7, 1, 
Bö¨y
, 3, "res" },

260 { 6, 1, 
Bö¨y
, 5, "CRCEN" },

261 { 5, 1, 
Bö¨y
, 3, "res" },

262 { 4, 1, 
Bö¨y
, 7, "FLITFEN" },

263 { 3, 1, 
Bö¨y
, 3, "res" },

264 { 2, 1, 
Bö¨y
, 6, "SRAMEN" },

265 { 1, 1, 
Bö¨y
, 6, "DMA2EN" },

266 { 0, 1, 
Bö¨y
, 6, "DMA1EN" }

268 c⁄° 
bdesc
 
rcc_≠b2ír
[] = {

269 { 31, 10, 
Bö¨y
, 10, "res" },

270 { 21, 1, 
Bö¨y
, 7, "TIM11EN" },

271 { 20, 1, 
Bö¨y
, 7, "TIM10EN" },

272 { 19, 1, 
Bö¨y
, 6, "TIM9EN" },

273 { 18, 3, 
Bö¨y
, 3, "res" },

274 { 15, 1, 
Bö¨y
, -6, "ADC3EN" },

275 { 14, 1, 
Bö¨y
, 8, "USART1EN" },

276 { 13, 1, 
Bö¨y
, 6, "TIM8EN" },

277 { 12, 1, 
Bö¨y
, 6, "SPI1EN" },

278 { 11, 1, 
Bö¨y
, 6, "TIM1EN" },

279 { 10, 1, 
Bö¨y
, 6, "ADC2EN" },

280 { 9, 1, 
Bö¨y
, 6, "ADC1EN" },

281 { 8, 1, 
Bö¨y
, 6, "IOPGEN" },

282 { 7, 1, 
Bö¨y
, 6, "IOPFEN" },

283 { 6, 1, 
Bö¨y
, 6, "IOPEEN" },

284 { 5, 1, 
Bö¨y
, 6, "IOPDEN" },

285 { 4, 1, 
Bö¨y
, 6, "IOPCEN" },

286 { 3, 1, 
Bö¨y
, 6, "IOPBEN" },

287 { 2, 1, 
Bö¨y
, 6, "IOPAEN" },

288 { 1, 1, 
Bö¨y
, 3, "res" },

289 { 0, 1, 
Bö¨y
, 6, "AFIOEN" }

291 c⁄° 
bdesc
 
rcc_≠b1ír
[] = {

292 { 31, 2, 
Bö¨y
, 3, "res" },

293 { 29, 1, 
Bö¨y
, 5, "DACEN" },

294 { 28, 1, 
Bö¨y
, 5, "PWREN" },

295 { 27, 1, 
Bö¨y
, 5, "BCKEN" },

296 { 26, 1, 
Bö¨y
, 3, "res" },

297 { 25, 1, 
Bö¨y
, 5, "CANEN" },

298 { 24, 1, 
Bö¨y
, 3, "res" },

299 { 23, 1, 
Bö¨y
, 5, "USBEN" },

300 { 22, 1, 
Bö¨y
, 6, "I2C2EN" },

301 { 21, 1, 
Bö¨y
, 6, "I2C1EN" },

302 { 20, 1, 
Bö¨y
, 7, "UART5EN" },

303 { 19, 1, 
Bö¨y
, 7, "UART4EN" },

304 { 18, 1, 
Bö¨y
, 8, "USART3EN" },

305 { 17, 1, 
Bö¨y
, 8, "USART2EN" },

306 { 16, 1, 
Bö¨y
, -3, "res" },

307 { 15, 1, 
Bö¨y
, 6, "SPI3EN" },

308 { 14, 1, 
Bö¨y
, 6, "SPI2EN" },

309 { 13, 2, 
Bö¨y
, 3, "res" },

310 { 11, 1, 
Bö¨y
, 6, "WWDGEN" },

311 { 10, 2, 
Bö¨y
, 3, "res" },

312 { 8, 1, 
Bö¨y
, 7, "TIM14EN" },

313 { 7, 1, 
Bö¨y
, 7, "TIM13EN" },

314 { 6, 1, 
Bö¨y
, 7, "TIM12EN" },

315 { 5, 1, 
Bö¨y
, 6, "TIM7EN" },

316 { 4, 1, 
Bö¨y
, 6, "TIM6EN" },

317 { 3, 1, 
Bö¨y
, 6, "TIM5EN" },

318 { 2, 1, 
Bö¨y
, 6, "TIM4EN" },

319 { 1, 1, 
Bö¨y
, 6, "TIM3EN" },

320 { 0, 1, 
Bö¨y
, 6, "TIM2EN" },

322 c⁄° 
bdesc
 
rcc_bd¸
[] = {

323 { 31, 15, 
Bö¨y
, 15, "res" },

324 { 16, 1, 
Bö¨y
, 5, "BD$ST" },

325 { 15, 1, 
Bö¨y
, 5, "res" },

326 { 9, 2, 
Bö¨y
, 6, "RTCSEL" },

327 { 7, 5, 
Bö¨y
, 5, "res" },

328 { 2, 1, 
Bö¨y
, 6, "LSEBYP" },

329 { 1, 1, 
Bö¨y
, 6, "LSERDY" },

330 { 0, 1, 
Bö¨y
, 5, "LSEON" },

332 c⁄° 
bdesc
 
rcc_c§
[] = {

333 { 31, 1, 
Bö¨y
, 8, "LPWRRSTF" },

334 { 30, 1, 
Bö¨y
, 8, "WWDGRSTF" },

335 { 29, 1, 
Bö¨y
, 8, "IWDGRSTF" },

336 { 28, 1, 
Bö¨y
, 7, "SFTRSTF" },

337 { 27, 1, 
Bö¨y
, 7, "PORRSTF" },

338 { 26, 1, 
Bö¨y
, 7, "PINRSTF" },

339 { 25, 1, 
Bö¨y
, 3, "res" },

340 { 24, 1, 
Bö¨y
, 4, "RMVF" },

341 { 23, 8, 
Bö¨y
, 8, "res" },

342 { 15, 14, 
Bö¨y
, 14, "res" },

343 { 1, 1, 
Bö¨y
, 6, "LSIRDY" },

344 { 0, 1, 
Bö¨y
, 5, "LSION" },

347 
	`dump_ªg
(&
RCC_CR
,"RCC",0,"CR",
rcc_¸
,13);

348 
	`dump_ªg
(&
RCC_CFGR
,"RCC",0,"CFGR",
rcc_cfgr
,13);

349 
	`dump_ªg
(&
RCC_CIR
,"RCC",0,"CIR",
rcc_cú
,21);

350 
	`dump_ªg
(&
RCC_APB2RSTR
,"RCC",0,"APB2RSTR",
rcc_≠b2r°r
,21);

351 
	`dump_ªg
(&
RCC_AHBENR
,"RCC",0,"AHBENR",
rcc_ahbír
,12);

352 
	`dump_ªg
(&
RCC_APB2ENR
,"RCC",0,"APB2ENR",
rcc_≠b2ír
,21);

353 
	`dump_ªg
(&
RCC_APB1ENR
,"RCC",0,"APB1ENR",
rcc_≠b1ír
,29);

354 
	`dump_ªg
(&
RCC_BDCR
,"RCC",0,"BDCR",
rcc_bd¸
,8);

355 
	`dump_ªg
(&
RCC_CSR
,"RCC",0,"CSR",
rcc_c§
,12);

356 
	}
}

359 
	$dump_gpio
() {

360 c⁄° 
bdesc
 
gpiox_¸lh
[] = {

361 { 31, 2, 
Bö¨y
, 4, "CNF7" },

362 { 29, 2, 
Bö¨y
, 5, "MODE7" },

363 { 27, 2, 
Bö¨y
, 4, "CNF6" },

364 { 25, 2, 
Bö¨y
, 5, "MODE6" },

365 { 23, 2, 
Bö¨y
, 4, "CNF5" },

366 { 21, 2, 
Bö¨y
, 5, "MODE5" },

367 { 19, 2, 
Bö¨y
, 4, "CNF4" },

368 { 17, 2, 
Bö¨y
, 5, "MODE4" },

369 { 15, 2, 
Bö¨y
, 4, "CNF3" },

370 { 13, 2, 
Bö¨y
, 5, "MODE3" },

371 { 11, 2, 
Bö¨y
, 4, "CNF2" },

372 { 9, 2, 
Bö¨y
, 5, "MODE2" },

373 { 7, 2, 
Bö¨y
, 4, "CNF1" },

374 { 5, 2, 
Bö¨y
, 5, "MODE1" },

375 { 3, 2, 
Bö¨y
, 4, "CNF0" },

376 { 1, 2, 
Bö¨y
, 5, "MODE0" },

379 
	`dump_ªg
(&
GPIOA_CRL
,"GPIOA",0,"CRL",
gpiox_¸lh
,16);

380 
	`dump_ªg
(&
GPIOB_CRL
,"GPIOB",0,"CRL",
gpiox_¸lh
,16);

381 
	`dump_ªg
(&
GPIOC_CRL
,"GPIOC",0,"CRL",
gpiox_¸lh
,16);

382 
	`dump_ªg
(&
GPIOD_CRL
,"GPIOD",0,"CRL",
gpiox_¸lh
,16);

384 
	`dump_ªg
(&
GPIOA_CRH
,"GPIOA",0,"CRH",
gpiox_¸lh
,16);

385 
	`dump_ªg
(&
GPIOB_CRH
,"GPIOB",0,"CRH",
gpiox_¸lh
,16);

386 
	`dump_ªg
(&
GPIOC_CRH
,"GPIOC",0,"CRH",
gpiox_¸lh
,16);

387 
	`dump_ªg
(&
GPIOD_CRH
,"GPIOD",0,"CRH",
gpiox_¸lh
,16);

389 
	`°d_¥ötf
("\n CNFx In 00=Analog, 01=Floating input, 10=Input Pull-up/down, 11= Reserved\n");

390 
	`°d_¥ötf
( " Out 00=Push/Pull, 01=Open-Drain, 10=AF Push/Pull, 11=AF Open Drain\n");

391 
	`°d_¥ötf
( " MODEy: 00=Input, 01=Output 10 MHz, 10=Output 2 MHz, 11=Output 50 MHz\n");

392 
	}
}

395 
	$dump_gpio_öputs
() {

396 c⁄° 
bdesc
 
gpiox_idr
[] = {

397 { 31, 16, 
Bö¨y
, 16, "res" },

398 { 15, 1, 
Bö¨y
, 5, "IDR15" },

399 { 14, 1, 
Bö¨y
, 5, "IDR14" },

400 { 13, 1, 
Bö¨y
, 5, "IDR13" },

401 { 12, 1, 
Bö¨y
, 5, "IDR12" },

402 { 11, 1, 
Bö¨y
, 5, "IDR11" },

403 { 10, 1, 
Bö¨y
, 5, "IDR10" },

404 { 9, 1, 
Bö¨y
, 4, "IDR9" },

405 { 8, 1, 
Bö¨y
, 4, "IDR8" },

406 { 7, 1, 
Bö¨y
, 4, "IDR7" },

407 { 6, 1, 
Bö¨y
, 4, "IDR6" },

408 { 5, 1, 
Bö¨y
, 4, "IDR5" },

409 { 4, 1, 
Bö¨y
, 4, "IDR4" },

410 { 3, 1, 
Bö¨y
, 4, "IDR3" },

411 { 2, 1, 
Bö¨y
, 4, "IDR2" },

412 { 1, 1, 
Bö¨y
, 4, "IDR1" },

413 { 0, 1, 
Bö¨y
, 4, "IDR0" },

416 
	`dump_ªg
(&
GPIOA_IDR
,"GPIOA",0,"IDR",
gpiox_idr
,17);

417 
	`dump_ªg
(&
GPIOB_IDR
,"GPIOB",0,"IDR",
gpiox_idr
,17);

418 
	`dump_ªg
(&
GPIOC_IDR
,"GPIOC",0,"IDR",
gpiox_idr
,17);

419 
	`dump_ªg
(&
GPIOD_IDR
,"GPIOD",0,"IDR",
gpiox_idr
,17);

420 
	}
}

423 
	$dump_gpio_ouçuts
() {

424 c⁄° 
bdesc
 
gpiox_odr
[] = {

425 { 31, 16, 
Bö¨y
, 16, "res" },

426 { 15, 1, 
Bö¨y
, 5, "ODR15" },

427 { 14, 1, 
Bö¨y
, 5, "ODR14" },

428 { 13, 1, 
Bö¨y
, 5, "ODR13" },

429 { 12, 1, 
Bö¨y
, 5, "ODR12" },

430 { 11, 1, 
Bö¨y
, 5, "ODR11" },

431 { 10, 1, 
Bö¨y
, 5, "ODR10" },

432 { 9, 1, 
Bö¨y
, 4, "ODR9" },

433 { 8, 1, 
Bö¨y
, 4, "ODR8" },

434 { 7, 1, 
Bö¨y
, 4, "ODR7" },

435 { 6, 1, 
Bö¨y
, 4, "ODR6" },

436 { 5, 1, 
Bö¨y
, 4, "ODR5" },

437 { 4, 1, 
Bö¨y
, 4, "ODR4" },

438 { 3, 1, 
Bö¨y
, 4, "ODR3" },

439 { 2, 1, 
Bö¨y
, 4, "ODR2" },

440 { 1, 1, 
Bö¨y
, 4, "ODR1" },

441 { 0, 1, 
Bö¨y
, 4, "ODR0" },

444 
	`dump_ªg
(&
GPIOA_ODR
,"GPIOA",0,"ODR",
gpiox_odr
,17);

445 
	`dump_ªg
(&
GPIOB_ODR
,"GPIOB",0,"ODR",
gpiox_odr
,17);

446 
	`dump_ªg
(&
GPIOC_ODR
,"GPIOC",0,"ODR",
gpiox_odr
,17);

447 
	`dump_ªg
(&
GPIOD_ODR
,"GPIOD",0,"ODR",
gpiox_odr
,17);

448 
	}
}

451 
	$dump_gpio_locks
() {

452 c⁄° 
bdesc
 
gpiox_lckr
[] = {

453 { 31, 15, 
Bö¨y
, 15, "res" },

454 { 16, 1, 
Bö¨y
, 4, "LCKK" },

455 { 15, 1, 
Bö¨y
, 5, "LCK15" },

456 { 14, 1, 
Bö¨y
, 5, "LCK14" },

457 { 13, 1, 
Bö¨y
, 5, "LCK13" },

458 { 12, 1, 
Bö¨y
, 5, "LCK12" },

459 { 11, 1, 
Bö¨y
, 5, "LCK11" },

460 { 10, 1, 
Bö¨y
, 5, "LCK10" },

461 { 9, 1, 
Bö¨y
, 4, "LCK9" },

462 { 8, 1, 
Bö¨y
, 4, "LCK8" },

463 { 7, 1, 
Bö¨y
, 4, "LCK7" },

464 { 6, 1, 
Bö¨y
, 4, "LCK6" },

465 { 5, 1, 
Bö¨y
, 4, "LCK5" },

466 { 4, 1, 
Bö¨y
, 4, "LCK4" },

467 { 3, 1, 
Bö¨y
, 4, "LCK3" },

468 { 2, 1, 
Bö¨y
, 4, "LCK2" },

469 { 1, 1, 
Bö¨y
, 4, "LCK1" },

470 { 0, 1, 
Bö¨y
, 4, "LCK0" },

473 
	`dump_ªg
(&
GPIOA_LCKR
,"GPIOA",0,"LCKR",
gpiox_lckr
,18);

474 
	`dump_ªg
(&
GPIOB_LCKR
,"GPIOB",0,"LCKR",
gpiox_lckr
,18);

475 
	`dump_ªg
(&
GPIOC_LCKR
,"GPIOC",0,"LCKR",
gpiox_lckr
,18);

476 
	`dump_ªg
(&
GPIOD_LCKR
,"GPIOD",0,"LCKR",
gpiox_lckr
,18);

477 
	}
}

480 
	$dump_afio
() {

481 c⁄° 
bdesc
 
afio_ev¸
[] = {

482 { 31, 15, 
Bö¨y
, 15, "res" },

483 { 15, 8, 
Bö¨y
, 8, "res" },

484 { 7, 1, 
Bö¨y
, 4, "EVOE" },

485 { 6, 3, 
Bö¨y
, 4, "PORT" },

486 { 3, 3, 
Bö¨y
, 3, "PIN" }

488 c⁄° 
bdesc
 
afio_m≠r
[] = {

489 { 31, 5, 
Bö¨y
, 5, "res" },

490 { 26, 3, 
Bö¨y
, 7, "SQW_CFG" },

491 { 23, 3, 
Bö¨y
, 3, "res" },

492 { 20, 1, 
Bö¨y
, 16, "ADCETRGREG_REMAP" },

493 { 19, 1, 
Bö¨y
, -18, "ADCw_ETRGINJ_REMAP" },

494 { 18, 1, 
Bö¨y
, 17, "ADC1_TRGREG_REMAP" },

495 { 17, 1, 
Bö¨y
, 18, "ADC1_ETRGINJ_REMAP" },

496 { 16, 1, 
Bö¨y
, 3, "res" },

497 { 15, 1, 
Bö¨y
, -11, "PD001_REMAP" },

498 { 14, 2, 
Bö¨y
, 9, "CAN_REMAP" },

499 { 12, 1, 
Bö¨y
, 10, "TIM4_REMAP" },

500 { 11, 2, 
Bö¨y
, 10, "TIM3_REMAP" },

501 { 9, 2, 
Bö¨y
, 10, "TIM2_REMAP" },

502 { 7, 2, 
Bö¨y
, 10, "TIM1_REMAP" },

503 { 5, 2, 
Bö¨y
, -12, "USART3_REMAP" },

504 { 3, 1, 
Bö¨y
, 12, "USART2_REMAP" },

505 { 2, 1, 
Bö¨y
, 12, "USART1_REMAP" },

506 { 1, 1, 
Bö¨y
, 10, "I2C1_REMAP" },

507 { 0, 1, 
Bö¨y
, 10, "SPI1_REMAP" },

509 c⁄° 
bdesc
 
afio_exti¸1
[] = {

510 { 31, 16, 
Bö¨y
, 16, "res" },

511 { 15, 4, 
Bö¨y
, 5, "EXTI3" },

512 { 11, 4, 
Bö¨y
, 5, "EXTI2" },

513 { 7, 4, 
Bö¨y
, 5, "EXTI1" },

514 { 3, 4, 
Bö¨y
, 5, "EXTI0" },

516 c⁄° 
bdesc
 
afio_exti¸2
[] = {

517 { 31, 16, 
Bö¨y
, 16, "res" },

518 { 15, 4, 
Bö¨y
, 5, "EXTI7" },

519 { 11, 4, 
Bö¨y
, 5, "EXTI6" },

520 { 7, 4, 
Bö¨y
, 5, "EXTI5" },

521 { 3, 4, 
Bö¨y
, 5, "EXTI4" },

523 c⁄° 
bdesc
 
afio_exti¸3
[] = {

524 { 31, 16, 
Bö¨y
, 16, "res" },

525 { 15, 4, 
Bö¨y
, 6, "EXTI11" },

526 { 11, 4, 
Bö¨y
, 6, "EXTI10" },

527 { 7, 4, 
Bö¨y
, 5, "EXTI9" },

528 { 3, 4, 
Bö¨y
, 5, "EXTI8" },

530 c⁄° 
bdesc
 
afio_exti¸4
[] = {

531 { 31, 16, 
Bö¨y
, 16, "res" },

532 { 15, 4, 
Bö¨y
, 6, "EXTI15" },

533 { 11, 4, 
Bö¨y
, 6, "EXTI14" },

534 { 7, 4, 
Bö¨y
, 6, "EXTI13" },

535 { 3, 4, 
Bö¨y
, 6, "EXTI12" },

538 
	`dump_ªg
(&
AFIO_EVCR
,"AFIO",0,"EVCR",
afio_ev¸
,5);

539 
	`°d_¥ötf
(" PORT: 000=A, 001=B, 010=C, 011=D. 100=E\n");

540 
	`dump_ªg
(&
AFIO_MAPR
,"AFIO",0,"MAPR",
afio_m≠r
,19);

542 
	`dump_ªg
(&
AFIO_EXTICR1
,"AFIO",0,"EXTICR1",
afio_exti¸1
,5);

543 
	`dump_ªg
(&
AFIO_EXTICR2
,"AFIO",0,"EXTICR2",
afio_exti¸2
,5);

544 
	`dump_ªg
(&
AFIO_EXTICR3
,"AFIO",0,"EXTICR3",
afio_exti¸3
,5);

545 
	`dump_ªg
(&
AFIO_EXTICR4
,"AFIO",0,"EXTICR4",
afio_exti¸4
,5);

546 
	`°d_¥ötf
(" EXTIx: 0000=A, 0001=B, 0010=C, 0011=D\n");

547 
	}
}

550 
	$dump_öå
() {

551 c⁄° 
bdesc
 
exti_imr
[] = {

552 { 31, 12, 
Bö¨y
, 12, "res" },

553 { 19, 1, 
Bö¨y
, 3, "res" },

554 { 18, 1, 
Bö¨y
, 4, "MR18" },

555 { 17, 1, 
Bö¨y
, 4, "MR17" },

556 { 16, 1, 
Bö¨y
, 4, "MR16" },

557 { 15, 1, 
Bö¨y
, 4, "MR15" },

558 { 14, 1, 
Bö¨y
, 4, "MR14" },

559 { 13, 1, 
Bö¨y
, 4, "MR13" },

560 { 12, 1, 
Bö¨y
, 4, "MR12" },

561 { 11, 1, 
Bö¨y
, 4, "MR11" },

562 { 10, 1, 
Bö¨y
, 4, "MR10" },

563 { 9, 1, 
Bö¨y
, 3, "MR9" },

564 { 8, 1, 
Bö¨y
, 3, "MR8" },

565 { 7, 1, 
Bö¨y
, 3, "MR7" },

566 { 6, 1, 
Bö¨y
, 3, "MR6" },

567 { 5, 1, 
Bö¨y
, 3, "MR5" },

568 { 4, 1, 
Bö¨y
, 3, "MR4" },

569 { 3, 1, 
Bö¨y
, 3, "MR3" },

570 { 2, 1, 
Bö¨y
, 3, "MR2" },

571 { 1, 1, 
Bö¨y
, 3, "MR1" },

572 { 0, 1, 
Bö¨y
, 3, "MR0" },

574 c⁄° 
bdesc
 
exti_π§
[] = {

575 { 31, 12, 
Bö¨y
, 12, "res" },

576 { 19, 1, 
Bö¨y
, 3, "res" },

577 { 18, 1, 
Bö¨y
, 4, "TR18" },

578 { 17, 1, 
Bö¨y
, 4, "TR17" },

579 { 16, 1, 
Bö¨y
, 4, "TR16" },

580 { 15, 1, 
Bö¨y
, 4, "TR15" },

581 { 14, 1, 
Bö¨y
, 4, "TR14" },

582 { 13, 1, 
Bö¨y
, 4, "TR13" },

583 { 12, 1, 
Bö¨y
, 4, "TR12" },

584 { 11, 1, 
Bö¨y
, 4, "TR11" },

585 { 10, 1, 
Bö¨y
, 4, "TR10" },

586 { 9, 1, 
Bö¨y
, 3, "TR9" },

587 { 8, 1, 
Bö¨y
, 3, "TR8" },

588 { 7, 1, 
Bö¨y
, 3, "TR7" },

589 { 6, 1, 
Bö¨y
, 3, "TR6" },

590 { 5, 1, 
Bö¨y
, 3, "TR5" },

591 { 4, 1, 
Bö¨y
, 3, "TR4" },

592 { 3, 1, 
Bö¨y
, 3, "TR3" },

593 { 2, 1, 
Bö¨y
, 3, "TR2" },

594 { 1, 1, 
Bö¨y
, 3, "TR1" },

595 { 0, 1, 
Bö¨y
, 3, "TR0" },

597 c⁄° 
bdesc
 
exti_swõr
[] = {

598 { 31, 12, 
Bö¨y
, 12, "res" },

599 { 19, 1, 
Bö¨y
, 3, "res" },

600 { 18, 1, 
Bö¨y
, 7, "SWIER18" },

601 { 17, 1, 
Bö¨y
, 7, "SWIER17" },

602 { 16, 1, 
Bö¨y
, 7, "SWIER16" },

603 { 15, 1, 
Bö¨y
, 7, "SWIER15" },

604 { 14, 1, 
Bö¨y
, 7, "SWIER14" },

605 { 13, 1, 
Bö¨y
, 7, "SWIER13" },

606 { 12, 1, 
Bö¨y
, 7, "SWIER12" },

607 { 11, 1, 
Bö¨y
, 7, "SWIER11" },

608 { 10, 1, 
Bö¨y
, -7, "SWIER10" },

609 { 9, 1, 
Bö¨y
, 7, "SWIER9" },

610 { 8, 1, 
Bö¨y
, 7, "SWIER8" },

611 { 7, 1, 
Bö¨y
, 7, "SWIER7" },

612 { 6, 1, 
Bö¨y
, 7, "SWIER6" },

613 { 5, 1, 
Bö¨y
, 7, "SWIER5" },

614 { 4, 1, 
Bö¨y
, 7, "SWIER4" },

615 { 3, 1, 
Bö¨y
, 7, "SWIER3" },

616 { 2, 1, 
Bö¨y
, 7, "SWIER2" },

617 { 1, 1, 
Bö¨y
, 7, "SWIER1" },

618 { 0, 1, 
Bö¨y
, 7, "SWIER0" },

620 c⁄° 
bdesc
 
exti_¥
[] = {

621 { 31, 12, 
Bö¨y
, 12, "res" },

622 { 19, 1, 
Bö¨y
, 3, "res" },

623 { 18, 1, 
Bö¨y
, 4, "PR18" },

624 { 17, 1, 
Bö¨y
, 4, "PR17" },

625 { 16, 1, 
Bö¨y
, 4, "PR16" },

626 { 15, 1, 
Bö¨y
, 4, "PR15" },

627 { 14, 1, 
Bö¨y
, 4, "PR14" },

628 { 13, 1, 
Bö¨y
, 4, "PR13" },

629 { 12, 1, 
Bö¨y
, 4, "PR12" },

630 { 11, 1, 
Bö¨y
, 4, "PR11" },

631 { 10, 1, 
Bö¨y
, 4, "PR10" },

632 { 9, 1, 
Bö¨y
, 3, "PR9" },

633 { 8, 1, 
Bö¨y
, 3, "PR8" },

634 { 7, 1, 
Bö¨y
, 3, "PR7" },

635 { 6, 1, 
Bö¨y
, 3, "PR6" },

636 { 5, 1, 
Bö¨y
, 3, "PR5" },

637 { 4, 1, 
Bö¨y
, 3, "PR4" },

638 { 3, 1, 
Bö¨y
, 3, "PR3" },

639 { 2, 1, 
Bö¨y
, 3, "PR2" },

640 { 1, 1, 
Bö¨y
, 3, "PR1" },

641 { 0, 1, 
Bö¨y
, 3, "PR0" },

644 
	`dump_ªg
(&
EXTI_IMR
,"EXTI",0,"IMR",
exti_imr
,21);

645 
	`dump_ªg
(&
EXTI_EMR
,"EXTI",0,"EMR",
exti_imr
,21);

646 
	`dump_ªg
(&
EXTI_RTSR
,"EXTI",0,"RTSR",
exti_π§
,21);

647 
	`dump_ªg
(&
EXTI_FTSR
,"EXTI",0,"FTSR",
exti_π§
,21);

648 
	`dump_ªg
(&
EXTI_SWIER
,"EXTI",0,"SWIER",
exti_swõr
,21);

649 
	`dump_ªg
(&
EXTI_PR
,"EXTI",0,"PR",
exti_¥
,21);

650 
	}
}

653 
	$which_devi˚
(
low
,
high
) {

654 
ch
;

655 
dev
;

657 
	`°d_¥ötf
("Which devi˚ (%d-%d)? ",
low
,
high
);

658 
ch
 = 
	`°d_gëc
();

659 
	`°d_¥ötf
("%c\n",
ch
);

661 i‡–
ch
 < '0' || ch > '9' )

663 
dev
 = 
ch
 & 0x0F;

664 i‡–
dev
 < 
low
 || dev > 
high
 )

666  
dev
;

667 
	}
}

670 
	$dump_adc
() {

671 c⁄° 
bdesc
 
adc_§
[] = {

672 { 31, 16, 
Bö¨y
, 16, "res" },

673 { 15, 11, 
Bö¨y
, 11, "res" },

674 { 4, 1, 
Bö¨y
, 4, "STRT" },

675 { 3, 1, 
Bö¨y
, 5, "JSTRT" },

676 { 2, 1, 
Bö¨y
, 4, "JEOC" },

677 { 1, 1, 
Bö¨y
, 3, "EOC" },

678 { 0, 1, 
Bö¨y
, 3, "AWD" },

680 c⁄° 
bdesc
 
adc_¸1
[] = {

681 { 31, 8, 
Bö¨y
, 8, "res" },

682 { 23, 1, 
Bö¨y
, 5, "AWDEN" },

683 { 22, 1, 
Bö¨y
, 6, "JAWDEN" },

684 { 21, 2, 
Bö¨y
, 3, "res" },

685 { 19, 4, 
Bö¨y
, 7, "DUALMOD" },

686 { 15, 3, 
Bö¨y
, 7, "DISCNUM" },

687 { 12, 1, 
Bö¨y
, 7, "JDISCEN" },

688 { 11, 1, 
Bö¨y
, 6, "DISCEN" },

689 { 10, 1, 
Bö¨y
, 5, "JAUTO" },

690 { 9, 1, 
Bö¨y
, 6, "AWDSGL" },

691 { 8, 1, 
Bö¨y
, 4, "SCAN" },

692 { 7, 1, 
Bö¨y
, 6, "JEOCIE" },

693 { 6, 1, 
Bö¨y
, 5, "AWDIE" },

694 { 5, 1, 
Bö¨y
, 5, "EOCIE" },

695 { 4, 5, 
DecimÆ
, 5, "AWDCH" },

697 c⁄° 
bdesc
 
adc_¸2
[] = {

698 { 31, 8, 
Bö¨y
, 8, "res" },

699 { 23, 1, 
Bö¨y
, 7, "TSVREFE" },

700 { 22, 1, 
Bö¨y
, 7, "SWSTART" },

701 { 21, 1, 
Bö¨y
, 8, "JSWSTART" },

702 { 20, 1, 
Bö¨y
, 7, "EXTTRIG" },

703 { 19, 1, 
Bö¨y
, 6, "EXTSEL" },

704 { 16, 1, 
Bö¨y
, 3, "res" },

705 { 15, 1, 
Bö¨y
, 8, "JEXTTRIG" },

706 { 14, 3, 
Bö¨y
, 7, "JEXTSEL" },

707 { 11, 1, 
Bö¨y
, 5, "ALIGN" },

708 { 10, 2, 
Bö¨y
, 3, "res" },

709 { 8, 1, 
Bö¨y
, 3, "DMA" },

710 { 7, 4, 
Bö¨y
, 4, "res" },

711 { 3, 1, 
Bö¨y
, 6, "RSTCAL" },

712 { 2, 1, 
Bö¨y
, 3, "CAL" },

713 { 1, 1, 
Bö¨y
, 4, "CONT" },

714 { 0, 1, 
Bö¨y
, 4, "ADON" },

716 c⁄° 
bdesc
 
adc_sm¥1
[] = {

717 { 31, 8, 
Bö¨y
, 8, "res" },

718 { 23, 3, 
Bö¨y
, 5, "SMP17" },

719 { 20, 3, 
Bö¨y
, 5, "SMP16" },

720 { 17, 3, 
Bö¨y
, 5, "SMP15" },

721 { 14, 3, 
Bö¨y
, 5, "SMP14" },

722 { 11, 3, 
Bö¨y
, 5, "SMP13" },

723 { 8, 3, 
Bö¨y
, 5, "SMP12" },

724 { 5, 3, 
Bö¨y
, 5, "SMP11" },

725 { 2, 3, 
Bö¨y
, 5, "SMP10" },

727 c⁄° 
bdesc
 
adc_sm¥2
[] = {

728 { 31, 2, 
Bö¨y
, 3, "res" },

729 { 29, 3, 
Bö¨y
, 4, "SMP9" },

730 { 26, 3, 
Bö¨y
, 4, "SMP8" },

731 { 23, 3, 
Bö¨y
, 4, "SMP7" },

732 { 20, 3, 
Bö¨y
, 4, "SMP6" },

733 { 17, 3, 
Bö¨y
, 4, "SMP5" },

734 { 14, 3, 
Bö¨y
, 4, "SMP4" },

735 { 11, 3, 
Bö¨y
, 4, "SMP3" },

736 { 8, 3, 
Bö¨y
, 4, "SMP2" },

737 { 5, 3, 
Bö¨y
, 4, "SMP1" },

738 { 2, 3, 
Bö¨y
, 4, "SMP0" },

740 c⁄° 
bdesc
 
adc_jo‰x
[] = {

741 { 31, 16, 
Bö¨y
, 16, "res" },

742 { 15, 4, 
Bö¨y
, 4, "res" },

743 { 11, 12, 
DecimÆ
,12, "JOFFSETx" }

745 c⁄° 
bdesc
 
adc_hå
[] = {

746 { 31, 16, 
Bö¨y
, 16, "res" },

747 { 15, 4, 
Bö¨y
, 4, "res" },

748 { 11, 12, 
DecimÆ
,12, "HT" }

750 c⁄° 
bdesc
 
adc_…r
[] = {

751 { 31, 16, 
Bö¨y
, 16, "res" },

752 { 15, 4, 
Bö¨y
, 4, "res" },

753 { 11, 12, 
DecimÆ
,12, "HT" }

755 c⁄° 
bdesc
 
adc_sqr1
[] = {

756 { 31, 8, 
Bö¨y
, 8, "res" },

757 { 23, 4, 
DecimÆ
, 2, "L" },

758 { 19, 5, 
DecimÆ
, 5, "SQ16" },

759 { 14, 5, 
DecimÆ
, 5, "SQ15" },

760 { 9, 5, 
DecimÆ
, 5, "SQ14" },

761 { 4, 5, 
DecimÆ
, 5, "SQ13" },

763 c⁄° 
bdesc
 
adc_sqr2
[] = {

764 { 31, 2, 
Bö¨y
, 3, "res" },

765 { 29, 5, 
DecimÆ
, 5, "SQ12" },

766 { 24, 5, 
DecimÆ
, 5, "SQ11" },

767 { 19, 5, 
DecimÆ
, 5, "SQ10" },

768 { 14, 5, 
DecimÆ
, 5, "SQ9" },

769 { 9, 5, 
DecimÆ
, 5, "SQ8" },

770 { 4, 5, 
DecimÆ
, 5, "SQ7" },

772 c⁄° 
bdesc
 
adc_sqr3
[] = {

773 { 31, 2, 
Bö¨y
, 3, "res" },

774 { 29, 5, 
DecimÆ
, 5, "SQ6" },

775 { 24, 5, 
DecimÆ
, 5, "SQ5" },

776 { 19, 5, 
DecimÆ
, 5, "SQ4" },

777 { 14, 5, 
DecimÆ
, 5, "SQ3" },

778 { 9, 5, 
DecimÆ
, 5, "SQ2" },

779 { 4, 5, 
DecimÆ
, 5, "SQ1" },

781 c⁄° 
bdesc
 
adc_jsqr
[] = {

782 { 31, 10, 
Bö¨y
, 10, "res" },

783 { 21, 2, 
Bö¨y
, 2, "JL" },

784 { 19, 5, 
Bö¨y
, 5, "JSQ4" },

785 { 14, 5, 
Bö¨y
, 5, "JSQ3" },

786 { 9, 5, 
Bö¨y
, 5, "JSQ2" },

787 { 4, 5, 
Bö¨y
, 5, "JSQ1" },

789 c⁄° 
bdesc
 
adc_jdrx
[] = {

790 { 31, 16, 
Bö¨y
, 16, "res" },

791 { 15, 16, 
Hex
, 5, "JDATA" },

793 c⁄° 
bdesc
 
adc_dr
[] = {

794 { 31, 16, 
Hex
, 8, "ADC2DATA" },

795 { 15, 16, 
Hex
, 5, "DATA" },

797 c⁄° 
uöt32_t
 
addrs
[] = { 
ADC1
, 
ADC2
 };

798 
dev
 = 
	`which_devi˚
(1,2);

799 c⁄° 
uöt32_t
 
a
 = 
addrs
[
dev
-1];

801 i‡–
dev
 < 0 )

804 
	`dump_ªg
(&
	`ADC_SR
(
a
),"ADC",
dev
,"SR",
adc_§
,7);

805 
	`dump_ªg
(&
	`ADC_CR1
(
a
),"ADC",
dev
,"CR1",
adc_¸1
,15);

806 
	`dump_ªg
(&
	`ADC_CR2
(
a
),"ADC",
dev
,"CR2",
adc_¸2
,17);

807 
	`dump_ªg
(&
	`ADC_SMPR1
(
a
),"ADC",
dev
,"SMPR1",
adc_sm¥1
,9);

808 
	`dump_ªg
(&
	`ADC_SMPR2
(
a
),"ADC",
dev
,"SMPR2",
adc_sm¥2
,11);

809 
	`dump_ªg
(&
	`ADC_JOFR1
(
a
),"ADC",
dev
,"JOFR1",
adc_jo‰x
,3);

810 
	`dump_ªg
(&
	`ADC_JOFR2
(
a
),"ADC",
dev
,"JOFR2",
adc_jo‰x
,3);

811 
	`dump_ªg
(&
	`ADC_JOFR3
(
a
),"ADC",
dev
,"JOFR3",
adc_jo‰x
,3);

812 
	`dump_ªg
(&
	`ADC_JOFR4
(
a
),"ADC",
dev
,"JOFR4",
adc_jo‰x
,3);

813 
	`dump_ªg
(&
	`ADC_HTR
(
a
),"ADC",
dev
,"HTR",
adc_hå
,3);

814 
	`dump_ªg
(&
	`ADC_LTR
(
a
),"ADC",
dev
,"LTR",
adc_…r
,3);

815 
	`dump_ªg
(&
	`ADC_SQR1
(
a
),"ADC",
dev
,"SQR1",
adc_sqr1
,6);

816 
	`dump_ªg
(&
	`ADC_SQR2
(
a
),"ADC",
dev
,"SQR2",
adc_sqr2
,7);

817 
	`dump_ªg
(&
	`ADC_SQR3
(
a
),"ADC",
dev
,"SQR3",
adc_sqr3
,7);

818 
	`dump_ªg
(&
	`ADC_JSQR
(
a
),"ADC",
dev
,"JSQR",
adc_jsqr
,6);

819 
	`dump_ªg
(&
	`ADC_JDR1
(
a
),"ADC",
dev
,"JDR1",
adc_jdrx
,2);

820 
	`dump_ªg
(&
	`ADC_JDR2
(
a
),"ADC",
dev
,"JDR2",
adc_jdrx
,2);

821 
	`dump_ªg
(&
	`ADC_JDR3
(
a
),"ADC",
dev
,"JDR3",
adc_jdrx
,2);

822 
	`dump_ªg
(&
	`ADC_JDR4
(
a
),"ADC",
dev
,"JDR4",
adc_jdrx
,2);

823 
	`dump_ªg
(&
	`ADC_DR
(
a
),"ADC",
dev
,"DR",
adc_dr
,2);

824 
	}
}

827 
	$dump_timî1
() {

828 c⁄° 
bdesc
 
timx_¸1
[] = {

829 { 31, 22, 
Bö¨y
, 22, "res" },

830 { 9, 2, 
Bö¨y
, 3, "CKD" },

831 { 7, 1, 
Bö¨y
, 4, "ARPE" },

832 { 6, 2, 
Bö¨y
, 3, "CMS" },

833 { 4, 1, 
Bö¨y
, 3, "DIR" },

834 { 3, 1, 
Bö¨y
, 3, "OPM" },

835 { 2, 1, 
Bö¨y
, 3, "URS" },

836 { 1, 1, 
Bö¨y
, 3, "CEN" },

838 c⁄° 
bdesc
 
timx_¸2
[] = {

839 { 31, 17, 
Bö¨y
, 17, "res" },

840 { 14, 1, 
Bö¨y
, 4, "OIS4" },

841 { 13, 1, 
Bö¨y
, 5, "OIS3N" },

842 { 12, 1, 
Bö¨y
, 4, "OIS3" },

843 { 11, 1, 
Bö¨y
, 5, "OIS2N" },

844 { 10, 1, 
Bö¨y
, 4, "OIS2" },

845 { 9, 1, 
Bö¨y
, 5, "OIS1N" },

846 { 8, 1, 
Bö¨y
, 4, "OIS1" },

847 { 7, 1, 
Bö¨y
, 4, "TIS1" },

848 { 6, 3, 
Bö¨y
, 3, "MMS" },

849 { 3, 1, 
Bö¨y
, 4, "CCDS" },

850 { 2, 1, 
Bö¨y
, 4, "CCUS" },

851 { 1, 1, 
Bö¨y
, 3, "res" },

852 { 0, 1, 
Bö¨y
, 4, "CCPC" },

854 c⁄° 
bdesc
 
timx_sm¸
[] = {

855 { 31, 16, 
Bö¨y
, 16, "res" },

856 { 15, 1, 
Bö¨y
, 3, "ETP" },

857 { 14, 1, 
Bö¨y
, 3, "ECE" },

858 { 13, 2, 
Bö¨y
, 4, "ETPS" },

859 { 11, 4, 
Bö¨y
, 4, "ETF" },

860 { 7, 1, 
Bö¨y
, 3, "MSM" },

861 { 6, 3, 
Bö¨y
, 3, "TS" },

862 { 3, 1, 
Bö¨y
, 3, "res" },

863 { 3, 1, 
Bö¨y
, 3, "SMS" },

865 c⁄° 
bdesc
 
timx_dõr
[] = {

866 { 31, 17, 
Bö¨y
, 17, "res" },

867 { 14, 1, 
Bö¨y
, 3, "TDE" },

868 { 13, 1, 
Bö¨y
, 5, "COMDE" },

869 { 12, 1, 
Bö¨y
, 5, "CC4DE" },

870 { 11, 1, 
Bö¨y
, 5, "CC3DE" },

871 { 10, 1, 
Bö¨y
, 5, "CC2DE" },

872 { 9, 1, 
Bö¨y
, 5, "CC1DE" },

873 { 8, 1, 
Bö¨y
, 3, "UDE" },

874 { 7, 1, 
Bö¨y
, 3, "BIE" },

875 { 6, 1, 
Bö¨y
, 3, "TIE" },

876 { 5, 1, 
Bö¨y
, 5, "COMIE" },

877 { 4, 1, 
Bö¨y
, 5, "CC4IE" },

878 { 3, 1, 
Bö¨y
, 5, "CC3IE" },

879 { 2, 1, 
Bö¨y
, 5, "CC2IE" },

880 { 1, 1, 
Bö¨y
, 5, "CC1IE" },

881 { 0, 1, 
Bö¨y
, 3, "UIE" },

883 c⁄° 
bdesc
 
timx_§
[] = {

884 { 31, 19, 
Bö¨y
, 19, "res" },

885 { 12, 1, 
Bö¨y
, 5, "CC4OF" },

886 { 11, 1, 
Bö¨y
, 5, "CC3OF" },

887 { 10, 1, 
Bö¨y
, 5, "CC2OF" },

888 { 9, 1, 
Bö¨y
, 5, "CC1OF" },

889 { 8, 1, 
Bö¨y
, 3, "res" },

890 { 7, 1, 
Bö¨y
, 3, "BIF" },

891 { 6, 1, 
Bö¨y
, 3, "TIF" },

892 { 5, 1, 
Bö¨y
, 5, "COMIF" },

893 { 4, 1, 
Bö¨y
, 5, "CC4IF" },

894 { 3, 1, 
Bö¨y
, 5, "CC3IF" },

895 { 2, 1, 
Bö¨y
, 5, "CC2IF" },

896 { 1, 1, 
Bö¨y
, 5, "CC1IF" },

897 { 0, 1, 
Bö¨y
, 3, "UIF" },

899 c⁄° 
bdesc
 
timx_ccmr1a
[] = {

900 { 31, 16, 
Bö¨y
, 16, "res" },

901 { 15, 1, 
Bö¨y
, 5, "OC2CE" },

902 { 14, 3, 
Bö¨y
, 4, "OC2M" },

903 { 11, 1, 
Bö¨y
, 5, "OC2PE" },

904 { 10, 1, 
Bö¨y
, 5, "OC2FE" },

905 { 9, 2, 
Bö¨y
, 4, "CC2S" },

906 { 7, 1, 
Bö¨y
, 5, "OC1CE" },

907 { 6, 3, 
Bö¨y
, 4, "OC1M" },

908 { 3, 1, 
Bö¨y
, 5, "OC1PE" },

909 { 2, 1, 
Bö¨y
, 5, "OC1FE" },

910 { 1, 2, 
Bö¨y
, 5, "CC1S" },

912 c⁄° 
bdesc
 
timx_ccmr1b
[] = {

913 { 31, 16, 
Bö¨y
, 16, "res" },

914 { 15, 4, 
Bö¨y
, 4, "IC2F" },

915 { 11, 2, 
Bö¨y
, 6, "IC2PSC" },

916 { 9, 2, 
Bö¨y
, 4, "CC2S" },

917 { 7, 4, 
Bö¨y
, 4, "IC1F" },

918 { 3, 2, 
Bö¨y
, 6, "IC1PSC" },

919 { 1, 2, 
Bö¨y
, 4, "CC1S" },

921 c⁄° 
bdesc
 
timx_ccmr2a
[] = {

922 { 31, 16, 
Bö¨y
, 16, "res" },

923 { 15, 1, 
Bö¨y
, 5, "OC4E" },

924 { 14, 3, 
Bö¨y
, 4, "OC4M" },

925 { 11, 1, 
Bö¨y
, 5, "OC4PE" },

926 { 10, 1, 
Bö¨y
, 5, "OC4FE" },

927 { 9, 2, 
Bö¨y
, 4, "CC4S" },

928 { 7, 1, 
Bö¨y
, 5, "OC3CE" },

929 { 6, 3, 
Bö¨y
, 4, "OC3M" },

930 { 3, 1, 
Bö¨y
, 5, "OC3PE" },

931 { 2, 1, 
Bö¨y
, 5, "OC3FE" },

932 { 1, 2, 
Bö¨y
, 5, "CC3S" },

934 c⁄° 
bdesc
 
timx_ccmr2b
[] = {

935 { 31, 16, 
Bö¨y
, 16, "res" },

936 { 15, 4, 
Bö¨y
, 4, "IC4F" },

937 { 11, 2, 
Bö¨y
, 6, "IC4PSC" },

938 { 9, 2, 
Bö¨y
, 4, "CC4S" },

939 { 7, 4, 
Bö¨y
, 4, "IC3F" },

940 { 3, 2, 
Bö¨y
, 6, "IC3PSC" },

941 { 1, 2, 
Bö¨y
, 4, "CC3S" },

943 c⁄° 
bdesc
 
timx_c˚r
[] = {

944 { 31, 18, 
Bö¨y
, 18, "res" },

945 { 13, 1, 
Bö¨y
, 4, "CC4P" },

946 { 12, 1, 
Bö¨y
, 4, "CC4E" },

947 { 11, 1, 
Bö¨y
, 5, "CC4NP" },

948 { 10, 1, 
Bö¨y
, 5, "CC4NE" },

949 { 9, 1, 
Bö¨y
, 4, "CC3P" },

950 { 8, 1, 
Bö¨y
, 4, "CC3E" },

951 { 7, 1, 
Bö¨y
, 5, "CC3NP" },

952 { 6, 1, 
Bö¨y
, 5, "CC3NE" },

953 { 5, 1, 
Bö¨y
, 4, "CC2P" },

954 { 4, 1, 
Bö¨y
, 4, "CC2E" },

955 { 3, 1, 
Bö¨y
, 5, "CC2NP" },

956 { 2, 1, 
Bö¨y
, 5, "CC2NE" },

957 { 1, 1, 
Bö¨y
, 4, "CC1P" },

958 { 0, 1, 
Bö¨y
, 4, "CC1E" },

960 c⁄° 
bdesc
 
timx_˙t
[] = {

961 { 31, 16, 
Bö¨y
, 16, "res" },

962 { 15, 16, 
Hex
, 9, "CNT" }

964 c⁄° 
bdesc
 
timx_psc
[] = {

965 { 31, 16, 
Bö¨y
, 16, "res" },

966 { 15, 16, 
Hex
, 9, "PSC" }

968 c⁄° 
bdesc
 
timx_¨r
[] = {

969 { 31, 16, 
Bö¨y
, 16, "res" },

970 { 15, 16, 
Hex
, 9, "ARR" }

972 c⁄° 
bdesc
 
timx_r¸
[] = {

973 { 31, 24, 
Bö¨y
, 24, "res" },

974 { 7, 8, 
Hex
, 3, "REP" }

976 c⁄° 
bdesc
 
timx_c¸1
[] = {

977 { 31, 16, 
Bö¨y
, 16, "res" },

978 { 15, 16, 
Hex
, 5, "CCR1" }

980 c⁄° 
bdesc
 
timx_c¸2
[] = {

981 { 31, 16, 
Bö¨y
, 16, "res" },

982 { 15, 16, 
Hex
, 5, "CCR2" }

984 c⁄° 
bdesc
 
timx_c¸3
[] = {

985 { 31, 16, 
Bö¨y
, 16, "res" },

986 { 15, 16, 
Hex
, 5, "CCR3" }

988 c⁄° 
bdesc
 
timx_c¸4
[] = {

989 { 31, 16, 
Bö¨y
, 16, "res" },

990 { 15, 16, 
Hex
, 5, "CCR4" }

992 c⁄° 
bdesc
 
timx_bdå
[] = {

993 { 31, 16, 
Bö¨y
, 16, "res" },

994 { 15, 1, 
Bö¨y
, 3, "MOE" },

995 { 14, 1, 
Bö¨y
, 3, "AOE" },

996 { 13, 1, 
Bö¨y
, 3, "BKP" },

997 { 12, 1, 
Bö¨y
, 3, "BKE" },

998 { 11, 1, 
Bö¨y
, 4, "OSSR" },

999 { 10, 1, 
Bö¨y
, 4, "OSSI" },

1000 { 9, 2, 
Bö¨y
, 4, "LOCK" },

1001 { 7, 8, 
Bö¨y
, 8, "DTG" },

1003 c⁄° 
bdesc
 
timx_d¸
[] = {

1004 { 31, 19, 
Bö¨y
, 19, "res" },

1005 { 12, 5, 
DecimÆ
, 3, "DBL" },

1006 { 7, 3, 
Bö¨y
, 3, "res" },

1007 { 5, 5, 
Bö¨y
, 5, "DBA" },

1009 c⁄° 
bdesc
 
timx_dm¨
[] = {

1010 { 31, 16, 
Bö¨y
, 16, "res" },

1011 { 15, 16, 
Hex
, 9, "DMAR" }

1014 
	`dump_ªg
(&
TIM1_CR1
,"TIM",1,"CR1",
timx_¸1
,8);

1015 
	`dump_ªg
(&
TIM1_CR2
,"TIM",1,"CR2",
timx_¸2
,14);

1016 
	`dump_ªg
(&
TIM1_SMCR
,"TIM",1,"SMCR",
timx_sm¸
,14);

1017 
	`dump_ªg
(&
TIM1_DIER
,"TIM",1,"DIER",
timx_dõr
,16);

1018 
	`dump_ªg
(&
TIM1_SR
,"TIM",1,"SR",
timx_§
,14);

1019 
	`dump_ªg
(&
TIM1_CCMR1
,"TIM",1,"CCMR1 (out)",
timx_ccmr1a
,11);

1020 
	`dump_ªg
(&
TIM1_CCMR1
,"TIM",1,"CCMR1 (öp)",
timx_ccmr1b
,7);

1021 
	`dump_ªg
(&
TIM1_CCMR2
,"TIM",1,"CCMR2 (out)",
timx_ccmr2a
,11);

1022 
	`dump_ªg
(&
TIM1_CCMR2
,"TIM",1,"CCMR2 (öp)",
timx_ccmr2b
,7);

1023 
	`dump_ªg
(&
TIM1_CCER
,"TIM",1,"CCER",
timx_c˚r
,15);

1024 
	`dump_ªg
(&
TIM1_CNT
,"TIM",1,"CNT",
timx_˙t
,2);

1025 
	`dump_ªg
(&
TIM1_PSC
,"TIM",1,"PSC",
timx_psc
,2);

1026 
	`dump_ªg
(&
TIM1_ARR
,"TIM",1,"ARR",
timx_¨r
,2);

1027 
	`dump_ªg
(&
TIM1_RCR
,"TIM",1,"RCR",
timx_r¸
,2);

1028 
	`dump_ªg
(&
TIM1_CCR1
,"TIM",1,"CCR1",
timx_c¸1
,2);

1029 
	`dump_ªg
(&
TIM1_CCR2
,"TIM",1,"CCR2",
timx_c¸2
,2);

1030 
	`dump_ªg
(&
TIM1_CCR3
,"TIM",1,"CCR3",
timx_c¸3
,2);

1031 
	`dump_ªg
(&
TIM1_CCR4
,"TIM",1,"CCR4",
timx_c¸4
,2);

1032 
	`dump_ªg
(&
TIM1_BDTR
,"TIM",1,"BDTR",
timx_bdå
,9);

1033 
	`dump_ªg
(&
TIM1_DCR
,"TIM",1,"DCR",
timx_d¸
,9);

1034 
	`dump_ªg
(&
TIM1_DMAR
,"TIM",1,"DMAR",
timx_dm¨
,2);

1035 
	}
}

1038 
	$dump_timîs24
(
dev
) {

1039 c⁄° 
bdesc
 
timx_¸1
[] = {

1040 { 31, 22, 
Bö¨y
, 22, "res" },

1041 { 9, 2, 
Bö¨y
, 3, "CKD" },

1042 { 7, 1, 
Bö¨y
, 4, "ARPE" },

1043 { 6, 2, 
Bö¨y
, 3, "CMS" },

1044 { 4, 1, 
Bö¨y
, 3, "DIR" },

1045 { 3, 1, 
Bö¨y
, 3, "OPM" },

1046 { 2, 1, 
Bö¨y
, 3, "URS" },

1047 { 1, 1, 
Bö¨y
, 4, "UDIS" },

1048 { 0, 1, 
Bö¨y
, 3, "CEN" },

1050 c⁄° 
bdesc
 
timx_¸2
[] = {

1051 { 31, 24, 
Bö¨y
, 24, "res" },

1052 { 7, 1, 
Bö¨y
, 4, "TIS1" },

1053 { 6, 3, 
Bö¨y
, 3, "MMS" },

1054 { 3, 1, 
Bö¨y
, 4, "CCDS" },

1055 { 2, 3, 
Bö¨y
, 3, "res" },

1057 c⁄° 
bdesc
 
timx_sm¸
[] = {

1058 { 31, 16, 
Bö¨y
, 16, "res" },

1059 { 15, 1, 
Bö¨y
, 4, "ETP" },

1060 { 14, 1, 
Bö¨y
, 3, "ECE" },

1061 { 13, 2, 
Bö¨y
, 4, "ETPS" },

1062 { 11, 4, 
Bö¨y
, 4, "ETF" },

1063 { 7, 1, 
Bö¨y
, 3, "MSM" },

1064 { 6, 3, 
Bö¨y
, 3, "TS" },

1065 { 3, 1, 
Bö¨y
, 3, "res" },

1066 { 2, 3, 
Bö¨y
, 3, "SMS" },

1068 c⁄° 
bdesc
 
timx_dõr
[] = {

1069 { 31, 17, 
Bö¨y
, 17, "res" },

1070 { 14, 1, 
Bö¨y
, 3, "TDE" },

1071 { 13, 1, 
Bö¨y
, 3, "res" },

1072 { 12, 1, 
Bö¨y
, 5, "CC4DE" },

1073 { 11, 1, 
Bö¨y
, 5, "CC3DE" },

1074 { 10, 1, 
Bö¨y
, 5, "CC2DE" },

1075 { 9, 1, 
Bö¨y
, 5, "CC1DE" },

1076 { 8, 1, 
Bö¨y
, 3, "UDE" },

1077 { 7, 1, 
Bö¨y
, 3, "res" },

1078 { 6, 1, 
Bö¨y
, 3, "TIE" },

1079 { 5, 1, 
Bö¨y
, 3, "res" },

1080 { 4, 1, 
Bö¨y
, 5, "CC4IE" },

1081 { 3, 1, 
Bö¨y
, 5, "CC3IE" },

1082 { 2, 1, 
Bö¨y
, 5, "CC2IE" },

1083 { 1, 1, 
Bö¨y
, 5, "CC1IE" },

1084 { 0, 1, 
Bö¨y
, 3, "UIE" },

1086 c⁄° 
bdesc
 
timx_§
[] = {

1087 { 31, 19, 
Bö¨y
, 19, "res" },

1088 { 12, 1, 
Bö¨y
, 5, "CC4OF" },

1089 { 11, 1, 
Bö¨y
, 5, "CC3OF" },

1090 { 10, 1, 
Bö¨y
, 5, "CC2OF" },

1091 { 9, 1, 
Bö¨y
, 5, "CC1OF" },

1092 { 8, 2, 
Bö¨y
, 3, "res" },

1093 { 6, 1, 
Bö¨y
, 3, "TIF" },

1094 { 5, 1, 
Bö¨y
, 3, "res" },

1095 { 4, 1, 
Bö¨y
, 5, "CC4IF" },

1096 { 3, 1, 
Bö¨y
, 5, "CC3IF" },

1097 { 2, 1, 
Bö¨y
, 5, "CC2IF" },

1098 { 1, 1, 
Bö¨y
, 5, "CC1IF" },

1099 { 0, 1, 
Bö¨y
, 3, "UIF" },

1101 c⁄° 
bdesc
 
timx_ccmr1a
[] = {

1102 { 31, 16, 
Bö¨y
, 16, "res" },

1103 { 15, 1, 
Bö¨y
, 5, "OC2CE" },

1104 { 14, 3, 
Bö¨y
, 4, "OC2M" },

1105 { 11, 1, 
Bö¨y
, 5, "OC2PE" },

1106 { 10, 1, 
Bö¨y
, 5, "OC2FE" },

1107 { 9, 2, 
Bö¨y
, 4, "CC2S" },

1108 { 7, 1, 
Bö¨y
, 5, "OC1CE" },

1109 { 6, 3, 
Bö¨y
, 4, "OC1M" },

1110 { 3, 1, 
Bö¨y
, 5, "OC1PE" },

1111 { 2, 1, 
Bö¨y
, 5, "OC1FE" },

1112 { 1, 2, 
Bö¨y
, 5, "CC1S" },

1114 c⁄° 
bdesc
 
timx_ccmr1b
[] = {

1115 { 31, 16, 
Bö¨y
, 16, "res" },

1116 { 15, 4, 
Bö¨y
, 4, "IC2F" },

1117 { 11, 2, 
Bö¨y
, 6, "IC2PSC" },

1118 { 9, 2, 
Bö¨y
, 4, "CC2S" },

1119 { 7, 4, 
Bö¨y
, 4, "IC1F" },

1120 { 3, 2, 
Bö¨y
, 6, "IC1PSC" },

1121 { 1, 2, 
Bö¨y
, 4, "CC1S" },

1123 c⁄° 
bdesc
 
timx_ccmr2a
[] = {

1124 { 31, 16, 
Bö¨y
, 16, "res" },

1125 { 15, 1, 
Bö¨y
, 5, "OC4E" },

1126 { 14, 3, 
Bö¨y
, 4, "OC4M" },

1127 { 11, 1, 
Bö¨y
, 5, "OC4PE" },

1128 { 10, 1, 
Bö¨y
, 5, "OC4FE" },

1129 { 9, 2, 
Bö¨y
, 4, "CC4S" },

1130 { 7, 1, 
Bö¨y
, 5, "OC3CE" },

1131 { 6, 3, 
Bö¨y
, 4, "OC3M" },

1132 { 3, 1, 
Bö¨y
, 5, "OC3PE" },

1133 { 2, 1, 
Bö¨y
, 5, "OC3FE" },

1134 { 1, 2, 
Bö¨y
, 5, "CC3S" },

1136 c⁄° 
bdesc
 
timx_ccmr2b
[] = {

1137 { 31, 16, 
Bö¨y
, 16, "res" },

1138 { 15, 4, 
Bö¨y
, 4, "IC4F" },

1139 { 11, 2, 
Bö¨y
, 6, "IC4PSC" },

1140 { 9, 2, 
Bö¨y
, 4, "CC4S" },

1141 { 7, 4, 
Bö¨y
, 4, "IC3F" },

1142 { 3, 2, 
Bö¨y
, 6, "IC3PSC" },

1143 { 1, 2, 
Bö¨y
, 4, "CC3S" },

1145 c⁄° 
bdesc
 
timx_c˚r
[] = {

1146 { 31, 18, 
Bö¨y
, 18, "res" },

1147 { 13, 1, 
Bö¨y
, 4, "CC4P" },

1148 { 12, 1, 
Bö¨y
, 4, "CC4E" },

1149 { 11, 2, 
Bö¨y
, 3, "res" },

1150 { 9, 1, 
Bö¨y
, 4, "CC3P" },

1151 { 8, 1, 
Bö¨y
, 4, "CC3E" },

1152 { 7, 1, 
Bö¨y
, 5, "CC3NP" },

1153 { 6, 1, 
Bö¨y
, 5, "CC3NE" },

1154 { 5, 1, 
Bö¨y
, 4, "CC2P" },

1155 { 4, 1, 
Bö¨y
, 4, "CC2E" },

1156 { 3, 2, 
Bö¨y
, 3, "res" },

1157 { 1, 1, 
Bö¨y
, 4, "CC1P" },

1158 { 0, 1, 
Bö¨y
, 4, "CC1E" },

1160 c⁄° 
bdesc
 
timx_˙t
[] = {

1161 { 31, 16, 
Bö¨y
, 16, "res" },

1162 { 15, 16, 
Hex
, 9, "CNT" }

1164 c⁄° 
bdesc
 
timx_psc
[] = {

1165 { 31, 16, 
Bö¨y
, 16, "res" },

1166 { 15, 16, 
Hex
, 9, "PSC" }

1168 c⁄° 
bdesc
 
timx_¨r
[] = {

1169 { 31, 16, 
Bö¨y
, 16, "res" },

1170 { 15, 16, 
Hex
, 9, "ARR" }

1172 c⁄° 
bdesc
 
timx_c¸1
[] = {

1173 { 31, 16, 
Bö¨y
, 16, "res" },

1174 { 15, 16, 
Hex
, 5, "CCR1" }

1176 c⁄° 
bdesc
 
timx_c¸2
[] = {

1177 { 31, 16, 
Bö¨y
, 16, "res" },

1178 { 15, 16, 
Hex
, 5, "CCR2" }

1180 c⁄° 
bdesc
 
timx_c¸3
[] = {

1181 { 31, 16, 
Bö¨y
, 16, "res" },

1182 { 15, 16, 
Hex
, 5, "CCR3" }

1184 c⁄° 
bdesc
 
timx_c¸4
[] = {

1185 { 31, 16, 
Bö¨y
, 16, "res" },

1186 { 15, 16, 
Hex
, 5, "CCR4" }

1188 c⁄° 
bdesc
 
timx_d¸
[] = {

1189 { 31, 19, 
Bö¨y
, 19, "res" },

1190 { 12, 5, 
DecimÆ
, 3, "DBL" },

1191 { 7, 3, 
Bö¨y
, 3, "res" },

1192 { 5, 5, 
Bö¨y
, 5, "DBA" },

1194 c⁄° 
bdesc
 
timx_dm¨
[] = {

1195 { 31, 16, 
Bö¨y
, 16, "res" },

1196 { 15, 16, 
Hex
, 9, "DMAR" }

1198 c⁄° 
uöt32_t
 
addrs
[] = { 
TIM2
, 
TIM3
, 
TIM4
 };

1199 c⁄° 
uöt32_t
 
a
 = 
addrs
[
dev
-2];

1201 
	`dump_ªg
(&
	`TIM_CR1
(
a
),"TIM",
dev
,"CR1",
timx_¸1
,9);

1202 
	`dump_ªg
(&
	`TIM_CR2
(
a
),"TIM",
dev
,"CR2",
timx_¸2
,5);

1203 
	`dump_ªg
(&
	`TIM_SMCR
(
a
),"TIM",
dev
,"SMCR",
timx_sm¸
,9);

1204 
	`dump_ªg
(&
	`TIM_DIER
(
a
),"TIM",
dev
,"DIER",
timx_dõr
,16);

1205 
	`dump_ªg
(&
	`TIM_SR
(
a
),"TIM",
dev
,"SR",
timx_§
,13);

1206 
	`dump_ªg
(&
	`TIM_CCMR1
(
a
),"TIM",
dev
,"CCMR1 (out)",
timx_ccmr1a
,11);

1207 
	`dump_ªg
(&
	`TIM_CCMR1
(
a
),"TIM",
dev
,"CCMR1 (öp)",
timx_ccmr1b
,7);

1208 
	`dump_ªg
(&
	`TIM_CCMR2
(
a
),"TIM",
dev
,"CCMR2 (out)",
timx_ccmr2a
,11);

1209 
	`dump_ªg
(&
	`TIM_CCMR2
(
a
),"TIM",
dev
,"CCMR2 (öp)",
timx_ccmr2b
,7);

1210 
	`dump_ªg
(&
	`TIM_CCER
(
a
),"TIM",
dev
,"CCER",
timx_c˚r
,13);

1211 
	`dump_ªg
(&
	`TIM_CNT
(
a
),"TIM",
dev
,"CNT",
timx_˙t
,2);

1212 
	`dump_ªg
(&
	`TIM_PSC
(
a
),"TIM",
dev
,"PSC",
timx_psc
,2);

1213 
	`dump_ªg
(&
	`TIM_ARR
(
a
),"TIM",
dev
,"ARR",
timx_¨r
,2);

1214 
	`dump_ªg
(&
	`TIM_CCR1
(
a
),"TIM",
dev
,"CCR1",
timx_c¸1
,2);

1215 
	`dump_ªg
(&
	`TIM_CCR2
(
a
),"TIM",
dev
,"CCR2",
timx_c¸2
,2);

1216 
	`dump_ªg
(&
	`TIM_CCR3
(
a
),"TIM",
dev
,"CCR3",
timx_c¸3
,2);

1217 
	`dump_ªg
(&
	`TIM_CCR4
(
a
),"TIM",
dev
,"CCR4",
timx_c¸4
,2);

1218 
	`dump_ªg
(&
	`TIM_DCR
(
a
),"TIM",
dev
,"DCR",
timx_d¸
,9);

1219 
	`dump_ªg
(&
	`TIM_DMAR
(
a
),"TIM",
dev
,"DMAR",
timx_dm¨
,2);

1220 
	}
}

1223 
	$dump_backup
() {

1224 c⁄° 
bdesc
 
bkp_πc¸
[] = {

1225 { 31, 22, 
Bö¨y
, 22, "res" },

1226 { 9, 1, 
Bö¨y
, 4, "ASOS" },

1227 { 8, 1, 
Bö¨y
, 4, "ASOE" },

1228 { 7, 1, 
Bö¨y
, 3, "CCO" },

1229 { 6, 7, 
Bö¨y
, 7, "CAL" },

1231 c⁄° 
bdesc
 
bkp_¸
[] = {

1232 { 31, 30, 
Bö¨y
, 30, "res" },

1233 { 1, 1, 
Bö¨y
, 4, "TPAL" },

1234 { 0, 1, 
Bö¨y
, 3, "TPE" },

1236 c⁄° 
bdesc
 
bkp_c§
[] = {

1237 { 31, 21, 
Bö¨y
, 21, "res" },

1238 { 9, 1, 
Bö¨y
, 3, "TIF" },

1239 { 8, 1, 
Bö¨y
, 3, "TEF" },

1240 { 7, 5, 
Bö¨y
, 5, "res" },

1241 { 2, 1, 
Bö¨y
, 4, "TPIE" },

1242 { 1, 1, 
Bö¨y
, 3, "CTI" },

1243 { 0, 1, 
Bö¨y
, 3, "CTE" },

1245 vﬁ©ûê
uöt32_t
 *
addrs
[] = {

1246 &
BKP_DR1
,&
BKP_DR2
, &
BKP_DR3
, &
BKP_DR4
, &
BKP_DR5
, &
BKP_DR6
, &
BKP_DR7
, &
BKP_DR8
, &
BKP_DR9
, &
BKP_DR10


1248 
«me
[24];

1249 
uöt32_t
 
x
;

1251 
	`dump_ªg
(&
BKP_RTCCR
,"BKP",0,"RTCCR",
bkp_πc¸
,5);

1252 
	`dump_ªg
(&
BKP_CR
,"BKP",0,"CR",
bkp_¸
,3);

1253 
	`dump_ªg
(&
BKP_CSR
,"BKP",0,"CSR",
bkp_c§
,7);

1254 
	`°d_putc
('\n');

1256  
x
=1; x<=10; ++x ) {

1257 
	`möi_¢¥ötf
(
«me
,Çame,"BKP_DR%u",()
x
);

1258 
	`dump_ªg_sim∂e16
(
addrs
[
x
-1],
«me
,0,
NULL
,*addrs[x-1]);

1260 
	}
}

1263 
	$dump_timîs
() {

1264 
dev
 = 
	`which_devi˚
(1,4);

1266 i‡–
dev
 < 0 )

1269  
dev
 ) {

1271 
	`dump_timî1
();

1276 
	`dump_timîs24
(
dev
);

1279 
	}
}

1282 
	$dump_dma
() {

1283 c⁄° 
bdesc
 
dma1_i§
[] = {

1284 { 31, 4, 
Bö¨y
, 4, "res" },

1285 { 27, 1, 
Bö¨y
, 5, "TEIF7" },

1286 { 26, 1, 
Bö¨y
, 5, "HTIF7" },

1287 { 25, 1, 
Bö¨y
, 5, "TCIF7" },

1288 { 24, 1, 
Bö¨y
, 4, "GIF7" },

1289 { 23, 1, 
Bö¨y
, 5, "TEIF6" },

1290 { 22, 1, 
Bö¨y
, 5, "HTIF6" },

1291 { 21, 1, 
Bö¨y
, 5, "TCIF6" },

1292 { 20, 1, 
Bö¨y
, 4, "GIF6" },

1293 { 19, 1, 
Bö¨y
, 5, "TEIF5" },

1294 { 18, 1, 
Bö¨y
, 5, "HTIF5" },

1295 { 17, 1, 
Bö¨y
, 5, "TCIF5" },

1296 { 16, 1, 
Bö¨y
, 4, "GIF5" },

1297 { 15, 1, 
Bö¨y
, 5, "TEIF4" },

1298 { 14, 1, 
Bö¨y
, 5, "HTIF4" },

1299 { 13, 1, 
Bö¨y
, 5, "TCIF4" },

1300 { 12, 1, 
Bö¨y
, 4, "GIF4" },

1301 { 11, 1, 
Bö¨y
, 5, "TEIF3" },

1302 { 10, 1, 
Bö¨y
, 5, "HTIF2" },

1303 { 9, 1, 
Bö¨y
, 5, "TCIF3" },

1304 { 8, 1, 
Bö¨y
, 4, "GIF3" },

1305 { 7, 1, 
Bö¨y
, 5, "TEIF2" },

1306 { 6, 1, 
Bö¨y
, 5, "HTIF2" },

1307 { 5, 1, 
Bö¨y
, 5, "TCIF2" },

1308 { 4, 1, 
Bö¨y
, 4, "GIF2" },

1309 { 3, 1, 
Bö¨y
, 5, "TEIF1" },

1310 { 2, 1, 
Bö¨y
, 5, "HTIF1" },

1311 { 1, 1, 
Bö¨y
, 5, "TCIF1" },

1312 { 0, 1, 
Bö¨y
, 4, "GIF1" },

1314 c⁄° 
bdesc
 
dma_c¸x
[] = {

1315 { 31, 17, 
Bö¨y
, 17, "res" },

1316 { 14, 1, 
Bö¨y
, 7, "MEM2MEM" },

1317 { 13, 2, 
Bö¨y
, 2, "PL" },

1318 { 11, 2, 
Bö¨y
, 5, "MSIZE" },

1319 { 9, 2, 
Bö¨y
, 5, "PSIZE" },

1320 { 7, 1, 
Bö¨y
, 4, "MINC" },

1321 { 6, 1, 
Bö¨y
, 4, "PINC" },

1322 { 5, 1, 
Bö¨y
, 4, "CIRC" },

1323 { 4, 1, 
Bö¨y
, 3, "DIR" },

1324 { 3, 1, 
Bö¨y
, 4, "TEIE" },

1325 { 2, 1, 
Bö¨y
, 4, "HTIE" },

1326 { 1, 1, 
Bö¨y
, 4, "TCIE" },

1327 { 0, 1, 
Bö¨y
, 2, "EN" },

1329 c⁄° 
bdesc
 
dma_˙dåx
[] = {

1330 { 31, 16, 
Bö¨y
, 16, "res" },

1331 { 15, 16, 
DecimÆ
, 5, "NDT" },

1333 c⁄° 
bdesc
 
dma_˝¨x
[] = {

1334 { 31, 32, 
Hex
, 32, "PA" },

1336 c⁄° 
bdesc
 
dma_cm¨x
[] = {

1337 { 31, 32, 
Hex
, 32, "MA" },

1340 
	`dump_ªg
(&
DMA1_ISR
,"DMA",1,"ISR",
dma1_i§
,29);

1341 
	`dump_ªg
(&
DMA1_CCR1
,"DMA",1,"CCR1",
dma_c¸x
,13);

1342 
	`dump_ªg
(&
DMA1_CCR2
,"DMA",1,"CCR2",
dma_c¸x
,13);

1343 
	`dump_ªg
(&
DMA1_CCR3
,"DMA",1,"CCR3",
dma_c¸x
,13);

1344 
	`dump_ªg
(&
DMA1_CCR4
,"DMA",1,"CCR4",
dma_c¸x
,13);

1345 
	`dump_ªg
(&
DMA1_CCR5
,"DMA",1,"CCR5",
dma_c¸x
,13);

1346 
	`dump_ªg
(&
DMA1_CCR6
,"DMA",1,"CCR6",
dma_c¸x
,13);

1347 
	`dump_ªg
(&
DMA1_CCR7
,"DMA",1,"CCR7",
dma_c¸x
,13);

1348 
	`dump_ªg
(&
DMA1_CNDTR1
,"DMA",1,"CNDTR1",
dma_˙dåx
,2);

1349 
	`dump_ªg
(&
DMA1_CNDTR2
,"DMA",1,"CNDTR2",
dma_˙dåx
,2);

1350 
	`dump_ªg
(&
DMA1_CNDTR3
,"DMA",1,"CNDTR3",
dma_˙dåx
,2);

1351 
	`dump_ªg
(&
DMA1_CNDTR4
,"DMA",1,"CNDTR4",
dma_˙dåx
,2);

1352 
	`dump_ªg
(&
DMA1_CNDTR5
,"DMA",1,"CNDTR5",
dma_˙dåx
,2);

1353 
	`dump_ªg
(&
DMA1_CNDTR6
,"DMA",1,"CNDTR6",
dma_˙dåx
,2);

1354 
	`dump_ªg
(&
DMA1_CNDTR7
,"DMA",1,"CNDTR7",
dma_˙dåx
,2);

1355 
	`dump_ªg
(&
DMA1_CPAR1
,"DMA",1,"CPAR1",
dma_˝¨x
,1);

1356 
	`dump_ªg
(&
DMA1_CPAR2
,"DMA",1,"CPAR2",
dma_˝¨x
,1);

1357 
	`dump_ªg
(&
DMA1_CPAR3
,"DMA",1,"CPAR3",
dma_˝¨x
,1);

1358 
	`dump_ªg
(&
DMA1_CPAR4
,"DMA",1,"CPAR4",
dma_˝¨x
,1);

1359 
	`dump_ªg
(&
DMA1_CPAR5
,"DMA",1,"CPAR5",
dma_˝¨x
,1);

1360 
	`dump_ªg
(&
DMA1_CPAR6
,"DMA",1,"CPAR6",
dma_˝¨x
,1);

1361 
	`dump_ªg
(&
DMA1_CPAR7
,"DMA",1,"CPAR7",
dma_˝¨x
,1);

1362 
	`dump_ªg
(&
DMA1_CMAR1
,"DMA",1,"CMAR1",
dma_cm¨x
,1);

1363 
	`dump_ªg
(&
DMA1_CMAR2
,"DMA",1,"CMAR2",
dma_cm¨x
,1);

1364 
	`dump_ªg
(&
DMA1_CMAR3
,"DMA",1,"CMAR3",
dma_cm¨x
,1);

1365 
	`dump_ªg
(&
DMA1_CMAR4
,"DMA",1,"CMAR4",
dma_cm¨x
,1);

1366 
	`dump_ªg
(&
DMA1_CMAR5
,"DMA",1,"CMAR5",
dma_cm¨x
,1);

1367 
	`dump_ªg
(&
DMA1_CMAR6
,"DMA",1,"CMAR6",
dma_cm¨x
,1);

1368 
	`dump_ªg
(&
DMA1_CMAR7
,"DMA",1,"CMAR7",
dma_cm¨x
,1);

1369 
	}
}

1372 
	$dump_πc
() {

1373 c⁄° 
bdesc
 
πc_¸h
[] = {

1374 { 31, 29, 
Bö¨y
, 29, "res" },

1375 { 2, 1, 
Bö¨y
, 4, "OWIE" },

1376 { 1, 1, 
Bö¨y
, 5, "ALRIE" },

1377 { 0, 1, 
Bö¨y
, 4, "SECIE" },

1379 c⁄° 
bdesc
 
πc_¸l
[] = {

1380 { 31, 26, 
Bö¨y
, 26, "res" },

1381 { 5, 1, 
Bö¨y
, 5, "RTOFF" },

1382 { 4, 1, 
Bö¨y
, 4, "CNF" },

1383 { 3, 1, 
Bö¨y
, 3, "RSF" },

1384 { 2, 1, 
Bö¨y
, 3, "OWF" },

1385 { 1, 1, 
Bö¨y
, 4, "ALRF" },

1386 { 0, 1, 
Bö¨y
, 4, "SECF" },

1388 c⁄° 
bdesc
 
πc_¥Œ
[] = {

1389 { 31, 16, 
Bö¨y
, 16, "res" },

1390 { 15, 16, 
DecimÆ
, 5, "PRL" },

1392 c⁄° 
bdesc
 
πc_divh
[] = {

1393 { 31, 28, 
Bö¨y
, 28, "res" },

1394 { 3, 4, 
Hex
, 4, "DIVH" },

1396 c⁄° 
bdesc
 
πc_divl
[] = {

1397 { 31, 16, 
Bö¨y
, 16, "res" },

1398 { 15, 16, 
Hex
, 16, "DIVL" },

1400 c⁄° 
bdesc
 
πc_˙th
[] = {

1401 { 31, 16, 
Bö¨y
, 16, "res" },

1402 { 15, 16, 
Hex
, 16, "CNTH" },

1404 c⁄° 
bdesc
 
πc_˙é
[] = {

1405 { 31, 16, 
Bö¨y
, 16, "res" },

1406 { 15, 16, 
Hex
, 16, "CNTL" },

1408 c⁄° 
bdesc
 
πc_Ærh
[] = {

1409 { 31, 16, 
Bö¨y
, 16, "res" },

1410 { 15, 16, 
Hex
, 16, "ALRH" },

1412 c⁄° 
bdesc
 
πc_Ææ
[] = {

1413 { 31, 16, 
Bö¨y
, 16, "res" },

1414 { 15, 16, 
Hex
, 16, "ALRL" },

1417 
	`dump_ªg
(&
RTC_CRH
,"RTC",0,"CRH",
πc_¸h
,4);

1418 
	`dump_ªg
(&
RTC_CRL
,"RTC",0,"CRL",
πc_¸l
,7);

1419 
	`dump_ªg
(&
RTC_PRLL
,"RTC",0,"PRLL",
πc_¥Œ
,2);

1420 
	`dump_ªg
(&
RTC_DIVH
,"RTC",0,"DIVH",
πc_divh
,2);

1421 
	`dump_ªg
(&
RTC_DIVL
,"RTC",0,"DIVL",
πc_divl
,2);

1422 
	`dump_ªg
(&
RTC_CNTH
,"RTC",0,"CNTH",
πc_˙th
,2);

1423 
	`dump_ªg
(&
RTC_CNTL
,"RTC",0,"CNTL",
πc_˙é
,2);

1424 
	`dump_ªg
(&
RTC_ALRH
,"RTC",0,"ALRH",
πc_Ærh
,2);

1425 
	`dump_ªg
(&
RTC_ALRL
,"RTC",0,"ALRL",
πc_Ææ
,2);

1426 
	}
}

1429 
	$dump_ˇn
() {

1430 c⁄° 
bdesc
 
ˇn_m¸
[] = {

1431 { 31, 15, 
Bö¨y
, 15, "res" },

1432 { 16, 1, 
Bö¨y
, 3, "DBF" },

1433 { 15, 1, 
Bö¨y
, 5, "RESET" },

1434 { 14, 7, 
Bö¨y
, 7, "res" },

1435 { 7, 1, 
Bö¨y
, 4, "TTCN" },

1436 { 6, 1, 
Bö¨y
, 4, "ABOM" },

1437 { 5, 1, 
Bö¨y
, 4, "AWUM" },

1438 { 4, 1, 
Bö¨y
, 4, "NART" },

1439 { 3, 1, 
Bö¨y
, 4, "RFLM" },

1440 { 2, 1, 
Bö¨y
, 4, "TXFP" },

1441 { 1, 1, 
Bö¨y
, 5, "SLEEP" },

1442 { 0, 1, 
Bö¨y
, 4, "INRQ" }

1444 c⁄° 
bdesc
 
ˇn_m§
[] = {

1445 { 31, 20, 
Bö¨y
, 20, "res" },

1446 { 11, 1, 
Bö¨y
, 2, "RX" },

1447 { 10, 1, 
Bö¨y
, 4, "SAMP" },

1448 { 9, 1, 
Bö¨y
, 3, "RXM" },

1449 { 8, 1, 
Bö¨y
, 3, "TXM" },

1450 { 7, 1, 
Bö¨y
, 3, "res" },

1451 { 4, 1, 
Bö¨y
, 5, "SLAKI" },

1452 { 3, 1, 
Bö¨y
, 4, "WKUI" },

1453 { 2, 1, 
Bö¨y
, 4, "ERRI" },

1454 { 1, 1, 
Bö¨y
, 4, "SLAK" },

1455 { 0, 1, 
Bö¨y
, 4, "INAK" }

1457 c⁄° 
bdesc
 
ˇn_t§
[] = {

1458 { 31, 1, 
Bö¨y
, 4, "LOW2" },

1459 { 30, 1, 
Bö¨y
, 4, "LOW1" },

1460 { 29, 1, 
Bö¨y
, 4, "LOW0" },

1461 { 28, 1, 
Bö¨y
, 4, "TME2" },

1462 { 27, 1, 
Bö¨y
, 4, "TME1" },

1463 { 26, 1, 
Bö¨y
, 4, "TME0" },

1464 { 25, 2, 
Bö¨y
, 4, "CODE" },

1465 { 23, 1, 
Bö¨y
, 5, "ABRQ2" },

1466 { 22, 3, 
Bö¨y
, 3, "res" },

1467 { 19, 1, 
Bö¨y
, 5, "TERR2" },

1468 { 18, 1, 
Bö¨y
, 5, "ALST2" },

1469 { 17, 1, 
Bö¨y
, 5, "TXOK2" },

1470 { 16, 1, 
Bö¨y
, 5, "RQCP2" },

1471 { 15, 1, 
Bö¨y
, 5, "ABRQ1" },

1472 { 14, 3, 
Bö¨y
, 3, "res" },

1473 { 11, 1, 
Bö¨y
, 5, "TERR1" },

1474 { 10, 1, 
Bö¨y
, 5, "ALST1" },

1475 { 9, 1, 
Bö¨y
, 5, "TXOK1" },

1476 { 8, 1, 
Bö¨y
, 5, "RQCP1" },

1477 { 7, 1, 
Bö¨y
, 5, "ABRQ0" },

1478 { 3, 1, 
Bö¨y
, 5, "TERR0" },

1479 { 2, 1, 
Bö¨y
, 5, "ALST0" },

1480 { 1, 1, 
Bö¨y
, 5, "TXOK0" },

1481 { 0, 1, 
Bö¨y
, 5, "RQCP0" },

1483 c⁄° 
bdesc
 
ˇn_rf0r
[] = {

1484 { 31, 26, 
Bö¨y
, 26, "res" },

1485 { 5, 1, 
Bö¨y
, 5, "RFMO0" },

1486 { 4, 1, 
Bö¨y
, 5, "FOVR0" },

1487 { 3, 1, 
Bö¨y
, 5, "FULL0" },

1488 { 2, 1, 
Bö¨y
, 3, "res" },

1489 { 1, 2, 
DecimÆ
, 4, "FMP0" },

1491 c⁄° 
bdesc
 
ˇn_rf1r
[] = {

1492 { 31, 26, 
Bö¨y
, 26, "res" },

1493 { 5, 1, 
Bö¨y
, 5, "RFMO1" },

1494 { 4, 1, 
Bö¨y
, 5, "FOVR1" },

1495 { 3, 1, 
Bö¨y
, 5, "FULL1" },

1496 { 2, 1, 
Bö¨y
, 3, "res" },

1497 { 1, 2, 
DecimÆ
, 4, "FMP1" },

1499 c⁄° 
bdesc
 
ˇn_õr
[] = {

1500 { 31, 14, 
Bö¨y
, 14, "res" },

1501 { 17, 1, 
Bö¨y
, 5, "SLKIE" },

1502 { 16, 1, 
Bö¨y
, 5, "WKUIE" },

1503 { 15, 1, 
Bö¨y
, 5, "ERRIE" },

1504 { 14, 3, 
Bö¨y
, 3, "res" },

1505 { 11, 1, 
Bö¨y
, 5, "LECIE" },

1506 { 10, 1, 
Bö¨y
, 5, "BOFIE" },

1507 { 9, 1, 
Bö¨y
, 5, "EPVIE" },

1508 { 8, 1, 
Bö¨y
, 5, "EWGIE" },

1509 { 7, 1, 
Bö¨y
, 3, "res" },

1510 { 6, 1, 
Bö¨y
, 6, "FOVIE1" },

1511 { 5, 1, 
Bö¨y
, 5, "FFIE1" },

1512 { 4, 1, 
Bö¨y
, 6, "FMPIE1" },

1513 { 3, 1, 
Bö¨y
, 6, "FOVIE0" },

1514 { 2, 1, 
Bö¨y
, 5, "FFIE0" },

1515 { 1, 1, 
Bö¨y
, 6, "FMPIE0" },

1516 { 0, 1, 
Bö¨y
, 5, "TMEIE" },

1518 c⁄° 
bdesc
 
ˇn_e§
[] = {

1519 { 31, 8, 
DecimÆ
, 5, "REC" },

1520 { 22, 8, 
DecimÆ
, 5, "TEC" },

1521 { 15, 9, 
Bö¨y
, 9, "res" },

1522 { 6, 3, 
Bö¨y
, 3, "LEC" },

1523 { 3, 1, 
Bö¨y
, 3, "res" },

1524 { 2, 1, 
Bö¨y
, 4, "BOFF" },

1525 { 1, 1, 
Bö¨y
, 4, "EPVF" },

1526 { 0, 1, 
Bö¨y
, 4, "EWGF" },

1528 c⁄° 
bdesc
 
ˇn_bå
[] = {

1529 { 31, 1, 
Bö¨y
, 4, "SILM" },

1530 { 30, 1, 
Bö¨y
, 4, "LBKM" },

1531 { 29, 4, 
Bö¨y
, 4, "res" },

1532 { 25, 2, 
Bö¨y
, 3, "SWJ" },

1533 { 23, 1, 
Bö¨y
, 3, "res" },

1534 { 22, 3, 
DecimÆ
, 3, "TS2" },

1535 { 19, 4, 
DecimÆ
, 4, "TS1" },

1536 { 15, 6, 
Bö¨y
, 6, "res" },

1537 { 9, 10, 
DecimÆ
, 4, "BRP" },

1539 c⁄° 
bdesc
 
ˇn_tixr
[] = {

1540 { 31, 11, 
Hex
, 5, "STDID" },

1541 { 20, 18, 
Hex
, 6, "EXID" },

1542 { 2, 1, 
Bö¨y
, 3, "IDE" },

1543 { 1, 1, 
Bö¨y
, 3, "RTR" },

1544 { 0, 1, 
Bö¨y
, 4, "TXRQ" },

1546 c⁄° 
bdesc
 
ˇn_tdtxr
[] = {

1547 { 31, 16, 
DecimÆ
, 5, "TIME" },

1548 { 15, 7, 
Bö¨y
, 7, "res" },

1549 { 8, 1, 
Bö¨y
, 3, "TGT" },

1550 { 7, 4, 
Bö¨y
, 4, "res" },

1551 { 3, 4, 
DecimÆ
, 3, "DCL" },

1553 c⁄° 
bdesc
 
ˇn_tdlxr
[] = {

1554 { 31, 8, 
Bö¨y
, 8, "DATA3" },

1555 { 23, 8, 
Bö¨y
, 8, "DATA2" },

1556 { 15, 8, 
Bö¨y
, 8, "DATA1" },

1557 { 7, 8, 
Bö¨y
, 8, "DATA0" },

1559 c⁄° 
bdesc
 
ˇn_tdhxr
[] = {

1560 { 31, 8, 
Bö¨y
, 8, "DATA7" },

1561 { 23, 8, 
Bö¨y
, 8, "DATA6" },

1562 { 15, 8, 
Bö¨y
, 8, "DATA5" },

1563 { 7, 8, 
Bö¨y
, 8, "DATA4" },

1565 c⁄° 
bdesc
 
ˇn_rixr
[] = {

1566 { 31, 11, 
Hex
, 5, "STDID" },

1567 { 20, 18, 
Hex
, 6, "EXID" },

1568 { 2, 1, 
Bö¨y
, 3, "IDE" },

1569 { 1, 1, 
Bö¨y
, 3, "RTR" },

1570 { 0, 1, 
Bö¨y
, 3, "res" },

1572 c⁄° 
bdesc
 
ˇn_rdtxr
[] = {

1573 { 31, 16, 
DecimÆ
, 5, "TIME" },

1574 { 15, 8, 
Bö¨y
, 8, "FMI" },

1575 { 7, 4, 
Bö¨y
, 4, "res" },

1576 { 3, 4, 
DecimÆ
, 3, "DCL" },

1579 
	`dump_ªg
(&
	`CAN_MCR
(
CAN1
),"CAN",0,"MCR",
ˇn_m¸
,12);

1580 
	`dump_ªg
(&
	`CAN_MSR
(
CAN1
),"CAN",0,"MSR",
ˇn_m§
,11);

1581 
	`dump_ªg
(&
	`CAN_TSR
(
CAN1
),"CAN",0,"TSR",
ˇn_t§
,24);

1582 
	`dump_ªg
(&
	`CAN_ESR
(
CAN1
),"CAN",0,"ESR",
ˇn_e§
,8);

1583 
	`dump_ªg
(&
	`CAN_BTR
(
CAN1
),"CAN",0,"BTR",
ˇn_bå
,9);

1584 
	`dump_ªg
(&
	`CAN_RF0R
(
CAN1
),"CAN",0,"RF0R",
ˇn_rf0r
,6);

1585 
	`dump_ªg
(&
	`CAN_RF1R
(
CAN1
),"CAN",0,"RF1R",
ˇn_rf1r
,6);

1586 
	`dump_ªg
(&
	`CAN_IER
(
CAN1
),"CAN",0,"IER",
ˇn_õr
,17);

1587 
	`dump_ªg
(&
	`CAN_TI0R
(
CAN1
),"CAN",0,"TI0R",
ˇn_tixr
,5);

1588 
	`dump_ªg
(&
	`CAN_TI1R
(
CAN1
),"CAN",0,"TI1R",
ˇn_tixr
,5);

1589 
	`dump_ªg
(&
	`CAN_TI2R
(
CAN1
),"CAN",0,"TI2R",
ˇn_tixr
,5);

1590 
	`dump_ªg
(&
	`CAN_TDT0R
(
CAN1
),"CAN",0,"TDT0R",
ˇn_tdtxr
,5);

1591 
	`dump_ªg
(&
	`CAN_TDT1R
(
CAN1
),"CAN",0,"TDT1R",
ˇn_tdtxr
,5);

1592 
	`dump_ªg
(&
	`CAN_TDT2R
(
CAN1
),"CAN",0,"TDT2R",
ˇn_tdtxr
,5);

1593 
	`dump_ªg
(&
	`CAN_TDL0R
(
CAN1
),"CAN",0,"TDL0R",
ˇn_tdlxr
,4);

1594 
	`dump_ªg
(&
	`CAN_TDL1R
(
CAN1
),"CAN",0,"TDL1R",
ˇn_tdlxr
,4);

1595 
	`dump_ªg
(&
	`CAN_TDL2R
(
CAN1
),"CAN",0,"TDL2R",
ˇn_tdlxr
,4);

1596 
	`dump_ªg
(&
	`CAN_TDH0R
(
CAN1
),"CAN",0,"TDH0R",
ˇn_tdhxr
,4);

1597 
	`dump_ªg
(&
	`CAN_TDH1R
(
CAN1
),"CAN",0,"TDH1R",
ˇn_tdhxr
,4);

1598 
	`dump_ªg
(&
	`CAN_TDH2R
(
CAN1
),"CAN",0,"TDH2R",
ˇn_tdhxr
,4);

1599 
	`dump_ªg
(&
	`CAN_RI0R
(
CAN1
),"CAN",0,"RI0R",
ˇn_rixr
,5);

1600 
	`dump_ªg
(&
	`CAN_RI1R
(
CAN1
),"CAN",0,"RI1R",
ˇn_rixr
,5);

1601 
	`dump_ªg
(&
	`CAN_RDT0R
(
CAN1
),"CAN",0,"RDT0R",
ˇn_rdtxr
,4);

1602 
	`dump_ªg
(&
	`CAN_RDT1R
(
CAN1
),"CAN",0,"RDT1R",
ˇn_rdtxr
,4);

1603 
	`dump_ªg
(&
	`CAN_RDL0R
(
CAN1
),"CAN",0,"RDL0R",
ˇn_tdlxr
,4);

1604 
	`dump_ªg
(&
	`CAN_RDL1R
(
CAN1
),"CAN",0,"RDL1R",
ˇn_tdlxr
,4);

1605 
	`dump_ªg
(&
	`CAN_RDH0R
(
CAN1
),"CAN",0,"RDH0R",
ˇn_tdhxr
,4);

1606 
	`dump_ªg
(&
	`CAN_RDH1R
(
CAN1
),"CAN",0,"RDH1R",
ˇn_tdhxr
,4);

1607 
	}
}

1610 
	$dump_ˇn_fûãr
() {

1611 c⁄° 
bdesc
 
ˇn_fmr
[] = {

1612 { 31, 18, 
Bö¨y
, 18, "res" },

1613 { 13, 8, 
DecimÆ
, 6, "CAN2SB" },

1614 { 7, 7, 
Bö¨y
, 7, "res" },

1615 { 0, 1, 
Bö¨y
, 5, "FINIT" },

1617 c⁄° 
bdesc
 
ˇn_fm1r
[] = {

1618 { 31, 4, 
Bö¨y
, 4, "res" },

1619 { 27, 1, 
Bö¨y
, 5, "FBM27" },

1620 { 26, 1, 
Bö¨y
, 5, "FBM26" },

1621 { 25, 1, 
Bö¨y
, 5, "FBM25" },

1622 { 24, 1, 
Bö¨y
, 5, "FBM24" },

1623 { 23, 1, 
Bö¨y
, 5, "FBM23" },

1624 { 22, 1, 
Bö¨y
, 5, "FBM22" },

1625 { 21, 1, 
Bö¨y
, 5, "FBM21" },

1626 { 20, 1, 
Bö¨y
, 5, "FBM20" },

1627 { 19, 1, 
Bö¨y
, 5, "FBM19" },

1628 { 18, 1, 
Bö¨y
, 5, "FBM18" },

1629 { 17, 1, 
Bö¨y
, 5, "FBM17" },

1630 { 16, 1, 
Bö¨y
, 5, "FBM16" },

1631 { 15, 1, 
Bö¨y
, -5, "FBM15" },

1632 { 14, 1, 
Bö¨y
, 5, "FBM14" },

1633 { 13, 1, 
Bö¨y
, 5, "FBM13" },

1634 { 12, 1, 
Bö¨y
, 5, "FBM12" },

1635 { 11, 1, 
Bö¨y
, 5, "FBM11" },

1636 { 10, 1, 
Bö¨y
, 5, "FBM10" },

1637 { 9, 1, 
Bö¨y
, 4, "FBM9" },

1638 { 8, 1, 
Bö¨y
, 4, "FBM8" },

1639 { 7, 1, 
Bö¨y
, 4, "FBM7" },

1640 { 6, 1, 
Bö¨y
, 4, "FBM6" },

1641 { 5, 1, 
Bö¨y
, 4, "FBM5" },

1642 { 4, 1, 
Bö¨y
, 4, "FBM4" },

1643 { 3, 1, 
Bö¨y
, 4, "FBM3" },

1644 { 2, 1, 
Bö¨y
, 4, "FBM2" },

1645 { 1, 1, 
Bö¨y
, 4, "FBM1" },

1646 { 0, 1, 
Bö¨y
, 4, "FBM0" },

1648 c⁄° 
bdesc
 
ˇn_fs1r
[] = {

1649 { 31, 4, 
Bö¨y
, 4, "res" },

1650 { 27, 1, 
Bö¨y
, 5, "FSC27" },

1651 { 26, 1, 
Bö¨y
, 5, "FSC26" },

1652 { 25, 1, 
Bö¨y
, 5, "FSC25" },

1653 { 24, 1, 
Bö¨y
, 5, "FSC24" },

1654 { 23, 1, 
Bö¨y
, 5, "FSC23" },

1655 { 22, 1, 
Bö¨y
, 5, "FSC22" },

1656 { 21, 1, 
Bö¨y
, 5, "FSC21" },

1657 { 20, 1, 
Bö¨y
, 5, "FSC20" },

1658 { 19, 1, 
Bö¨y
, 5, "FSC19" },

1659 { 18, 1, 
Bö¨y
, 5, "FSC18" },

1660 { 17, 1, 
Bö¨y
, 5, "FSC17" },

1661 { 16, 1, 
Bö¨y
, 5, "FSC16" },

1662 { 15, 1, 
Bö¨y
, -5, "FSC15" },

1663 { 14, 1, 
Bö¨y
, 5, "FSC14" },

1664 { 13, 1, 
Bö¨y
, 5, "FSC13" },

1665 { 12, 1, 
Bö¨y
, 5, "FSC12" },

1666 { 11, 1, 
Bö¨y
, 5, "FSC11" },

1667 { 10, 1, 
Bö¨y
, 5, "FSC10" },

1668 { 9, 1, 
Bö¨y
, 4, "FSC9" },

1669 { 8, 1, 
Bö¨y
, 4, "FSC8" },

1670 { 7, 1, 
Bö¨y
, 4, "FSC7" },

1671 { 6, 1, 
Bö¨y
, 4, "FSC6" },

1672 { 5, 1, 
Bö¨y
, 4, "FSC5" },

1673 { 4, 1, 
Bö¨y
, 4, "FSC4" },

1674 { 3, 1, 
Bö¨y
, 4, "FSC3" },

1675 { 2, 1, 
Bö¨y
, 4, "FSC2" },

1676 { 1, 1, 
Bö¨y
, 4, "FSC1" },

1677 { 0, 1, 
Bö¨y
, 4, "FSC0" },

1687 
	`dump_ªg
(&
	`CAN_FMR
(
CAN1
),"CAN",0,"FMR",
ˇn_fmr
,4);

1688 
	`dump_ªg
(&
	`CAN_FM1R
(
CAN1
),"CAN",0,"FM1R",
ˇn_fm1r
,29);

1689 
	`dump_ªg
(&
	`CAN_FS1R
(
CAN1
),"CAN",0,"FS1R",
ˇn_fs1r
,29);

1691 
	}
}

1698 
	$m⁄ô‹
() {

1699 
ch
;

1700 
boﬁ
 
míuf
 = 
åue
;

1703 i‡–
míuf
 )

1704 
	`°d_¥ötf
(

1724 
míuf
 = 
Ál£
;

1726 
	`°d_¥ötf
("\n: ");

1727 
ch
 = 
	`°d_gëc
();

1729 i‡–
	`ißÕha
(
ch
) )

1730 
ch
 = 
	`touµî
(ch);

1731 
	`°d_¥ötf
("%c\n",
ch
);

1733  
ch
 ) {

1737 
míuf
 = 
åue
;

1740 
	`dump_adc
();

1743 
	`dump_backup
();

1746 
	`dump_dma
();

1749 
	`dump_afio
();

1752 
	`dump_gpio
();

1755 
	`dump_gpio_öputs
();

1758 
	`dump_ˇn
();

1761 
	`dump_gpio_locks
();

1764 
	`dump_gpio_ouçuts
();

1767 
	`dump_ˇn_fûãr
();

1770 
	`dump_rcc
();

1773 
	`dump_timîs
();

1776 
	`dump_πc
();

1779 
	`dump_öå
();

1784 
	`°d_¥ötf
(" ???\n");

1785 
míuf
 = 
åue
;

1788 
	}
}

	@../libwwg/src/rtos/FreeRTOS.h

70 #i‚de‡
INC_FREERTOS_H


71 
	#INC_FREERTOS_H


	)

76 
	~<°ddef.h
>

91 
	~<°döt.h
>

93 #ifde‡
__˝lu•lus


98 
	~"FªeRTOSC⁄fig.h
"

101 
	~"¥ojdefs.h
"

104 
	~"p‹èbÀ.h
"

107 #i‚de‡
c⁄figUSE_NEWLIB_REENTRANT


108 
	#c⁄figUSE_NEWLIB_REENTRANT
 0

	)

112 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

113 
	~<ªít.h
>

121 #i‚de‡
c⁄figMINIMAL_STACK_SIZE


122 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMINIMAL_STACK_SIZE
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. c⁄figMINIMAL_STACK_SIZE 
deföes
 
the
 
size
 (ö 
w‹ds
Ë
of
Åhê
°ack
 
Æloˇãd
 
to
Åhê
idÀ
 
èsk
. 
Re„r
Åÿthê
demo
 
¥oje˘
 
¥ovided
 
your
 
p‹t
 
a
 
suôabÀ
 
vÆue
.

125 #i‚de‡
c⁄figMAX_PRIORITIES


126 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

129 #i‚de‡
c⁄figUSE_PREEMPTION


130 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

133 #i‚de‡
c⁄figUSE_IDLE_HOOK


134 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

137 #i‚de‡
c⁄figUSE_TICK_HOOK


138 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

141 #i‚de‡
c⁄figUSE_16_BIT_TICKS


142 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

145 #i‚de‡
c⁄figMAX_PRIORITIES


146 #îr‹ 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
to
 bê
gª©î
 
th™
 
‹
 
equÆ
Åo 1.

149 #i‚de‡
c⁄figUSE_CO_ROUTINES


150 
	#c⁄figUSE_CO_ROUTINES
 0

	)

153 #i‚de‡
INCLUDE_vTaskPri‹ôySë


154 
	#INCLUDE_vTaskPri‹ôySë
 0

	)

157 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


158 
	#INCLUDE_uxTaskPri‹ôyGë
 0

	)

161 #i‚de‡
INCLUDE_vTaskDñëe


162 
	#INCLUDE_vTaskDñëe
 0

	)

165 #i‚de‡
INCLUDE_vTaskSu•íd


166 
	#INCLUDE_vTaskSu•íd
 0

	)

169 #i‚de‡
INCLUDE_vTaskDñayU¡û


170 
	#INCLUDE_vTaskDñayU¡û
 0

	)

173 #i‚de‡
INCLUDE_vTaskDñay


174 
	#INCLUDE_vTaskDñay
 0

	)

177 #i‚de‡
INCLUDE_xTaskGëIdÀTaskH™dÀ


178 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 0

	)

181 #i‚de‡
INCLUDE_xTaskAb‹tDñay


182 
	#INCLUDE_xTaskAb‹tDñay
 0

	)

185 #i‚de‡
INCLUDE_xQueueGëMuãxHﬁdî


186 
	#INCLUDE_xQueueGëMuãxHﬁdî
 0

	)

189 #i‚de‡
INCLUDE_xSem≠h‹eGëMuãxHﬁdî


190 
	#INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 
INCLUDE_xQueueGëMuãxHﬁdî


	)

193 #i‚de‡
INCLUDE_xTaskGëH™dÀ


194 
	#INCLUDE_xTaskGëH™dÀ
 0

	)

197 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


198 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

201 #i‚de‡
INCLUDE_eTaskGëSèã


202 
	#INCLUDE_eTaskGëSèã
 0

	)

205 #i‚de‡
INCLUDE_xTaskResumeFromISR


206 
	#INCLUDE_xTaskResumeFromISR
 1

	)

209 #i‚de‡
INCLUDE_xTimîPídFun˘i⁄CÆl


210 
	#INCLUDE_xTimîPídFun˘i⁄CÆl
 0

	)

213 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


214 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

217 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


218 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

221 #i‡
c⁄figUSE_CO_ROUTINES
 != 0

222 #i‚de‡
c⁄figMAX_CO_ROUTINE_PRIORITIES


223 #îr‹ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 
mu°
 
be
 
gª©î
 
th™
 
‹
 
equÆ
 
to
 1.

227 #i‚de‡
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK


228 
	#c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 0

	)

231 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


232 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

235 #i‚de‡
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS


236 
	#c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 0

	)

239 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


240 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

243 #i‚de‡
c⁄figUSE_MUTEXES


244 
	#c⁄figUSE_MUTEXES
 0

	)

247 #i‚de‡
c⁄figUSE_TIMERS


248 
	#c⁄figUSE_TIMERS
 0

	)

251 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


252 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

255 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


256 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

259 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


260 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

263 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


264 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

267 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


268 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

271 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

272 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


275 #i‚de‡
c⁄figASSERT


276 
	#c⁄figASSERT
–
x
 )

	)

277 
	#c⁄figASSERT_DEFINED
 0

	)

279 
	#c⁄figASSERT_DEFINED
 1

	)

283 #i‡
c⁄figUSE_TIMERS
 == 1

285 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


286 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

289 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


290 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

293 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


294 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

299 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


300 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

303 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


304 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

307 #i‚de‡
p‹tCLEAN_UP_TCB


308 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

311 #i‚de‡
p‹tPRE_TASK_DELETE_HOOK


312 
	#p‹tPRE_TASK_DELETE_HOOK
–
pvTaskToDñëe
, 
pxYõldPídög
 )

	)

315 #i‚de‡
p‹tSETUP_TCB


316 
	#p‹tSETUP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

319 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


320 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

323 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1 )

324 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

325 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

326 
	#pcQueueGëName
–
xQueue
 )

	)

329 #i‚de‡
p‹tPOINTER_SIZE_TYPE


330 
	#p‹tPOINTER_SIZE_TYPE
 
uöt32_t


	)

334 #i‚de‡
åa˚START


337 
	#åa˚START
()

	)

340 #i‚de‡
åa˚END


343 
	#åa˚END
()

	)

346 #i‚de‡
åa˚TASK_SWITCHED_IN


349 
	#åa˚TASK_SWITCHED_IN
()

	)

352 #i‚de‡
åa˚INCREASE_TICK_COUNT


355 
	#åa˚INCREASE_TICK_COUNT
–
x
 )

	)

358 #i‚de‡
åa˚LOW_POWER_IDLE_BEGIN


360 
	#åa˚LOW_POWER_IDLE_BEGIN
()

	)

363 #i‚def 
åa˚LOW_POWER_IDLE_END


365 
	#åa˚LOW_POWER_IDLE_END
()

	)

368 #i‚de‡
åa˚TASK_SWITCHED_OUT


371 
	#åa˚TASK_SWITCHED_OUT
()

	)

374 #i‚de‡
åa˚TASK_PRIORITY_INHERIT


380 
	#åa˚TASK_PRIORITY_INHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxInhîôedPri‹ôy
 )

	)

383 #i‚de‡
åa˚TASK_PRIORITY_DISINHERIT


388 
	#åa˚TASK_PRIORITY_DISINHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxOrigöÆPri‹ôy
 )

	)

391 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


396 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

399 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


404 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

407 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


408 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

413 #i‚de‡
åa˚MOVED_TASK_TO_READY_STATE


414 
	#åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

417 #i‚de‡
åa˚POST_MOVED_TASK_TO_READY_STATE


418 
	#åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

421 #i‚de‡
åa˚QUEUE_CREATE


422 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

425 #i‚de‡
åa˚QUEUE_CREATE_FAILED


426 
	#åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 )

	)

429 #i‚de‡
åa˚CREATE_MUTEX


430 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

433 #i‚de‡
åa˚CREATE_MUTEX_FAILED


434 
	#åa˚CREATE_MUTEX_FAILED
()

	)

437 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


438 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

441 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


442 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

445 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


446 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

449 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


450 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

453 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


454 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

457 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


458 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

461 #i‚de‡
åa˚QUEUE_SEND


462 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

465 #i‚de‡
åa˚QUEUE_SEND_FAILED


466 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

469 #i‚de‡
åa˚QUEUE_RECEIVE


470 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

473 #i‚de‡
åa˚QUEUE_PEEK


474 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

477 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR


478 
	#åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 )

	)

481 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


482 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

485 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


486 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

489 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


490 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

493 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


494 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

497 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


498 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

501 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR_FAILED


502 
	#åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 )

	)

505 #i‚de‡
åa˚QUEUE_DELETE


506 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

509 #i‚de‡
åa˚TASK_CREATE


510 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

513 #i‚de‡
åa˚TASK_CREATE_FAILED


514 
	#åa˚TASK_CREATE_FAILED
()

	)

517 #i‚de‡
åa˚TASK_DELETE


518 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

521 #i‚de‡
åa˚TASK_DELAY_UNTIL


522 
	#åa˚TASK_DELAY_UNTIL
–
x
 )

	)

525 #i‚de‡
åa˚TASK_DELAY


526 
	#åa˚TASK_DELAY
()

	)

529 #i‚de‡
åa˚TASK_PRIORITY_SET


530 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

533 #i‚de‡
åa˚TASK_SUSPEND


534 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

537 #i‚de‡
åa˚TASK_RESUME


538 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

541 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


542 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

545 #i‚de‡
åa˚TASK_INCREMENT_TICK


546 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

549 #i‚de‡
åa˚TIMER_CREATE


550 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

553 #i‚de‡
åa˚TIMER_CREATE_FAILED


554 
	#åa˚TIMER_CREATE_FAILED
()

	)

557 #i‚de‡
åa˚TIMER_COMMAND_SEND


558 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

561 #i‚de‡
åa˚TIMER_EXPIRED


562 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

565 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


566 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

569 #i‚de‡
åa˚MALLOC


570 
	#åa˚MALLOC
–
pvAddªss
, 
uiSize
 )

	)

573 #i‚de‡
åa˚FREE


574 
	#åa˚FREE
–
pvAddªss
, 
uiSize
 )

	)

577 #i‚de‡
åa˚EVENT_GROUP_CREATE


578 
	#åa˚EVENT_GROUP_CREATE
–
xEvítGroup
 )

	)

581 #i‚de‡
åa˚EVENT_GROUP_CREATE_FAILED


582 
	#åa˚EVENT_GROUP_CREATE_FAILED
()

	)

585 #i‚de‡
åa˚EVENT_GROUP_SYNC_BLOCK


586 
	#åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 )

	)

589 #i‚de‡
åa˚EVENT_GROUP_SYNC_END


590 
	#åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

593 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_BLOCK


594 
	#åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 )

	)

597 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_END


598 
	#åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

601 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS


602 
	#åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

605 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR


606 
	#åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

609 #i‚de‡
åa˚EVENT_GROUP_SET_BITS


610 
	#åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 )

	)

613 #i‚de‡
åa˚EVENT_GROUP_SET_BITS_FROM_ISR


614 
	#åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 )

	)

617 #i‚de‡
åa˚EVENT_GROUP_DELETE


618 
	#åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 )

	)

621 #i‚de‡
åa˚PEND_FUNC_CALL


622 
	#åa˚PEND_FUNC_CALL
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

625 #i‚de‡
åa˚PEND_FUNC_CALL_FROM_ISR


626 
	#åa˚PEND_FUNC_CALL_FROM_ISR
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

629 #i‚de‡
åa˚QUEUE_REGISTRY_ADD


630 
	#åa˚QUEUE_REGISTRY_ADD
(
xQueue
, 
pcQueueName
)

	)

633 #i‚de‡
åa˚TASK_NOTIFY_TAKE_BLOCK


634 
	#åa˚TASK_NOTIFY_TAKE_BLOCK
()

	)

637 #i‚de‡
åa˚TASK_NOTIFY_TAKE


638 
	#åa˚TASK_NOTIFY_TAKE
()

	)

641 #i‚de‡
åa˚TASK_NOTIFY_WAIT_BLOCK


642 
	#åa˚TASK_NOTIFY_WAIT_BLOCK
()

	)

645 #i‚de‡
åa˚TASK_NOTIFY_WAIT


646 
	#åa˚TASK_NOTIFY_WAIT
()

	)

649 #i‚de‡
åa˚TASK_NOTIFY


650 
	#åa˚TASK_NOTIFY
()

	)

653 #i‚de‡
åa˚TASK_NOTIFY_FROM_ISR


654 
	#åa˚TASK_NOTIFY_FROM_ISR
()

	)

657 #i‚de‡
åa˚TASK_NOTIFY_GIVE_FROM_ISR


658 
	#åa˚TASK_NOTIFY_GIVE_FROM_ISR
()

	)

661 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


662 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

665 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

667 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


668 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

671 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


672 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


673 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

679 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


680 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

683 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


684 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

687 #i‚de‡
p‹tPRIVILEGE_BIT


688 
	#p‹tPRIVILEGE_BIT
 ( ( 
UBa£Ty≥_t
 ) 0x00 )

	)

691 #i‚de‡
p‹tYIELD_WITHIN_API


692 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

695 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


696 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 )

	)

699 #i‚de‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP


700 
	#c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 2

	)

703 #i‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 < 2

704 #îr‹ 
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 
mu°
 
nŸ
 
be
 
Àss
 
th™
 2

707 #i‚de‡
c⁄figUSE_TICKLESS_IDLE


708 
	#c⁄figUSE_TICKLESS_IDLE
 0

	)

711 #i‚de‡
c⁄figPRE_SLEEP_PROCESSING


712 
	#c⁄figPRE_SLEEP_PROCESSING
–
x
 )

	)

715 #i‚de‡
c⁄figPOST_SLEEP_PROCESSING


716 
	#c⁄figPOST_SLEEP_PROCESSING
–
x
 )

	)

719 #i‚de‡
c⁄figUSE_QUEUE_SETS


720 
	#c⁄figUSE_QUEUE_SETS
 0

	)

723 #i‚de‡
p‹tTASK_USES_FLOATING_POINT


724 
	#p‹tTASK_USES_FLOATING_POINT
()

	)

727 #i‚de‡
c⁄figUSE_TIME_SLICING


728 
	#c⁄figUSE_TIME_SLICING
 1

	)

731 #i‚de‡
c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS


732 
	#c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
 0

	)

735 #i‚de‡
c⁄figUSE_STATS_FORMATTING_FUNCTIONS


736 
	#c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 0

	)

739 #i‚de‡
p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID


740 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
()

	)

743 #i‚de‡
c⁄figUSE_TRACE_FACILITY


744 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

747 #i‚de‡
mtCOVERAGE_TEST_MARKER


748 
	#mtCOVERAGE_TEST_MARKER
()

	)

751 #i‚de‡
mtCOVERAGE_TEST_DELAY


752 
	#mtCOVERAGE_TEST_DELAY
()

	)

755 #i‚de‡
p‹tASSERT_IF_IN_ISR


756 
	#p‹tASSERT_IF_IN_ISR
()

	)

759 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


760 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 0

	)

763 #i‚de‡
c⁄figAPPLICATION_ALLOCATED_HEAP


764 
	#c⁄figAPPLICATION_ALLOCATED_HEAP
 0

	)

767 #i‚de‡
c⁄figUSE_TASK_NOTIFICATIONS


768 
	#c⁄figUSE_TASK_NOTIFICATIONS
 1

	)

771 #i‚de‡
p‹tTICK_TYPE_IS_ATOMIC


772 
	#p‹tTICK_TYPE_IS_ATOMIC
 0

	)

775 #i‚de‡
c⁄figSUPPORT_STATIC_ALLOCATION


777 
	#c⁄figSUPPORT_STATIC_ALLOCATION
 0

	)

780 #i‚de‡
c⁄figSUPPORT_DYNAMIC_ALLOCATION


782 
	#c⁄figSUPPORT_DYNAMIC_ALLOCATION
 1

	)

786 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

787 #if–
INCLUDE_vTaskSu•íd
 != 1 )

788 #îr‹ 
INCLUDE_vTaskSu•íd
 
mu°
 
be
 
£t
 
to
 1 
c⁄figUSE_TICKLESS_IDLE
 
is
 
nŸ
 setÅo 0

792 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 ) )

793 #îr‹ 
c⁄figSUPPORT_STATIC_ALLOCATION
 
™d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
ˇ¬Ÿ
 
bŸh
 
be
 0, 
but
 
ˇn
 both be 1.

796 #if––
c⁄figUSE_RECURSIVE_MUTEXES
 =1 ) && ( 
c⁄figUSE_MUTEXES
 != 1 ) )

797 #îr‹ 
c⁄figUSE_MUTEXES
 
mu°
 
be
 
£t
 
to
 1Åÿ
u£
 
ªcursive
 
muãxes


800 #if–
p‹tTICK_TYPE_IS_ATOMIC
 == 0 )

804 
	#p‹tTICK_TYPE_ENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

805 
	#p‹tTICK_TYPE_EXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

806 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

807 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
––x ) )

	)

811 
	#p‹tTICK_TYPE_ENTER_CRITICAL
()

	)

812 
	#p‹tTICK_TYPE_EXIT_CRITICAL
()

	)

813 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

814 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) ( Ë
	)
x

819 #i‚de‡
c⁄figENABLE_BACKWARD_COMPATIBILITY


820 
	#c⁄figENABLE_BACKWARD_COMPATIBILITY
 1

	)

823 #i‡
c⁄figENABLE_BACKWARD_COMPATIBILITY
 == 1

824 
	#eTaskSèãGë
 
eTaskGëSèã


	)

825 
	#p‹tTickTy≥
 
TickTy≥_t


	)

826 
	#xTaskH™dÀ
 
TaskH™dÀ_t


	)

827 
	#xQueueH™dÀ
 
QueueH™dÀ_t


	)

828 
	#xSem≠h‹eH™dÀ
 
Sem≠h‹eH™dÀ_t


	)

829 
	#xQueueSëH™dÀ
 
QueueSëH™dÀ_t


	)

830 
	#xQueueSëMembîH™dÀ
 
QueueSëMembîH™dÀ_t


	)

831 
	#xTimeOutTy≥
 
TimeOut_t


	)

832 
	#xMem‹yRegi⁄
 
Mem‹yRegi⁄_t


	)

833 
	#xTaskP¨amëîs
 
TaskP¨amëîs_t


	)

834 
	#xTaskSètusTy≥
 
TaskSètus_t


	)

835 
	#xTimîH™dÀ
 
TimîH™dÀ_t


	)

836 
	#xCoRoutöeH™dÀ
 
CoRoutöeH™dÀ_t


	)

837 
	#pdTASK_HOOK_CODE
 
TaskHookFun˘i⁄_t


	)

838 
	#p‹tTICK_RATE_MS
 
p‹tTICK_PERIOD_MS


	)

839 
	#pcTaskGëTaskName
 
pcTaskGëName


	)

840 
	#pcTimîGëTimîName
 
pcTimîGëName


	)

841 
	#pcQueueGëQueueName
 
pcQueueGëName


	)

842 
	#vTaskGëTaskInfo
 
vTaskGëInfo


	)

846 
	#tmrTIMER_CALLBACK
 
TimîCÆlbackFun˘i⁄_t


	)

847 
	#pdTASK_CODE
 
TaskFun˘i⁄_t


	)

848 
	#xLi°Iãm
 
Li°Iãm_t


	)

849 
	#xLi°
 
Li°_t


	)

852 #if–
c⁄figUSE_ALTERNATIVE_API
 != 0 )

853 #îr‹ 
The
 
Æã∫©ive
 
API
 
was
 
dïªˇãd
 
some
 
time
 
ago
, 
™d
 wa†
ªmoved
 
ö
 
FªeRTOS
 
V9
.0 0

860 #i‚de‡
c⁄figUSE_TASK_FPU_SUPPORT


861 
	#c⁄figUSE_TASK_FPU_SUPPORT
 1

	)

874 
	sxSTATIC_LIST_ITEM


876 
TickTy≥_t
 
xDummy1
;

877 *
pvDummy2
[ 4 ];

879 
xSTATIC_LIST_ITEM
 
	tSèticLi°Iãm_t
;

882 
	sxSTATIC_MINI_LIST_ITEM


884 
TickTy≥_t
 
xDummy1
;

885 *
pvDummy2
[ 2 ];

887 
xSTATIC_MINI_LIST_ITEM
 
	tSèticMöiLi°Iãm_t
;

890 
	sxSTATIC_LIST


892 
UBa£Ty≥_t
 
uxDummy1
;

893 *
pvDummy2
;

894 
SèticMöiLi°Iãm_t
 
xDummy3
;

895 } 
	tSèticLi°_t
;

910 
	sxSTATIC_TCB


912 *
pxDummy1
;

913 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

914 
xMPU_SETTINGS
 
xDummy2
;

916 
SèticLi°Iãm_t
 
xDummy3
[ 2 ];

917 
UBa£Ty≥_t
 
uxDummy5
;

918 *
pxDummy6
;

919 
uöt8_t
 
ucDummy7
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

920 #i‡–
p‹tSTACK_GROWTH
 > 0 )

921 *
pxDummy8
;

923 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

924 
UBa£Ty≥_t
 
uxDummy9
;

926 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

927 
UBa£Ty≥_t
 
uxDummy10
[ 2 ];

929 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

930 
UBa£Ty≥_t
 
uxDummy12
[ 2 ];

932 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

933 *
pxDummy14
;

935 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

936 *
pvDummy15
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

938 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

939 
uöt32_t
 
ulDummy16
;

941 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

942 
_ªít
 
xDummy17
;

944 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

945 
uöt32_t
 
ulDummy18
;

946 
uöt8_t
 
ucDummy19
;

948 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

949 
uöt8_t
 
uxDummy20
;

952 } 
	tSèticTask_t
;

968 
	sxSTATIC_QUEUE


970 *
pvDummy1
[ 3 ];

974 *
pvDummy2
;

975 
UBa£Ty≥_t
 
uxDummy2
;

976 } 
u
;

978 
SèticLi°_t
 
xDummy3
[ 2 ];

979 
UBa£Ty≥_t
 
uxDummy4
[ 3 ];

980 
uöt8_t
 
ucDummy5
[ 2 ];

982 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

983 
uöt8_t
 
ucDummy6
;

986 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

987 *
pvDummy7
;

990 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

991 
UBa£Ty≥_t
 
uxDummy8
;

992 
uöt8_t
 
ucDummy9
;

995 } 
	tSèticQueue_t
;

996 
SèticQueue_t
 
	tSèticSem≠h‹e_t
;

1012 
	sxSTATIC_EVENT_GROUP


1014 
TickTy≥_t
 
xDummy1
;

1015 
SèticLi°_t
 
xDummy2
;

1017 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1018 
UBa£Ty≥_t
 
uxDummy3
;

1021 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1022 
uöt8_t
 
ucDummy4
;

1025 } 
	tSèticEvítGroup_t
;

1041 
	sxSTATIC_TIMER


1043 *
pvDummy1
;

1044 
SèticLi°Iãm_t
 
xDummy2
;

1045 
TickTy≥_t
 
xDummy3
;

1046 
UBa£Ty≥_t
 
uxDummy4
;

1047 *
pvDummy5
[ 2 ];

1048 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1049 
UBa£Ty≥_t
 
uxDummy6
;

1052 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1053 
uöt8_t
 
ucDummy7
;

1056 } 
	tSèticTimî_t
;

1058 #ifde‡
__˝lu•lus


	@../libwwg/src/rtos/FreeRTOSConfig.h

70 #i‚de‡
FREERTOS_CONFIG_H


71 
	#FREERTOS_CONFIG_H


	)

88 
	#c⁄figUSE_PREEMPTION
 1

	)

89 
	#c⁄figUSE_IDLE_HOOK
 0

	)

90 
	#c⁄figUSE_TICK_HOOK
 0

	)

91 
	#c⁄figCPU_CLOCK_HZ
 ( ( Ë72000000 )

	)

93 
	#c⁄figSYSTICK_CLOCK_HZ
 ( 
c⁄figCPU_CLOCK_HZ
 / 8 )

	)

95 
	#c⁄figTICK_RATE_HZ
 ( ( 
TickTy≥_t
 ) 1000 )

	)

96 
	#c⁄figMAX_PRIORITIES
 ( 5 )

	)

97 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( Ë128 )

	)

98 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 17 * 1024 ) )

	)

99 
	#c⁄figMAX_TASK_NAME_LEN
 ( 16 )

	)

100 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

101 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

102 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

103 
	#c⁄figUSE_MUTEXES
 1

	)

104 
	#c⁄figUSE_TASK_NOTIFICATIONS
 1

	)

105 
	#c⁄figUSE_TIME_SLICING
 1

	)

106 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

109 
	#c⁄figUSE_CO_ROUTINES
 0

	)

110 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

115 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

116 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

117 
	#INCLUDE_vTaskDñëe
 1

	)

118 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

119 
	#INCLUDE_vTaskSu•íd
 1

	)

120 
	#INCLUDE_vTaskDñayU¡û
 1

	)

121 
	#INCLUDE_vTaskDñay
 1

	)

125 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

128 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 191

	)

135 
	#c⁄figLIBRARY_KERNEL_INTERRUPT_PRIORITY
 15

	)

	@../libwwg/src/rtos/StackMacros.h

70 #i‚de‡
STACK_MACROS_H


71 
	#STACK_MACROS_H


	)

89 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

92 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

95 if–
pxCuºítTCB
->
pxT›OfSèck
 <pxCuºítTCB->
pxSèck
 ) \

97 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

99 }

	)

104 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

107 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

111 if–
pxCuºítTCB
->
pxT›OfSèck
 >pxCuºítTCB->
pxEndOfSèck
 ) \

113 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

115 }

	)

120 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

122 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

124 c⁄° 
uöt32_t
 * c⁄° 
pulSèck
 = ( uöt32_à* ) 
pxCuºítTCB
->
pxSèck
; \

125 c⁄° 
uöt32_t
 
ulCheckVÆue
 = ( uint32_t ) 0xa5a5a5a5; \

127 if––
pulSèck
[ 0 ] !
ulCheckVÆue
 ) || \

128 –
pulSèck
[ 1 ] !
ulCheckVÆue
 ) || \

129 –
pulSèck
[ 2 ] !
ulCheckVÆue
 ) || \

130 –
pulSèck
[ 3 ] !
ulCheckVÆue
 ) ) \

132 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

134 }

	)

139 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

141 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

143 
öt8_t
 *
pcEndOfSèck
 = ( i¡8_à* ) 
pxCuºítTCB
->
pxEndOfSèck
; \

144 c⁄° 
uöt8_t
 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

145 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

146 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

147 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

148 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

151 
pcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

154 if–
	`memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

156 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

158 }

	)

164 #i‚de‡
èskCHECK_FOR_STACK_OVERFLOW


165 
	#èskCHECK_FOR_STACK_OVERFLOW
()

	)

	@../libwwg/src/rtos/croutine.h

70 #i‚de‡
CO_ROUTINE_H


71 
	#CO_ROUTINE_H


	)

73 #i‚de‡
INC_FREERTOS_H


77 
	~"li°.h
"

79 #ifde‡
__˝lu•lus


86 * 
	tCoRoutöeH™dÀ_t
;

89 (*
¸COROUTINE_CODE
)–
	tCoRoutöeH™dÀ_t
, 
	tUBa£Ty≥_t
 );

91 
	sc‹CoRoutöeC⁄åﬁBlock


93 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

94 
Li°Iãm_t
 
xGíîicLi°Iãm
;

95 
Li°Iãm_t
 
xEvítLi°Iãm
;

96 
UBa£Ty≥_t
 
uxPri‹ôy
;

97 
UBa£Ty≥_t
 
uxIndex
;

98 
uöt16_t
 
uxSèã
;

99 } 
	tCRCB_t
;

173 
Ba£Ty≥_t
 
xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
UBa£Ty≥_t
 
uxPri‹ôy
, UBa£Ty≥_à
uxIndex
 );

215 
vCoRoutöeScheduÀ
( );

246 
	#¸START
–
pxCRCB
 )  ( ( 
CRCB_t
 * )–pxCRCB ) )->
uxSèã
 ) { 0:

	)

277 
	#¸END
(Ë}

	)

283 
	#¸SET_STATE0
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = (
__LINE__
 * 2); ; (__LINE__ * 2):

	)

284 
	#¸SET_STATE1
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = ((
__LINE__
 * 2)+1); ; ((__LINE__ * 2)+1):

	)

332 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

333 if––
xTicksToDñay
 ) > 0 ) \

335 
	`vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

337 
	`¸SET_STATE0
––
xH™dÀ
 ) );

	)

422 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

424 *–
pxResu…
 ) = 
	`xQueueCRSíd
––
pxQueue
Ë, ( 
pvIãmToQueue
Ë, ( 
xTicksToWaô
 ) ); \

425 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

427 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

428 *
pxResu…
 = 
	`xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

430 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

432 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

433 *
pxResu…
 = 
pdPASS
; \

435 }

	)

514 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

516 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

517 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

519 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

520 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), 0 ); \

522 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

524 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

525 *–
pxResu…
 ) = 
pdPASS
; \

527 }

	)

623 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) 
	`xQueueCRSídFromISR
––pxQueuê), (ÖvIãmToQueuê), ( xCoRoutöePªviou¶yWokí ) )

	)

736 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) 
	`xQueueCRRe˚iveFromISR
––pxQueuê), (ÖvBuf„∏), (ÖxCoRoutöeWokí ) )

	)

747 
vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
, 
Li°_t
 *
pxEvítLi°
 );

756 
Ba£Ty≥_t
 
xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 *
pxEvítLi°
 );

758 #ifde‡
__˝lu•lus


	@../libwwg/src/rtos/deprecated_definitions.h

70 #i‚de‡
DEPRECATED_DEFINITIONS_H


71 
	#DEPRECATED_DEFINITIONS_H


	)

83 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


84 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

85 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

88 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


89 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

90 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

93 #ifde‡
GCC_MEGA_AVR


94 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

97 #ifde‡
IAR_MEGA_AVR


98 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

101 #ifde‡
MPLAB_PIC24_PORT


102 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

105 #ifde‡
MPLAB_DSPIC_PORT


106 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

109 #ifde‡
MPLAB_PIC18F_PORT


110 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC18F/p‹tma¸o.h
"

113 #ifde‡
MPLAB_PIC32MX_PORT


114 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC32MX/p‹tma¸o.h
"

117 #ifde‡
_FEDPICC


118 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

121 #ifde‡
SDCC_CYGNAL


122 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

125 #ifde‡
GCC_ARM7


126 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

129 #ifde‡
GCC_ARM7_ECLIPSE


130 
	~"p‹tma¸o.h
"

133 #ifde‡
ROWLEY_LPC23xx


134 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

137 #ifde‡
IAR_MSP430


138 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

141 #ifde‡
GCC_MSP430


142 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

145 #ifde‡
ROWLEY_MSP430


146 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

149 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


150 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

153 #ifde‡
SAM7_GCC


154 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

157 #ifde‡
SAM7_IAR


158 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

161 #ifde‡
SAM9XE_IAR


162 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

165 #ifde‡
LPC2000_IAR


166 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

169 #ifde‡
STR71X_IAR


170 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

173 #ifde‡
STR75X_IAR


174 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

177 #ifde‡
STR75X_GCC


178 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

181 #ifde‡
STR91X_IAR


182 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

185 #ifde‡
GCC_H8S


186 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

189 #ifde‡
GCC_AT91FR40008


190 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

193 #ifde‡
RVDS_ARMCM3_LM3S102


194 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

197 #ifde‡
GCC_ARMCM3_LM3S102


198 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

201 #ifde‡
GCC_ARMCM3


202 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

205 #ifde‡
IAR_ARM_CM3


206 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

209 #ifde‡
IAR_ARMCM3_LM


210 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

213 #ifde‡
HCS12_CODE_WARRIOR


214 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

217 #ifde‡
MICROBLAZE_GCC


218 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

221 #ifde‡
TERN_EE


222 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

225 #ifde‡
GCC_HCS12


226 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

229 #ifde‡
GCC_MCF5235


230 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

233 #ifde‡
COLDFIRE_V2_GCC


234 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

237 #ifde‡
COLDFIRE_V2_CODEWARRIOR


238 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

241 #ifde‡
GCC_PPC405


242 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

245 #ifde‡
GCC_PPC440


246 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

249 #ifde‡
_16FX_SOFTUNE


250 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

253 #ifde‡
BCC_INDUSTRIAL_PC_PORT


256 
	~"‰c⁄fig.h
"

257 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

258 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

261 #ifde‡
BCC_FLASH_LITE_186_PORT


264 
	~"‰c⁄fig.h
"

265 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

266 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

269 #ifde‡
__GNUC__


270 #ifde‡
__AVR32_AVR32A__


271 
	~"p‹tma¸o.h
"

275 #ifde‡
__ICCAVR32__


276 #ifde‡
__CORE__


277 #i‡
__CORE__
 =
__AVR32A__


278 
	~"p‹tma¸o.h
"

283 #ifde‡
__91467D


284 
	~"p‹tma¸o.h
"

287 #ifde‡
__96340


288 
	~"p‹tma¸o.h
"

292 #ifde‡
__IAR_V850ES_Fx3__


293 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

296 #ifde‡
__IAR_V850ES_Jx3__


297 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

300 #ifde‡
__IAR_V850ES_Jx3_L__


301 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

304 #ifde‡
__IAR_V850ES_Jx2__


305 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

308 #ifde‡
__IAR_V850ES_Hx2__


309 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

312 #ifde‡
__IAR_78K0R_Kx3__


313 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

316 #ifde‡
__IAR_78K0R_Kx3L__


317 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

	@../libwwg/src/rtos/event_groups.h

70 #i‚de‡
EVENT_GROUPS_H


71 
	#EVENT_GROUPS_H


	)

73 #i‚de‡
INC_FREERTOS_H


74 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "includeÉvent_groups.h"

78 
	~"timîs.h
"

80 #ifde‡
__˝lu•lus


123 * 
	tEvítGroupH™dÀ_t
;

133 
TickTy≥_t
 
	tEvítBôs_t
;

187 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

188 
EvítGroupH™dÀ_t
 
xEvítGroupCª©e
–Ë
PRIVILEGED_FUNCTION
;

240 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

241 
EvítGroupH™dÀ_t
 
xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 ) 
PRIVILEGED_FUNCTION
;

336 
EvítBôs_t
 
xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

393 
EvítBôs_t
 
xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

448 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

449 
Ba£Ty≥_t
 
xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

451 
	#xEvítGroupCÀ¨BôsFromISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToCÀ¨, 
NULL
 )

	)

526 
EvítBôs_t
 
xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

600 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

601 
Ba£Ty≥_t
 
xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

603 
	#xEvítGroupSëBôsFromISR
–
xEvítGroup
, 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToSë,ÖxHighîPri‹ôyTaskWokí )

	)

730 
EvítBôs_t
 
xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

749 
	#xEvítGroupGëBôs
–
xEvítGroup
 ) 
	`xEvítGroupCÀ¨Bôs
–xEvítGroup, 0 )

	)

766 
EvítBôs_t
 
xEvítGroupGëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

780 
vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

783 
vEvítGroupSëBôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

784 
vEvítGroupCÀ¨BôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

787 #i‡(
c⁄figUSE_TRACE_FACILITY
 == 1)

788 
UBa£Ty≥_t
 
uxEvítGroupGëNumbî
–* 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

791 #ifde‡
__˝lu•lus


	@../libwwg/src/rtos/list.h

98 #i‚de‡
INC_FREERTOS_H


99 #îr‹ 
FªeRTOS
.
h
 
mu°
 
be
 
ö˛uded
 
bef‹e
 
li°
.h

102 #i‚de‡
LIST_H


103 
	#LIST_H


	)

133 #i‚de‡
c⁄figLIST_VOLATILE


134 
	#c⁄figLIST_VOLATILE


	)

137 #ifde‡
__˝lu•lus


146 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 0 )

148 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

149 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

150 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE


	)

151 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE


	)

152 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

153 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

154 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 )

	)

155 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 )

	)

156 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 )

	)

157 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 )

	)

160 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue1
;

	)

161 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue2
;

	)

162 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue1
;

	)

163 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue2
;

	)

166 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

167 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

168 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

169 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

173 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 ) 
	`c⁄figASSERT
–––pxIãm )->
xLi°IãmI¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

174 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 ) 
	`c⁄figASSERT
–––pxLi° )->
xLi°I¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxLi° )->
xLi°I¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

181 
	sxLIST_ITEM


183 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


184 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

185 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

186 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

187 * 
	gpvOw√r
;

188 * 
c⁄figLIST_VOLATILE
 
	gpvC⁄èöî
;

189 
	gli°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


191 
xLIST_ITEM
 
	tLi°Iãm_t
;

193 
	sxMINI_LIST_ITEM


195 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


196 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

197 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

198 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

200 
xMINI_LIST_ITEM
 
	tMöiLi°Iãm_t
;

205 
	sxLIST


207 
li°FIRST_LIST_INTEGRITY_CHECK_VALUE


208 
c⁄figLIST_VOLATILE
 
UBa£Ty≥_t
 
	guxNumbîOfIãms
;

209 
Li°Iãm_t
 * 
c⁄figLIST_VOLATILE
 
	gpxIndex
;

210 
MöiLi°Iãm_t
 
	gxLi°End
;

211 
	gli°SECOND_LIST_INTEGRITY_CHECK_VALUE


212 } 
	tLi°_t
;

221 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) ( (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏Ë)

	)

230 
	#li°GET_LIST_ITEM_OWNER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvOw√r
 )

	)

239 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuêË)

	)

249 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

258 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
->
xIãmVÆue
 )

	)

266 
	#li°GET_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
 )

	)

274 
	#li°GET_NEXT
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxNext
 )

	)

282 
	#li°GET_END_MARKER
–
pxLi°
 ) ( ( 
Li°Iãm_t
 c⁄° * ) ( &––pxLi° )->
xLi°End
 ) ) )

	)

291 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 =–
UBa£Ty≥_t
 ) 0 ) )

	)

296 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

318 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

320 
Li°_t
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

323 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

324 if––* ) ( 
pxC⁄°Li°
 )->
pxIndex
 =–* ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

326 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

328 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

329 }

	)

348 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
pvOw√r
 )

	)

359 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 =–* ) (ÖxLi° ) ) )

	)

367 
	#li°LIST_ITEM_CONTAINER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 )

	)

374 
	#li°LIST_IS_INITIALISED
–
pxLi°
 ) ( (ÖxLi° )->
xLi°End
.
xIãmVÆue
 =
p‹tMAX_DELAY
 )

	)

386 
vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 ) 
	gPRIVILEGED_FUNCTION
;

397 
vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 ) 
	gPRIVILEGED_FUNCTION
;

410 
vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

431 
vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

446 
UBa£Ty≥_t
 
uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 ) 
	gPRIVILEGED_FUNCTION
;

448 #ifde‡
__˝lu•lus


	@../libwwg/src/rtos/mpu_prototypes.h

79 #i‚de‡
MPU_PROTOTYPES_H


80 
	#MPU_PROTOTYPES_H


	)

83 
Ba£Ty≥_t
 
MPU_xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt16_t
 
usSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 );

84 
TaskH™dÀ_t
 
MPU_xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt32_t
 
ulSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
, 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 );

85 
Ba£Ty≥_t
 
MPU_xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 );

86 
MPU_vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 );

87 
MPU_vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 );

88 
MPU_vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 );

89 
MPU_vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 );

90 
Ba£Ty≥_t
 
MPU_xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 );

91 
UBa£Ty≥_t
 
MPU_uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 );

92 
eTaskSèã
 
MPU_eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 );

93 
MPU_vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 );

94 
MPU_vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 );

95 
MPU_vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 );

96 
MPU_vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 );

97 
MPU_vTaskSèπScheduÀr
( );

98 
MPU_vTaskSu•ídAŒ
( );

99 
Ba£Ty≥_t
 
MPU_xTaskResumeAŒ
( );

100 
TickTy≥_t
 
MPU_xTaskGëTickCou¡
( );

101 
UBa£Ty≥_t
 
MPU_uxTaskGëNumbîOfTasks
( );

102 * 
MPU_pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 );

103 
TaskH™dÀ_t
 
MPU_xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 );

104 
UBa£Ty≥_t
 
MPU_uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 );

105 
MPU_vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 );

106 
TaskHookFun˘i⁄_t
 
MPU_xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 );

107 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 );

108 * 
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 );

109 
Ba£Ty≥_t
 
MPU_xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 );

110 
TaskH™dÀ_t
 
MPU_xTaskGëIdÀTaskH™dÀ
( );

111 
UBa£Ty≥_t
 
MPU_uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 );

112 
MPU_vTaskLi°
–* 
pcWrôeBuf„r
 );

113 
MPU_vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 );

114 
Ba£Ty≥_t
 
MPU_xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 );

115 
Ba£Ty≥_t
 
MPU_xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 );

116 
uöt32_t
 
MPU_ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 );

117 
Ba£Ty≥_t
 
MPU_xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 );

118 
Ba£Ty≥_t
 
MPU_xTaskIn¸emítTick
( );

119 
TaskH™dÀ_t
 
MPU_xTaskGëCuºítTaskH™dÀ
( );

120 
MPU_vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 );

121 
Ba£Ty≥_t
 
MPU_xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 );

122 
MPU_vTaskMis£dYõld
( );

123 
Ba£Ty≥_t
 
MPU_xTaskGëScheduÀrSèã
( );

126 
Ba£Ty≥_t
 
MPU_xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 );

127 
Ba£Ty≥_t
 
MPU_xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xJu°Pìk
 );

128 
UBa£Ty≥_t
 
MPU_uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 );

129 
UBa£Ty≥_t
 
MPU_uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 );

130 
MPU_vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 );

131 
QueueH™dÀ_t
 
MPU_xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 );

132 
QueueH™dÀ_t
 
MPU_xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 );

133 
QueueH™dÀ_t
 
MPU_xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 );

134 
QueueH™dÀ_t
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 );

135 * 
MPU_xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 );

136 
Ba£Ty≥_t
 
MPU_xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 );

137 
Ba£Ty≥_t
 
MPU_xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
pxMuãx
 );

138 
MPU_vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
 );

139 
MPU_vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 );

140 c⁄° * 
MPU_pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 );

141 
QueueH™dÀ_t
 
MPU_xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 );

142 
QueueH™dÀ_t
 
MPU_xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 );

143 
QueueSëH™dÀ_t
 
MPU_xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 );

144 
Ba£Ty≥_t
 
MPU_xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 );

145 
Ba£Ty≥_t
 
MPU_xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 );

146 
QueueSëMembîH™dÀ_t
 
MPU_xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 );

147 
Ba£Ty≥_t
 
MPU_xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
 );

148 
MPU_vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 );

149 
UBa£Ty≥_t
 
MPU_uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 );

150 
uöt8_t
 
MPU_ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 );

153 
TimîH™dÀ_t
 
MPU_xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 );

154 
TimîH™dÀ_t
 
MPU_xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
, 
SèticTimî_t
 *
pxTimîBuf„r
 );

155 * 
MPU_pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 );

156 
MPU_vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 );

157 
Ba£Ty≥_t
 
MPU_xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 );

158 
TaskH™dÀ_t
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ
( );

159 
Ba£Ty≥_t
 
MPU_xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 );

160 c⁄° * 
MPU_pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 );

161 
TickTy≥_t
 
MPU_xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 );

162 
TickTy≥_t
 
MPU_xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 );

163 
Ba£Ty≥_t
 
MPU_xTimîCª©eTimîTask
( );

164 
Ba£Ty≥_t
 
MPU_xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 );

167 
EvítGroupH™dÀ_t
 
MPU_xEvítGroupCª©e
( );

168 
EvítGroupH™dÀ_t
 
MPU_xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 );

169 
EvítBôs_t
 
MPU_xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 );

170 
EvítBôs_t
 
MPU_xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
 );

171 
EvítBôs_t
 
MPU_xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
 );

172 
EvítBôs_t
 
MPU_xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 );

173 
MPU_vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 );

174 
UBa£Ty≥_t
 
MPU_uxEvítGroupGëNumbî
–* 
xEvítGroup
 );

	@../libwwg/src/rtos/mpu_wrappers.h

70 #i‚de‡
MPU_WRAPPERS_H


71 
	#MPU_WRAPPERS_H


	)

75 #ifde‡
p‹tUSING_MPU_WRAPPERS


80 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


91 
	#xTaskCª©e
 
MPU_xTaskCª©e


	)

92 
	#xTaskCª©eSètic
 
MPU_xTaskCª©eSètic


	)

93 
	#xTaskCª©eRe°ri˘ed
 
MPU_xTaskCª©eRe°ri˘ed


	)

94 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

95 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

96 
	#vTaskDñay
 
MPU_vTaskDñay


	)

97 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

98 
	#xTaskAb‹tDñay
 
MPU_xTaskAb‹tDñay


	)

99 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

100 
	#eTaskGëSèã
 
MPU_eTaskGëSèã


	)

101 
	#vTaskGëInfo
 
MPU_vTaskGëInfo


	)

102 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

103 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

104 
	#vTaskResume
 
MPU_vTaskResume


	)

105 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

106 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

107 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

108 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

109 
	#pcTaskGëName
 
MPU_pcTaskGëName


	)

110 
	#xTaskGëH™dÀ
 
MPU_xTaskGëH™dÀ


	)

111 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

112 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

113 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

114 
	#vTaskSëThªadLoˇlSt‹agePoöãr
 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr


	)

115 
	#pvTaskGëThªadLoˇlSt‹agePoöãr
 
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr


	)

116 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

117 
	#xTaskGëIdÀTaskH™dÀ
 
MPU_xTaskGëIdÀTaskH™dÀ


	)

118 
	#uxTaskGëSy°emSèã
 
MPU_uxTaskGëSy°emSèã


	)

119 
	#vTaskLi°
 
MPU_vTaskLi°


	)

120 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

121 
	#xTaskGíîicNŸify
 
MPU_xTaskGíîicNŸify


	)

122 
	#xTaskNŸifyWaô
 
MPU_xTaskNŸifyWaô


	)

123 
	#ulTaskNŸifyTake
 
MPU_ulTaskNŸifyTake


	)

124 
	#xTaskNŸifySèãCÀ¨
 
MPU_xTaskNŸifySèãCÀ¨


	)

126 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

127 
	#vTaskSëTimeOutSèã
 
MPU_vTaskSëTimeOutSèã


	)

128 
	#xTaskCheckF‹TimeOut
 
MPU_xTaskCheckF‹TimeOut


	)

129 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

132 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

133 
	#xQueueGíîicRe˚ive
 
MPU_xQueueGíîicRe˚ive


	)

134 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

135 
	#uxQueueS∑˚sAvaûabÀ
 
MPU_uxQueueS∑˚sAvaûabÀ


	)

136 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

137 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

138 
	#xQueueCª©eMuãxSètic
 
MPU_xQueueCª©eMuãxSètic


	)

139 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

140 
	#xQueueCª©eCou¡ögSem≠h‹eSètic
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic


	)

141 
	#xQueueGëMuãxHﬁdî
 
MPU_xQueueGëMuãxHﬁdî


	)

142 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

143 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

144 
	#xQueueGíîicCª©e
 
MPU_xQueueGíîicCª©e


	)

145 
	#xQueueGíîicCª©eSètic
 
MPU_xQueueGíîicCª©eSètic


	)

146 
	#xQueueCª©eSë
 
MPU_xQueueCª©eSë


	)

147 
	#xQueueAddToSë
 
MPU_xQueueAddToSë


	)

148 
	#xQueueRemoveFromSë
 
MPU_xQueueRemoveFromSë


	)

149 
	#xQueueSñe˘FromSë
 
MPU_xQueueSñe˘FromSë


	)

150 
	#xQueueGíîicRe£t
 
MPU_xQueueGíîicRe£t


	)

152 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

153 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

154 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

155 
	#pcQueueGëName
 
MPU_pcQueueGëName


	)

159 
	#xTimîCª©e
 
MPU_xTimîCª©e


	)

160 
	#xTimîCª©eSètic
 
MPU_xTimîCª©eSètic


	)

161 
	#pvTimîGëTimîID
 
MPU_pvTimîGëTimîID


	)

162 
	#vTimîSëTimîID
 
MPU_vTimîSëTimîID


	)

163 
	#xTimîIsTimîA˘ive
 
MPU_xTimîIsTimîA˘ive


	)

164 
	#xTimîGëTimîD´m⁄TaskH™dÀ
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ


	)

165 
	#xTimîPídFun˘i⁄CÆl
 
MPU_xTimîPídFun˘i⁄CÆl


	)

166 
	#pcTimîGëName
 
MPU_pcTimîGëName


	)

167 
	#xTimîGëPîiod
 
MPU_xTimîGëPîiod


	)

168 
	#xTimîGëExpúyTime
 
MPU_xTimîGëExpúyTime


	)

169 
	#xTimîGíîicComm™d
 
MPU_xTimîGíîicComm™d


	)

172 
	#xEvítGroupCª©e
 
MPU_xEvítGroupCª©e


	)

173 
	#xEvítGroupCª©eSètic
 
MPU_xEvítGroupCª©eSètic


	)

174 
	#xEvítGroupWaôBôs
 
MPU_xEvítGroupWaôBôs


	)

175 
	#xEvítGroupCÀ¨Bôs
 
MPU_xEvítGroupCÀ¨Bôs


	)

176 
	#xEvítGroupSëBôs
 
MPU_xEvítGroupSëBôs


	)

177 
	#xEvítGroupSync
 
MPU_xEvítGroupSync


	)

178 
	#vEvítGroupDñëe
 
MPU_vEvítGroupDñëe


	)

181 
	#PRIVILEGED_FUNCTION


	)

186 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_fun˘i⁄s")))

	)

187 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

193 
	#PRIVILEGED_FUNCTION


	)

194 
	#PRIVILEGED_DATA


	)

195 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@../libwwg/src/rtos/portable.h

74 #i‚de‡
PORTABLE_H


75 
	#PORTABLE_H


	)

87 
	~"dïªˇãd_deföôi⁄s.h
"

93 #i‚de‡
p‹tENTER_CRITICAL


94 
	~"p‹tma¸o.h
"

97 #i‡
p‹tBYTE_ALIGNMENT
 == 32

98 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x001‡)

	)

101 #i‡
p‹tBYTE_ALIGNMENT
 == 16

102 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x000‡)

	)

105 #i‡
p‹tBYTE_ALIGNMENT
 == 8

106 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

109 #i‡
p‹tBYTE_ALIGNMENT
 == 4

110 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

113 #i‡
p‹tBYTE_ALIGNMENT
 == 2

114 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

117 #i‡
p‹tBYTE_ALIGNMENT
 == 1

118 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

121 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


125 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


126 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

129 #ifde‡
__˝lu•lus


133 
	~"mpu_wøµîs.h
"

141 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

142 
SèckTy≥_t
 *
pxP‹tInôüli£Sèck
–SèckTy≥_à*
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
, 
Ba£Ty≥_t
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

144 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

148 
	sHópRegi⁄


150 
uöt8_t
 *
pucSèπAddªss
;

151 
size_t
 
xSizeInByãs
;

152 } 
	tHópRegi⁄_t
;

165 
	`vP‹tDeföeHópRegi⁄s
–c⁄° 
HópRegi⁄_t
 * c⁄° 
pxHópRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

171 *
	`pvP‹tMÆloc
–
size_t
 
xSize
 ) 
PRIVILEGED_FUNCTION
;

172 
	`vP‹tFªe
–*
pv
 ) 
PRIVILEGED_FUNCTION
;

173 
	`vP‹tInôüli£Blocks
–Ë
PRIVILEGED_FUNCTION
;

174 
size_t
 
	`xP‹tGëFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

175 
size_t
 
	`xP‹tGëMöimumEvîFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

181 
Ba£Ty≥_t
 
	`xP‹tSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

188 
	`vP‹tEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

197 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

198 
xMEMORY_REGION
;

199 
	`vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
SèckTy≥_t
 *
pxBŸtomOfSèck
, 
uöt32_t
 
ulSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

202 #ifde‡
__˝lu•lus


203 
	}
}

	@../libwwg/src/rtos/portmacro.h

71 #i‚de‡
PORTMACRO_H


72 
	#PORTMACRO_H


	)

74 #ifde‡
__˝lu•lus


89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

95 
	#p‹tBASE_TYPE
 

	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
	#p‹tTICK_TYPE_IS_ATOMIC
 1

	)

115 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

116 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

117 
	#p‹tBYTE_ALIGNMENT
 8

	)

121 
	#p‹tYIELD
() \

124 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
; \

128 
__asm
 volatile( "dsb" ); \

129 
__asm
 volatile( "isb" ); \

130 }

	)

132 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

133 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

134 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

135 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

139 
vP‹tE¡îCrôiˇl
( );

140 
vP‹tExôCrôiˇl
( );

141 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tRai£BASEPRI
()

	)

142 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tSëBASEPRI
(x)

	)

143 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tRai£BASEPRI
()

	)

144 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tSëBASEPRI
(0)

	)

145 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

146 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

153 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

154 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

158 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


159 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

160 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

165 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


166 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

169 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

172 
__©åibuã__
––
Æways_ölöe
 ) ) 
ölöe
 
uöt8_t
 
ucP‹tCou¡LódögZîos
–
uöt32_t
 
ulBôm≠
 )

174 
uöt8_t
 
	gucRëu∫
;

176 
__asm
 vﬁ©ûê–"˛z %0, %1" : "Ù" ( 
ucRëu∫
 ) : "r" ( 
ulBôm≠
 ) );

177  
	gucRëu∫
;

181 #if–
c⁄figMAX_PRIORITIES
 > 32 )

182 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

186 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

187 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

191 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31UL - ( 
uöt32_t
 ) 
	`ucP‹tCou¡LódögZîos
––uxRódyPri‹ôõ†ËË)

	)

197 #ifde‡
c⁄figASSERT


198 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

199 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

203 
	#p‹tNOP
()

	)

205 
	#p‹tINLINE
 
__ölöe


	)

207 #i‚de‡
p‹tFORCE_INLINE


208 
	#p‹tFORCE_INLINE
 
ölöe
 
	`__©åibuã__
(–
Æways_ölöe
))

	)

211 
p‹tFORCE_INLINE
 
Ba£Ty≥_t
 
xP‹tIsInsideI¡îru±
( )

213 
uöt32_t
 
	gulCuºítI¡îru±
;

214 
Ba£Ty≥_t
 
	gxRëu∫
;

217 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) );

219 if–
	gulCuºítI¡îru±
 == 0 )

221 
xRëu∫
 = 
pdFALSE
;

225 
	gxRëu∫
 = 
pdTRUE
;

228  
	gxRëu∫
;

233 
p‹tFORCE_INLINE
 
vP‹tRai£BASEPRI
( )

235 
uöt32_t
 
	gulNewBASEPRI
;

237 
__asm
 volatile

243 :"Ù" (
ulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

249 
p‹tFORCE_INLINE
 
uöt32_t
 
ulP‹tRai£BASEPRI
( )

251 
uöt32_t
 
	gulOrigöÆBASEPRI
, 
	gulNewBASEPRI
;

253 
__asm
 volatile

260 :"Ù" (
ulOrigöÆBASEPRI
), "Ù" (
	gulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

265  
	gulOrigöÆBASEPRI
;

269 
p‹tFORCE_INLINE
 
vP‹tSëBASEPRI
–
uöt32_t
 
ulNewMaskVÆue
 )

271 
__asm
 volatile

273 " m§ ba£¥i, %0 " :: "r" ( 
ulNewMaskVÆue
 )

279 #ifde‡
__˝lu•lus


	@../libwwg/src/rtos/projdefs.h

70 #i‚de‡
PROJDEFS_H


71 
	#PROJDEFS_H


	)

77 (*
	tTaskFun˘i⁄_t
)( * );

82 #i‚de‡
pdMS_TO_TICKS


83 
	#pdMS_TO_TICKS
–
xTimeInMs
 ) ( ( 
TickTy≥_t
 ) ( ( ( TickTy≥_àË–xTimeInM†Ë* ( TickTy≥_àË
c⁄figTICK_RATE_HZ
 ) / ( TickTy≥_àË1000 ) )

	)

86 
	#pdFALSE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

87 
	#pdTRUE
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

89 
	#pdPASS
 ( 
pdTRUE
 )

	)

90 
	#pdFAIL
 ( 
pdFALSE
 )

	)

91 
	#îrQUEUE_EMPTY
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

92 
	#îrQUEUE_FULL
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

95 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

96 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

97 
	#îrQUEUE_YIELD
 ( -5 )

	)

100 #i‚de‡
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES


101 
	#c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 0

	)

104 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

105 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a

	)

107 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a5a5aUL

	)

112 
	#pdFREERTOS_ERRNO_NONE
 0

	)

113 
	#pdFREERTOS_ERRNO_ENOENT
 2

	)

114 
	#pdFREERTOS_ERRNO_EINTR
 4

	)

115 
	#pdFREERTOS_ERRNO_EIO
 5

	)

116 
	#pdFREERTOS_ERRNO_ENXIO
 6

	)

117 
	#pdFREERTOS_ERRNO_EBADF
 9

	)

118 
	#pdFREERTOS_ERRNO_EAGAIN
 11

	)

119 
	#pdFREERTOS_ERRNO_EWOULDBLOCK
 11

	)

120 
	#pdFREERTOS_ERRNO_ENOMEM
 12

	)

121 
	#pdFREERTOS_ERRNO_EACCES
 13

	)

122 
	#pdFREERTOS_ERRNO_EFAULT
 14

	)

123 
	#pdFREERTOS_ERRNO_EBUSY
 16

	)

124 
	#pdFREERTOS_ERRNO_EEXIST
 17

	)

125 
	#pdFREERTOS_ERRNO_EXDEV
 18

	)

126 
	#pdFREERTOS_ERRNO_ENODEV
 19

	)

127 
	#pdFREERTOS_ERRNO_ENOTDIR
 20

	)

128 
	#pdFREERTOS_ERRNO_EISDIR
 21

	)

129 
	#pdFREERTOS_ERRNO_EINVAL
 22

	)

130 
	#pdFREERTOS_ERRNO_ENOSPC
 28

	)

131 
	#pdFREERTOS_ERRNO_ESPIPE
 29

	)

132 
	#pdFREERTOS_ERRNO_EROFS
 30

	)

133 
	#pdFREERTOS_ERRNO_EUNATCH
 42

	)

134 
	#pdFREERTOS_ERRNO_EBADE
 50

	)

135 
	#pdFREERTOS_ERRNO_EFTYPE
 79

	)

136 
	#pdFREERTOS_ERRNO_ENMFILE
 89

	)

137 
	#pdFREERTOS_ERRNO_ENOTEMPTY
 90

	)

138 
	#pdFREERTOS_ERRNO_ENAMETOOLONG
 91

	)

139 
	#pdFREERTOS_ERRNO_EOPNOTSUPP
 95

	)

140 
	#pdFREERTOS_ERRNO_ENOBUFS
 105

	)

141 
	#pdFREERTOS_ERRNO_ENOPROTOOPT
 109

	)

142 
	#pdFREERTOS_ERRNO_EADDRINUSE
 112

	)

143 
	#pdFREERTOS_ERRNO_ETIMEDOUT
 116

	)

144 
	#pdFREERTOS_ERRNO_EINPROGRESS
 119

	)

145 
	#pdFREERTOS_ERRNO_EALREADY
 120

	)

146 
	#pdFREERTOS_ERRNO_EADDRNOTAVAIL
 125

	)

147 
	#pdFREERTOS_ERRNO_EISCONN
 127

	)

148 
	#pdFREERTOS_ERRNO_ENOTCONN
 128

	)

149 
	#pdFREERTOS_ERRNO_ENOMEDIUM
 135

	)

150 
	#pdFREERTOS_ERRNO_EILSEQ
 138

	)

151 
	#pdFREERTOS_ERRNO_ECANCELED
 140

	)

155 
	#pdFREERTOS_LITTLE_ENDIAN
 0

	)

156 
	#pdFREERTOS_BIG_ENDIAN
 1

	)

	@../libwwg/src/rtos/queue.h

71 #i‚de‡
QUEUE_H


72 
	#QUEUE_H


	)

74 #i‚de‡
INC_FREERTOS_H


75 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include queue.h"

78 #ifde‡
__˝lu•lus


88 * 
	tQueueH™dÀ_t
;

95 * 
	tQueueSëH™dÀ_t
;

102 * 
	tQueueSëMembîH™dÀ_t
;

105 
	#queueSEND_TO_BACK
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

106 
	#queueSEND_TO_FRONT
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

107 
	#queueOVERWRITE
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

110 
	#queueQUEUE_TYPE_BASE
 ( ( 
uöt8_t
 ) 0U )

	)

111 
	#queueQUEUE_TYPE_SET
 ( ( 
uöt8_t
 ) 0U )

	)

112 
	#queueQUEUE_TYPE_MUTEX
 ( ( 
uöt8_t
 ) 1U )

	)

113 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( ( 
uöt8_t
 ) 2U )

	)

114 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( ( 
uöt8_t
 ) 3U )

	)

115 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( ( 
uöt8_t
 ) 4U )

	)

185 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

186 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
––uxQueueLígth ), ( uxIãmSizê), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

271 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

272 
	#xQueueCª©eSètic
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
pxQueueBuf„r
 ) 
	`xQueueGíîicCª©eSètic
––uxQueueLígth ), ( uxIãmSizê), (ÖucQueueSt‹agê), (ÖxQueueBuf„∏), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

355 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

437 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

521 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

604 
	#xQueueOvîwrôe
–
xQueue
, 
pvIãmToQueue
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), 0, 
queueOVERWRITE
 )

	)

692 
Ba£Ty≥_t
 
xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

788 
	#xQueuePìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

821 
Ba£Ty≥_t
 
xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

914 
	#xQueueRe˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

1013 
Ba£Ty≥_t
 
xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xJu°Pìk
 ) 
PRIVILEGED_FUNCTION
;

1028 
UBa£Ty≥_t
 
uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1045 
UBa£Ty≥_t
 
uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1059 
vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1129 
	#xQueueSídToFr⁄tFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_FRONT
 )

	)

1200 
	#xQueueSídToBackFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1287 
	#xQueueOvîwrôeFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueOVERWRITE
 )

	)

1361 
	#xQueueSídFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1440 
Ba£Ty≥_t
 
xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

1441 
Ba£Ty≥_t
 
xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1530 
Ba£Ty≥_t
 
xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1536 
Ba£Ty≥_t
 
xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1537 
Ba£Ty≥_t
 
xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1538 
UBa£Ty≥_t
 
uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1549 
Ba£Ty≥_t
 
xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, Ba£Ty≥_à
xCoRoutöePªviou¶yWokí
 );

1550 
Ba£Ty≥_t
 
xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, Ba£Ty≥_à*
pxTaskWokí
 );

1551 
Ba£Ty≥_t
 
xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 );

1552 
Ba£Ty≥_t
 
xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 );

1559 
QueueH™dÀ_t
 
xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1560 
QueueH™dÀ_t
 
xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1561 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 ) 
PRIVILEGED_FUNCTION
;

1562 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1563 * 
xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

1569 
Ba£Ty≥_t
 
xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1570 
Ba£Ty≥_t
 
xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
pxMuãx
 ) 
PRIVILEGED_FUNCTION
;

1576 
	#xQueueRe£t
–
xQueue
 ) 
	`xQueueGíîicRe£t
–xQueue, 
pdFALSE
 )

	)

1600 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1601 
vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
 ) 
PRIVILEGED_FUNCTION
;

1614 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1615 
vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1629 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1630 c⁄° *
pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1638 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1639 
QueueH™dÀ_t
 
xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1647 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1648 
QueueH™dÀ_t
 
xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1699 
QueueSëH™dÀ_t
 
xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 ) 
PRIVILEGED_FUNCTION
;

1723 
Ba£Ty≥_t
 
xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1742 
Ba£Ty≥_t
 
xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1778 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1783 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1786 
vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

1787 
Ba£Ty≥_t
 
xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
 ) 
PRIVILEGED_FUNCTION
;

1788 
vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 ) 
PRIVILEGED_FUNCTION
;

1789 
UBa£Ty≥_t
 
uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1790 
uöt8_t
 
ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1793 #ifde‡
__˝lu•lus


	@../libwwg/src/rtos/semphr.h

70 #i‚de‡
SEMAPHORE_H


71 
	#SEMAPHORE_H


	)

73 #i‚de‡
INC_FREERTOS_H


74 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include semphr.h"

77 
	~"queue.h
"

79 
QueueH™dÀ_t
 
	tSem≠h‹eH™dÀ_t
;

81 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( 
uöt8_t
 ) 1U )

	)

82 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
uöt8_t
 ) 0U )

	)

83 
	#£mGIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

135 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

136 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) \

138 –
xSem≠h‹e
 ) = 
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 ); \

139 if––
xSem≠h‹e
 ) !
NULL
 ) \

141 –Ë
	`xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

143 }

	)

203 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

204 
	#xSem≠h‹eCª©eBö¨y
(Ë
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

262 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

263 
	#xSem≠h‹eCª©eBö¨ySètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueGíîicCª©eSètic
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
,ÖxSèticSem≠h‹e, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

331 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueGíîicRe˚ive
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

424 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

425 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

489 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

573 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

574 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

666 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGiveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

700 
	#xSem≠h‹eTakeFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

757 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

758 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 )

	)

818 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

819 
	#xSem≠h‹eCª©eMuãxSètic
–
pxMuãxBuf„r
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_MUTEX
, (ÖxMuãxBuf„∏Ë)

	)

886 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

887 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
 )

	)

959 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

960 
	#xSem≠h‹eCª©eRecursiveMuãxSètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
,ÖxSèticSem≠h‹ê)

	)

1039 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1040 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

1124 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1125 
	#xSem≠h‹eCª©eCou¡ögSètic
–
uxMaxCou¡
, 
uxInôülCou¡
, 
pxSem≠h‹eBuf„r
 ) 
	`xQueueCª©eCou¡ögSem≠h‹eSètic
––uxMaxCou¡ ), ( uxInôülCou¡ ), (ÖxSem≠h‹eBuf„∏Ë)

	)

1140 
	#vSem≠h‹eDñëe
–
xSem≠h‹e
 ) 
	`vQueueDñëe
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

1155 
	#xSem≠h‹eGëMuãxHﬁdî
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdî
––xSem≠h‹êË)

	)

1167 
	#uxSem≠h‹eGëCou¡
–
xSem≠h‹e
 ) 
	`uxQueueMesßgesWaôög
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

	@../libwwg/src/rtos/task.h

71 #i‚de‡
INC_TASK_H


72 
	#INC_TASK_H


	)

74 #i‚de‡
INC_FREERTOS_H


78 
	~"li°.h
"

80 #ifde‡
__˝lu•lus


88 
	#tskKERNEL_VERSION_NUMBER
 "V9.0.0"

	)

89 
	#tskKERNEL_VERSION_MAJOR
 9

	)

90 
	#tskKERNEL_VERSION_MINOR
 0

	)

91 
	#tskKERNEL_VERSION_BUILD
 0

	)

103 * 
	tTaskH™dÀ_t
;

109 
Ba£Ty≥_t
 (*
	tTaskHookFun˘i⁄_t
)( * );

114 
eRu¬ög
 = 0,

115 
eRódy
,

116 
eBlocked
,

117 
eSu•íded
,

118 
eDñëed
,

119 
eInvÆid


120 } 
	teTaskSèã
;

125 
eNoA˘i⁄
 = 0,

126 
eSëBôs
,

127 
eIn¸emít
,

128 
eSëVÆueWôhOvîwrôe
,

129 
eSëVÆueWôhoutOvîwrôe


130 } 
	teNŸifyA˘i⁄
;

135 
	sxTIME_OUT


137 
Ba£Ty≥_t
 
xOvîÊowCou¡
;

138 
TickTy≥_t
 
xTimeOnE¡îög
;

139 } 
	tTimeOut_t
;

144 
	sxMEMORY_REGION


146 *
pvBa£Addªss
;

147 
uöt32_t
 
ulLígthInByãs
;

148 
uöt32_t
 
ulP¨amëîs
;

149 } 
	tMem‹yRegi⁄_t
;

154 
	sxTASK_PARAMETERS


156 
TaskFun˘i⁄_t
 
pvTaskCode
;

157 c⁄° * c⁄° 
pcName
;

158 
uöt16_t
 
usSèckDïth
;

159 *
pvP¨amëîs
;

160 
UBa£Ty≥_t
 
uxPri‹ôy
;

161 
SèckTy≥_t
 *
puxSèckBuf„r
;

162 
Mem‹yRegi⁄_t
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

163 } 
	tTaskP¨amëîs_t
;

167 
	sxTASK_STATUS


169 
TaskH™dÀ_t
 
xH™dÀ
;

170 c⁄° *
pcTaskName
;

171 
UBa£Ty≥_t
 
xTaskNumbî
;

172 
eTaskSèã
 
eCuºítSèã
;

173 
UBa£Ty≥_t
 
uxCuºítPri‹ôy
;

174 
UBa£Ty≥_t
 
uxBa£Pri‹ôy
;

175 
uöt32_t
 
ulRunTimeCou¡î
;

176 
SèckTy≥_t
 *
pxSèckBa£
;

177 
uöt16_t
 
usSèckHighW©îM¨k
;

178 } 
	tTaskSètus_t
;

183 
eAb‹tSÀï
 = 0,

184 
eSènd¨dSÀï
,

185 
eNoTasksWaôögTimeout


186 } 
	teSÀïModeSètus
;

193 
	#tskIDLE_PRIORITY
 ( ( 
UBa£Ty≥_t
 ) 0U )

	)

203 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

217 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

218 
	#èskENTER_CRITICAL_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

232 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

233 
	#èskEXIT_CRITICAL_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–x )

	)

242 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

252 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

257 
	#èskSCHEDULER_SUSPENDED
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

258 
	#èskSCHEDULER_NOT_STARTED
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

259 
	#èskSCHEDULER_RUNNING
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

359 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

360 
Ba£Ty≥_t
 
xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

361 c⁄° * c⁄° 
pcName
,

362 c⁄° 
uöt16_t
 
usSèckDïth
,

363 * c⁄° 
pvP¨amëîs
,

364 
UBa£Ty≥_t
 
uxPri‹ôy
,

365 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

475 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

476 
TaskH™dÀ_t
 
xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

477 c⁄° * c⁄° 
pcName
,

478 c⁄° 
uöt32_t
 
ulSèckDïth
,

479 * c⁄° 
pvP¨amëîs
,

480 
UBa£Ty≥_t
 
uxPri‹ôy
,

481 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

482 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 ) 
PRIVILEGED_FUNCTION
;

552 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

553 
Ba£Ty≥_t
 
xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

602 
vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

643 
vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 ) 
PRIVILEGED_FUNCTION
;

695 
vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 ) 
PRIVILEGED_FUNCTION
;

754 
vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 ) 
PRIVILEGED_FUNCTION
;

779 
Ba£Ty≥_t
 
xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

826 
UBa£Ty≥_t
 
uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

834 
UBa£Ty≥_t
 
uxTaskPri‹ôyGëFromISR
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

852 
eTaskSèã
 
eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

908 
vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

950 
vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 ) 
PRIVILEGED_FUNCTION
;

1001 
vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 ) 
PRIVILEGED_FUNCTION
;

1050 
vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1079 
Ba£Ty≥_t
 
xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1112 
vTaskSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1168 
vTaskEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1219 
vTaskSu•ídAŒ
–Ë
PRIVILEGED_FUNCTION
;

1273 
Ba£Ty≥_t
 
xTaskResumeAŒ
–Ë
PRIVILEGED_FUNCTION
;

1288 
TickTy≥_t
 
xTaskGëTickCou¡
–Ë
PRIVILEGED_FUNCTION
;

1304 
TickTy≥_t
 
xTaskGëTickCou¡FromISR
–Ë
PRIVILEGED_FUNCTION
;

1318 
UBa£Ty≥_t
 
uxTaskGëNumbîOfTasks
–Ë
PRIVILEGED_FUNCTION
;

1331 *
pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1347 
TaskH™dÀ_t
 
xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1368 
UBa£Ty≥_t
 
uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1376 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1377 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1386 
vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

1394 
TaskHookFun˘i⁄_t
 
xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1398 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

1405 
vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 ) 
PRIVILEGED_FUNCTION
;

1406 *
pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 ) 
PRIVILEGED_FUNCTION
;

1421 
Ba£Ty≥_t
 
xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 ) 
PRIVILEGED_FUNCTION
;

1430 
TaskH™dÀ_t
 
xTaskGëIdÀTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

1529 
UBa£Ty≥_t
 
uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 ) 
PRIVILEGED_FUNCTION
;

1576 
vTaskLi°
–* 
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1630 
vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1711 
Ba£Ty≥_t
 
xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 ) 
PRIVILEGED_FUNCTION
;

1712 
	#xTaskNŸify
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
 )

	)

1713 
	#xTaskNŸifyAndQuîy
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifyVÆue
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifyVÆuêË)

	)

1802 
Ba£Ty≥_t
 
xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1803 
	#xTaskNŸifyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

1804 
	#xTaskNŸifyAndQuîyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifiˇti⁄VÆue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifiˇti⁄VÆuê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

1879 
Ba£Ty≥_t
 
xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1925 
	#xTaskNŸifyGive
–
xTaskToNŸify
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( 0 ), 
eIn¸emít
, 
NULL
 )

	)

1980 
vTaskNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

2049 
uöt32_t
 
ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2065 
Ba£Ty≥_t
 
xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 );

2086 
Ba£Ty≥_t
 
xTaskIn¸emítTick
–Ë
PRIVILEGED_FUNCTION
;

2119 
vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2120 
vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2133 
vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

2159 
Ba£Ty≥_t
 
xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 ) 
PRIVILEGED_FUNCTION
;

2160 
Ba£Ty≥_t
 
xTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 ) 
PRIVILEGED_FUNCTION
;

2170 
vTaskSwôchC⁄ãxt
–Ë
PRIVILEGED_FUNCTION
;

2176 
TickTy≥_t
 
uxTaskRe£tEvítIãmVÆue
–Ë
PRIVILEGED_FUNCTION
;

2181 
TaskH™dÀ_t
 
xTaskGëCuºítTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

2186 
vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

2192 
Ba£Ty≥_t
 
xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2198 
vTaskMis£dYõld
–Ë
PRIVILEGED_FUNCTION
;

2204 
Ba£Ty≥_t
 
xTaskGëScheduÀrSèã
–Ë
PRIVILEGED_FUNCTION
;

2210 
vTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2216 
Ba£Ty≥_t
 
xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2221 
UBa£Ty≥_t
 
uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

2227 
vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 ) 
PRIVILEGED_FUNCTION
;

2237 
vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 ) 
PRIVILEGED_FUNCTION
;

2253 
eSÀïModeSètus
 
eTaskC⁄fúmSÀïModeSètus
–Ë
PRIVILEGED_FUNCTION
;

2259 *
pvTaskIn¸emítMuãxHñdCou¡
–Ë
PRIVILEGED_FUNCTION
;

2261 #ifde‡
__˝lu•lus


	@../libwwg/src/rtos/timers.h

71 #i‚de‡
TIMERS_H


72 
	#TIMERS_H


	)

74 #i‚de‡
INC_FREERTOS_H


80 
	~"èsk.h
"

83 #ifde‡
__˝lu•lus


96 
	#tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) -2 )

	)

97 
	#tmrCOMMAND_EXECUTE_CALLBACK
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

98 
	#tmrCOMMAND_START_DONT_TRACE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

99 
	#tmrCOMMAND_START
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

100 
	#tmrCOMMAND_RESET
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

101 
	#tmrCOMMAND_STOP
 ( ( 
Ba£Ty≥_t
 ) 3 )

	)

102 
	#tmrCOMMAND_CHANGE_PERIOD
 ( ( 
Ba£Ty≥_t
 ) 4 )

	)

103 
	#tmrCOMMAND_DELETE
 ( ( 
Ba£Ty≥_t
 ) 5 )

	)

105 
	#tmrFIRST_FROM_ISR_COMMAND
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

106 
	#tmrCOMMAND_START_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

107 
	#tmrCOMMAND_RESET_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 7 )

	)

108 
	#tmrCOMMAND_STOP_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 8 )

	)

109 
	#tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 9 )

	)

118 * 
	tTimîH™dÀ_t
;

123 (*
TimîCÆlbackFun˘i⁄_t
)–
	tTimîH™dÀ_t
 
	txTimî
 );

129 (*
PídedFun˘i⁄_t
)–*, 
	tuöt32_t
 );

268 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

269 
TimîH™dÀ_t
 
xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

270 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

271 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

272 * c⁄° 
pvTimîID
,

273 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

398 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

399 
TimîH™dÀ_t
 
xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

400 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

401 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

402 * c⁄° 
pvTimîID
,

403 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

404 
SèticTimî_t
 *
pxTimîBuf„r
 ) 
PRIVILEGED_FUNCTION
;

427 *
pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

448 
vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 ) 
PRIVILEGED_FUNCTION
;

485 
Ba£Ty≥_t
 
xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

493 
TaskH™dÀ_t
 
xTimîGëTimîD´m⁄TaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

545 
	#xTimîSèπ
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

587 
	#xTimîSt›
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

667 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), 
NULL
, ( xTicksToWaô ) )

	)

705 
	#xTimîDñëe
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

829 
	#xTimîRe£t
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

915 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

978 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP_FROM_ISR
, 0, (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1051 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
, ( xNewPîiod ), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1137 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1228 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1262 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1273 c⁄° * 
pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1284 
TickTy≥_t
 
xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1299 
TickTy≥_t
 
xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1305 
Ba£Ty≥_t
 
xTimîCª©eTimîTask
–Ë
PRIVILEGED_FUNCTION
;

1306 
Ba£Ty≥_t
 
xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1308 #ifde‡
__˝lu•lus


	@../libwwg/src/uartlib.c

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<°d¨g.h
>

8 
	~<FªeRTOS.h
>

9 
	~<èsk.h
>

10 
	~<queue.h
>

12 
	~<lib›ícm3/°m32/rcc.h
>

13 
	~<lib›ícm3/°m32/gpio.h
>

14 
	~<lib›ícm3/°m32/ußπ.h
>

15 
	~<lib›ícm3/cm3/nvic.h
>

17 
	~<u¨éib.h
>

18 
	~<möùrötf.h
>

19 
	~<gëlöe.h
>

25 
	#USART_BUF_DEPTH
 32

	)

27 
	ss_u¨t
 {

28 vﬁ©ûê
uöt16_t
 
	mhód
;

29 vﬁ©ûê
uöt16_t
 
	mèû
;

30 
uöt8_t
 
	mbuf
[
USART_BUF_DEPTH
];

33 
	ss_u¨t_öfo
 {

34 
uöt32_t
 
	mußπ
;

35 
uöt32_t
 
	mrcc
;

36 
uöt32_t
 
	múq
;

37 (*
	mgëc
)();

38 (*
	mputc
)(
	mch
);

41 
s_u¨t_öfo
 
	gu¨ts
[3] = {

42 { 
USART1
, 
RCC_USART1
, 
NVIC_USART1_IRQ
, 
u¨t1_gëc
, 
u¨t1_putc
 },

43 { 
USART2
, 
RCC_USART2
, 
NVIC_USART2_IRQ
, 
u¨t2_gëc
, 
u¨t2_putc
 },

44 { 
USART3
, 
RCC_USART3
, 
NVIC_USART3_IRQ
, 
u¨t3_gëc
, 
u¨t3_putc
 }

47 
s_u¨t
 *
	gu¨t_d©a
[3] = { 0, 0, 0 };

54 
	$u¨t_comm⁄_i§
(
ux
) {

55 
s_u¨t
 *
u¨ç
 = 
u¨t_d©a
[
ux
];

56 
uöt32_t
 
u¨t
 = 
u¨ts
[
ux
].
ußπ
;

57 
uöt32_t
 
¡aû
;

58 
ch
;

60 i‡–!
u¨ç
 )

63  
	`USART_SR
(
u¨t
Ë& 
USART_SR_RXNE
 ) {

64 
ch
 = 
	`USART_DR
(
u¨t
);

65 
¡aû
 = (
u¨ç
->
èû
 + 1Ë% 
USART_BUF_DEPTH
;

68 i‡–
¡aû
 !
u¨ç
->
hód
 ) {

69 
u¨ç
->
buf
[u¨ç->
èû
] = 
ch
;

70 
u¨ç
->
èû
 = 
¡aû
;

73 
	}
}

80 
	$ußπ1_i§
() {

81 
	`u¨t_comm⁄_i§
(0);

82 
	}
}

89 
	$ußπ2_i§
() {

90 
	`u¨t_comm⁄_i§
(1);

91 
	}
}

98 
	$ußπ3_i§
() {

99 
	`u¨t_comm⁄_i§
(2);

100 
	}
}

127 
	$›í_u¨t
(
uöt32_t
 
u¨äo
,uöt32_à
baud
,c⁄° *
cfg
,c⁄° *
mode
,
πs
,
˘s
) {

128 
uöt32_t
 
u¨t
, 
ux
, 
°›b
, 
iomode
, 
∑rôy
, 
fc
;

129 
s_u¨t_öfo
 *
öf›
;

130 
boﬁ
 
rxötf
 = 
Ál£
;

132 i‡–
u¨äo
 < 1 || uartno > 3 )

135 
öf›
 = &
u¨ts
[
ux
 = 
u¨äo
-1];

136 
u¨t
 = 
öf›
->
ußπ
;

137 
	`ußπ_dißbÀ_rx_öãºu±
(
u¨t
);

143  
cfg
[1] ) {

145 
∑rôy
 = 
USART_PARITY_ODD
;

148 
∑rôy
 = 
USART_PARITY_EVEN
;

151 
∑rôy
 = 
USART_PARITY_NONE
;

162 
°›b
 = 
USART_STOPBITS_1
;

164  
cfg
[2] ) {

167 
°›b
 = 
USART_STOPBITS_0_5
;

170 i‡–
cfg
[3] == '.' )

171 
°›b
 = 
USART_STOPBITS_1_5
;

172 
°›b
 = 
USART_STOPBITS_1
;

175 
°›b
 = 
USART_STOPBITS_2
;

185 i‡–
mode
[0] == 'r' && mode[1] == 'w' ) {

186 
iomode
 = 
USART_MODE_TX_RX
;

187 
rxötf
 = 
åue
;

188 } i‡–
mode
[0] == 'r' ) {

189 
iomode
 = 
USART_MODE_RX
;

190 
rxötf
 = 
åue
;

191 } i‡–
mode
[0] == 'w' )

192 
iomode
 = 
USART_MODE_TX
;

199 i‡–
rxötf
 ) {

200 i‡–
u¨t_d©a
[
ux
] == 0 )

201 
u¨t_d©a
[
ux
] = 
	`mÆloc
((
s_u¨t
));

202 
u¨t_d©a
[
ux
]->
hód
 = u¨t_d©a[ux]->
èû
 = 0;

209 
fc
 = 
USART_FLOWCONTROL_NONE
;

210 i‡–
πs
 ) {

211 i‡–
˘s
 )

212 
fc
 = 
USART_FLOWCONTROL_RTS_CTS
;

213 
fc
 = 
USART_FLOWCONTROL_RTS
;

214 } i‡–
˘s
 ) {

215 
fc
 = 
USART_FLOWCONTROL_CTS
;

222 
	`rcc_≥rùh_˛ock_íabÀ
(
öf›
->
rcc
);

223 
	`ußπ_£t_baudøã
(
u¨t
,
baud
);

224 
	`ußπ_£t_d©abôs
(
u¨t
,
cfg
[0]&0x0F);

225 
	`ußπ_£t_°›bôs
(
u¨t
,
°›b
);

226 
	`ußπ_£t_mode
(
u¨t
,
iomode
);

227 
	`ußπ_£t_∑rôy
(
u¨t
,
∑rôy
);

228 
	`ußπ_£t_Êow_c⁄åﬁ
(
u¨t
,
fc
);

230 
	`nvic_íabÀ_úq
(
öf›
->
úq
);

231 
	`ußπ_íabÀ
(
u¨t
);

232 
	`ußπ_íabÀ_rx_öãºu±
(
u¨t
);

235 
	}
}

245 
	$putc_u¨t_nb
(
uöt32_t
 
u¨äo
,
ch
) {

246 
uöt32_t
 
u¨t
 = 
u¨ts
[
u¨äo
-1].
ußπ
;

248 i‡–(
	`USART_SR
(
u¨t
Ë& 
USART_SR_TXE
) == 0 )

250 
	`ußπ_£nd_blockög
(
u¨t
,
ch
);

252 
	}
}

258 
	$putc_u¨t
(
uöt32_t
 
u¨äo
,
ch
) {

259 
uöt32_t
 
u¨t
 = 
u¨ts
[
u¨äo
-1].
ußπ
;

261  (
	`USART_SR
(
u¨t
Ë& 
USART_SR_TXE
) == 0 )

262 
	`èskYIELD
();

263 
	`ußπ_£nd_blockög
(
u¨t
,
ch
);

264 
	}
}

271 
	$wrôe_u¨t
(
uöt32_t
 
u¨äo
,c⁄° *
buf
,uöt32_à
size
) {

272 
uöt32_t
 
u¨t
 = 
u¨ts
[
u¨äo
-1].
ußπ
;

274  ; 
size
 > 0; --size ) {

275  (
	`USART_SR
(
u¨t
Ë& 
USART_SR_TXE
) == 0 )

276 
	`èskYIELD
();

277 
	`ußπ_£nd_blockög
(
u¨t
,*
buf
++);

279 
	}
}

286 
	$puts_u¨t
(
uöt32_t
 
u¨äo
,c⁄° *
buf
) {

287 
uöt32_t
 
u¨t
 = 
u¨ts
[
u¨äo
-1].
ußπ
;

289  *
buf
 ) {

290  (
	`USART_SR
(
u¨t
Ë& 
USART_SR_TXE
) == 0 )

291 
	`èskYIELD
();

292 
	`ußπ_£nd_blockög
(
u¨t
,*
buf
++);

294 
	}
}

301 
	$gë_ch¨
(
s_u¨t
 *
u±r
) {

302 
rch
;

304 i‡–
u±r
->
hód
 =u±r->
èû
 )

306 
rch
 = 
u±r
->
buf
[u±r->
hód
];

307 
u±r
->
hód
 = ( u±r->hód + 1 ) % 
USART_BUF_DEPTH
;

308  
rch
;

309 
	}
}

316 
	$gëc_u¨t_nb
(
uöt32_t
 
u¨äo
) {

317 
s_u¨t
 *
u±r
 = 
u¨t_d©a
[
u¨äo
-1];

319 i‡–!
u±r
 )

321  
	`gë_ch¨
(
u±r
);

322 
	}
}

329 
	$gëc_u¨t
(
uöt32_t
 
u¨äo
) {

330 
s_u¨t
 *
u±r
 = 
u¨t_d©a
[
u¨äo
-1];

331 
rch
;

333 i‡–!
u±r
 )

335  (
rch
 = 
	`gë_ch¨
(
u±r
)) == -1 )

336 
	`èskYIELD
();

337  ()
rch
;

338 
	}
}

345 
	$gëlöe_u¨t
(
uöt32_t
 
u¨äo
,*
buf
,uöt32_à
bufsiz
) {

346 
s_u¨t_öfo
 *
u¨t
 = &
u¨ts
[
u¨äo
-1];

348  
	`gëlöe
(
buf
,
bufsiz
,
u¨t
->
gëc
,u¨t->
putc
);

349 
	}
}

356 
	$˛o£_u¨t
(
uöt32_t
 
u¨äo
) {

357 
uöt32_t
 
ux
 = 
u¨äo
 - 1;

358 
s_u¨t
 *
u±r
 = 
u¨t_d©a
[
ux
];

360 
	`ußπ_dißbÀ_rx_öãºu±
(
u¨ts
[
ux
].
ußπ
);

362 i‡–
u±r
 && 
u¨t_d©a
[
ux
] ) {

363 
	`‰ì
(
u¨t_d©a
[
ux
]);

364 
u¨t_d©a
[
ux
] = 0;

366 
	}
}

373 
	$u¨t1_putc
(
ch
) {

374 i‡–
ch
 == '\n' )

375 
	`putc_u¨t
(1,'\r');

376 
	`putc_u¨t
(1,
ch
);

377 
	}
}

380 
	$u¨t1_puts
(c⁄° *
buf
) {

381 
	`puts_u¨t
(1,
buf
);

382 
	}
}

385 
	$u¨t1_v¥ötf
(c⁄° *
f‹m©
,
va_li°
 
≠
) {

386  
	`möi_v¥ötf_cooked
(
u¨t1_putc
,
f‹m©
,
≠
);

387 
	}
}

390 
	$u¨t1_¥ötf
(c⁄° *
f‹m©
,...) {

391 
va_li°
 
¨gs
;

392 
rc
;

394 
	`va_°¨t
(
¨gs
,
f‹m©
);

395 
rc
 = 
	`möi_v¥ötf_cooked
(
u¨t1_putc
,
f‹m©
,
¨gs
);

396 
	`va_íd
(
¨gs
);

397  
rc
;

398 
	}
}

401 
	$u¨t1_gëc
() {

402  
	`gëc_u¨t
(1);

403 
	}
}

406 
	$u¨t1_≥ek
() {

407  
	`gëc_u¨t_nb
(1);

408 
	}
}

411 
	$u¨t1_gës
(*
buf
,
bufsiz
) {

412  
	`gëlöe_u¨t
(1,
buf
,
bufsiz
);

413 
	}
}

416 
	$u¨t1_wrôe
(c⁄° *
buf
,
byãs
) {

417 
	`wrôe_u¨t
(1,
buf
,
byãs
);

418 
	}
}

421 
	$u¨t1_gëlöe
(*
buf
,
bufsiz
) {

422  
	`gëlöe_u¨t
(1,
buf
,
bufsiz
);

423 
	}
}

430 
	$u¨t2_putc
(
ch
) {

431 i‡–
ch
 == '\n' )

432 
	`putc_u¨t
(2,'\r');

433 
	`putc_u¨t
(2,
ch
);

434 
	}
}

437 
	$u¨t2_puts
(c⁄° *
buf
) {

438 
	`puts_u¨t
(2,
buf
);

439 
	}
}

442 
	$u¨t2_v¥ötf
(c⁄° *
f‹m©
,
va_li°
 
≠
) {

443  
	`möi_v¥ötf_cooked
(
u¨t2_putc
,
f‹m©
,
≠
);

444 
	}
}

447 
	$u¨t2_¥ötf
(c⁄° *
f‹m©
,...) {

448 
va_li°
 
¨gs
;

449 
rc
;

451 
	`va_°¨t
(
¨gs
,
f‹m©
);

452 
rc
 = 
	`möi_v¥ötf_cooked
(
u¨t2_putc
,
f‹m©
,
¨gs
);

453 
	`va_íd
(
¨gs
);

454  
rc
;

455 
	}
}

458 
	$u¨t2_gëc
() {

459  
	`gëc_u¨t
(2);

460 
	}
}

463 
	$u¨t2_≥ek
() {

464  
	`gëc_u¨t_nb
(2);

465 
	}
}

468 
	$u¨t2_gës
(*
buf
,
bufsiz
) {

469  
	`gëlöe_u¨t
(2,
buf
,
bufsiz
);

470 
	}
}

473 
	$u¨t2_wrôe
(c⁄° *
buf
,
byãs
) {

474 
	`wrôe_u¨t
(2,
buf
,
byãs
);

475 
	}
}

478 
	$u¨t2_gëlöe
(*
buf
,
bufsiz
) {

479  
	`gëlöe_u¨t
(2,
buf
,
bufsiz
);

480 
	}
}

487 
	$u¨t3_putc
(
ch
) {

488 i‡–
ch
 == '\n' )

489 
	`putc_u¨t
(3,'\r');

490 
	`putc_u¨t
(3,
ch
);

491 
	}
}

494 
	$u¨t3_puts
(c⁄° *
buf
) {

495 
	`puts_u¨t
(3,
buf
);

496 
	}
}

499 
	$u¨t3_v¥ötf
(c⁄° *
f‹m©
,
va_li°
 
≠
) {

500  
	`möi_v¥ötf_cooked
(
u¨t3_putc
,
f‹m©
,
≠
);

501 
	}
}

504 
	$u¨t3_¥ötf
(c⁄° *
f‹m©
,...) {

505 
va_li°
 
¨gs
;

506 
rc
;

508 
	`va_°¨t
(
¨gs
,
f‹m©
);

509 
rc
 = 
	`möi_v¥ötf_cooked
(
u¨t3_putc
,
f‹m©
,
¨gs
);

510 
	`va_íd
(
¨gs
);

511  
rc
;

512 
	}
}

515 
	$u¨t3_gëc
() {

516  
	`gëc_u¨t
(3);

517 
	}
}

520 
	$u¨t3_≥ek
() {

521  
	`gëc_u¨t_nb
(3);

522 
	}
}

525 
	$u¨t3_gës
(*
buf
,
bufsiz
) {

526  
	`gëlöe_u¨t
(3,
buf
,
bufsiz
);

527 
	}
}

530 
	$u¨t3_gëlöe
(*
buf
,
bufsiz
) {

531  
	`gëlöe_u¨t
(3,
buf
,
bufsiz
);

532 
	}
}

535 
	$u¨t3_wrôe
(c⁄° *
buf
,
byãs
) {

536 
	`wrôe_u¨t
(3,
buf
,
byãs
);

537 
	}
}

	@../libwwg/src/usbcdc.c

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

7 
	~<lib›ícm3/cm3/scb.h
>

8 
	~<lib›ícm3/°m32/rcc.h
>

9 
	~<lib›ícm3/°m32/gpio.h
>

10 
	~<lib›ícm3/usb/usbd.h
>

11 
	~<lib›ícm3/usb/cdc.h
>

12 
	~<lib›ícm3/cm3/scb.h
>

14 
	~<FªeRTOS.h
>

15 
	~<èsk.h
>

16 
	~<queue.h
>

18 
	~<usbcdc.h
>

19 
	~<möùrötf.h
>

20 
	~<gëlöe.h
>

22 vﬁ©ûê
	göôülized
 = 0;

23 
QueueH™dÀ_t
 
	gusb_txq
;

24 
QueueH™dÀ_t
 
	gusb_rxq
;

26 c⁄° 
usb_devi˚_des¸ùt‹
 
	gdev
 = {

27 .
bLígth
 = 
USB_DT_DEVICE_SIZE
,

28 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_DEVICE
,

29 .
	gbcdUSB
 = 0x0200,

30 .
	gbDevi˚Cœss
 = 
USB_CLASS_CDC
,

31 .
	gbDevi˚SubCœss
 = 0,

32 .
	gbDevi˚PrŸocﬁ
 = 0,

33 .
	gbMaxPackëSize0
 = 64,

34 .
	gidVíd‹
 = 0x0483,

35 .
	gidProdu˘
 = 0x5740,

36 .
	gbcdDevi˚
 = 0x0200,

37 .
	giM™uÁ˘uªr
 = 1,

38 .
	giProdu˘
 = 2,

39 .
	giSîülNumbî
 = 3,

40 .
	gbNumC⁄figuøti⁄s
 = 1,

48 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gcomm_ídp
[] = {

50 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

51 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

52 .
	gbEndpoötAddªss
 = 0x83,

53 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_INTERRUPT
,

54 .
	gwMaxPackëSize
 = 16,

55 .
	gbI¡îvÆ
 = 255,

59 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gd©a_ídp
[] = {

61 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

62 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

63 .
	gbEndpoötAddªss
 = 0x01,

64 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_BULK
,

65 .
	gwMaxPackëSize
 = 64,

66 .
	gbI¡îvÆ
 = 1,

68 .
	gbLígth
 = 
USB_DT_ENDPOINT_SIZE
,

69 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

70 .
	gbEndpoötAddªss
 = 0x82,

71 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_BULK
,

72 .
	gwMaxPackëSize
 = 64,

73 .
	gbI¡îvÆ
 = 1,

78 
usb_cdc_hódî_des¸ùt‹
 
	mhódî
;

79 
usb_cdc_ˇŒ_m™agemít_des¸ùt‹
 
	mˇŒ_mgmt
;

80 
usb_cdc_acm_des¸ùt‹
 
	macm
;

81 
usb_cdc_uni⁄_des¸ùt‹
 
	mcdc_uni⁄
;

82 } 
__©åibuã__
((
∑cked
)Ë
	gcdˇcm_fun˘i⁄Æ_des¸ùt‹s
 = {

83 .
hódî
 = {

84 .
bFun˘i⁄Lígth
 = (
usb_cdc_hódî_des¸ùt‹
),

85 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

86 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_HEADER
,

87 .
	gbcdCDC
 = 0x0110,

89 .
	gˇŒ_mgmt
 = {

90 .
bFun˘i⁄Lígth
 =

91 (
usb_cdc_ˇŒ_m™agemít_des¸ùt‹
),

92 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

93 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_CALL_MANAGEMENT
,

94 .
	gbmC≠abûôõs
 = 0,

95 .
	gbD©aI¡îÁ˚
 = 1,

97 .
	gacm
 = {

98 .
bFun˘i⁄Lígth
 = (
usb_cdc_acm_des¸ùt‹
),

99 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

100 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_ACM
,

101 .
	gbmC≠abûôõs
 = 0,

103 .
	gcdc_uni⁄
 = {

104 .
bFun˘i⁄Lígth
 = (
usb_cdc_uni⁄_des¸ùt‹
),

105 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

106 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_UNION
,

107 .
	gbC⁄åﬁI¡îÁ˚
 = 0,

108 .
	gbSub‹dö©eI¡îÁ˚0
 = 1,

112 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gcomm_iÁ˚
[] = {

114 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

115 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

116 .
	gbI¡îÁ˚Numbî
 = 0,

117 .
	gbA…î«ãSëtög
 = 0,

118 .
	gbNumEndpoöts
 = 1,

119 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_CDC
,

120 .
	gbI¡îÁ˚SubCœss
 = 
USB_CDC_SUBCLASS_ACM
,

121 .
	gbI¡îÁ˚PrŸocﬁ
 = 
USB_CDC_PROTOCOL_AT
,

122 .
	giI¡îÁ˚
 = 0,

124 .
	gídpoöt
 = 
comm_ídp
,

126 .
	gexåa
 = &
cdˇcm_fun˘i⁄Æ_des¸ùt‹s
,

127 .
	gexåÆí
 = (
cdˇcm_fun˘i⁄Æ_des¸ùt‹s
)

131 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gd©a_iÁ˚
[] = {

133 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

134 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

135 .
	gbI¡îÁ˚Numbî
 = 1,

136 .
	gbA…î«ãSëtög
 = 0,

137 .
	gbNumEndpoöts
 = 2,

138 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_DATA
,

139 .
	gbI¡îÁ˚SubCœss
 = 0,

140 .
	gbI¡îÁ˚PrŸocﬁ
 = 0,

141 .
	giI¡îÁ˚
 = 0,

143 .
	gídpoöt
 = 
d©a_ídp
,

147 c⁄° 
usb_öãrÁ˚
 
	giÁ˚s
[] = {

149 .
num_Æt£âög
 = 1,

150 .
	gÆt£âög
 = 
comm_iÁ˚
,

152 .
	gnum_Æt£âög
 = 1,

153 .
	gÆt£âög
 = 
d©a_iÁ˚
,

157 c⁄° 
usb_c⁄fig_des¸ùt‹
 
	gc⁄fig
 = {

158 .
bLígth
 = 
USB_DT_CONFIGURATION_SIZE
,

159 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_CONFIGURATION
,

160 .
	gwTŸÆLígth
 = 0,

161 .
	gbNumI¡îÁ˚s
 = 2,

162 .
	gbC⁄figuøti⁄VÆue
 = 1,

163 .
	giC⁄figuøti⁄
 = 0,

164 .
	gbmAâribuãs
 = 0x80,

165 .
	gbMaxPowî
 = 0x32,

167 .
	göãrÁ˚
 = 
iÁ˚s
,

170 c⁄° * 
	gusb_°rögs
[] = {

177 
uöt8_t
 
	gusbd_c⁄åﬁ_buf„r
[128];

179 
usbd_ªque°_ªtu∫_codes


180 
cdˇcm_c⁄åﬁ_ªque°
(

181 
usbd_devi˚
 *
usbd_dev
,

182 
usb_£tup_d©a
 *
ªq
,

183 
uöt8_t
 **
buf
,

184 
uöt16_t
 *
Àn
,

185 (**
com∂ëe
)(
usbd_devi˚
 *
usbd_dev
,
usb_£tup_d©a
 *
ªq
)

187 ()
com∂ëe
;

188 ()
buf
;

189 ()
usbd_dev
;

191 
ªq
->
bReque°
) {

192 
USB_CDC_REQ_SET_CONTROL_LINE_STATE
: {

198  
USBD_REQ_HANDLED
;

200 
USB_CDC_REQ_SET_LINE_CODING
:

201 i‡(*
Àn
 < (
usb_cdc_löe_codög
)) {

202  
USBD_REQ_NOTSUPP
;

205  
USBD_REQ_HANDLED
;

207  
USBD_REQ_NOTSUPP
;

208 
	}
}

211 
	$cdˇcm_d©a_rx_cb
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
) {

212 
rx_avaû
 = 
	`uxQueueS∑˚sAvaûabÀ
(
usb_rxq
);

213 
buf
[64];

214 
Àn
, 
x
;

216 ()
ï
;

218 i‡–
rx_avaû
 <= 0 )

221 
Àn
 =  
buf
 < 
rx_avaû
 ?  buf :Ñx_avail;

222 
Àn
 = 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
,0x01,
buf
,len);

224  
x
=0; x<
Àn
; ++x )

225 
	`xQueueSíd
(
usb_rxq
,&
buf
[
x
],0);

226 
	}
}

229 
	$cdˇcm_£t_c⁄fig
(
usbd_devi˚
 *
usbd_dev
, 
uöt16_t
 
wVÆue
) {

230 ()
wVÆue
;

232 
	`usbd_ï_£tup
(
usbd_dev
,0x01,
USB_ENDPOINT_ATTR_BULK
,64,
cdˇcm_d©a_rx_cb
);

233 
	`usbd_ï_£tup
(
usbd_dev
,0x82,
USB_ENDPOINT_ATTR_BULK
,64,
NULL
);

234 
	`usbd_ï_£tup
(
usbd_dev
,0x83,
USB_ENDPOINT_ATTR_INTERRUPT
,16,
NULL
);

236 
	`usbd_ªgi°î_c⁄åﬁ_ˇŒback
(

237 
usbd_dev
,

238 
USB_REQ_TYPE_CLASS
 | 
USB_REQ_TYPE_INTERFACE
,

239 
USB_REQ_TYPE_TYPE
 | 
USB_REQ_TYPE_RECIPIENT
,

240 
cdˇcm_c⁄åﬁ_ªque°
);

242 
öôülized
 = 1;

243 
	}
}

249 
	$usb_èsk
(*
¨g
) {

250 
usbd_devi˚
 *
udev
 = (usbd_devi˚ *)
¨g
;

251 
txbuf
[64];

252 
txÀn
 = 0;

255 
	`usbd_pﬁl
(
udev
);

256 i‡–
öôülized
 ) {

257  
txÀn
 <  
txbuf
 && 
	`xQueueRe˚ive
(
usb_txq
,&txbuf[txÀn],0Ë=
pdPASS
 )

258 ++
txÀn
;

259 i‡–
txÀn
 > 0 ) {

260 i‡–
	`usbd_ï_wrôe_∑ckë
(
udev
,0x82,
txbuf
,
txÀn
) != 0 )

261 
txÀn
 = 0;

263 
	`èskYIELD
();

266 
	`èskYIELD
();

269 
	}
}

275 
	$usb_putc
(
ch
) {

276 c⁄° 
¸
 = '\r';

278  !
	`usb_ªady
() )

279 
	`èskYIELD
();

281 i‡–
ch
 == '\n' )

282 
	`xQueueSíd
(
usb_txq
,&
¸
,
p‹tMAX_DELAY
);

283 
	`xQueueSíd
(
usb_txq
,&
ch
,
p‹tMAX_DELAY
);

284 
	}
}

290 
	$usb_puts
(c⁄° *
buf
) {

292  *
buf
 )

293 
	`usb_putc
(*
buf
++);

294 
	}
}

300 
	$usb_v¥ötf
(c⁄° *
f‹m©
,
va_li°
 
≠
) {

301  
	`möi_v¥ötf_cooked
(
usb_putc
,
f‹m©
,
≠
);

302 
	}
}

308 
	$usb_¥ötf
(c⁄° *
f‹m©
,...) {

309 
rc
;

310 
va_li°
 
¨gs
;

312 
	`va_°¨t
(
¨gs
,
f‹m©
);

313 
rc
 = 
	`möi_v¥ötf_cooked
(
usb_putc
,
f‹m©
,
¨gs
);

314 
	`va_íd
(
¨gs
);

315  
rc
;

316 
	}
}

322 
	$usb_wrôe
(c⁄° *
buf
,
byãs
) {

324  
byãs
-- > 0 ) {

325 
	`xQueueSíd
(
usb_txq
,
buf
,
p‹tMAX_DELAY
);

326 ++
buf
;

328 
	}
}

334 
	$usb_gëc
() {

335 
ch
;

337 i‡–
	`xQueueRe˚ive
(
usb_rxq
,&
ch
,
p‹tMAX_DELAY
Ë!
pdPASS
 )

339  
ch
;

340 
	}
}

351 
	$usb_≥ek
() {

352 
ch
;

353 
uöt32_t
 
rc
;

355 
rc
 = 
	`xQueuePìk
(
usb_rxq
,&
ch
,0);

357  
rc
 ) {

358 
îrQUEUE_EMPTY
:

360 
pdPASS
:

365 
	}
}

384 
	$usb_gës
(*
buf
,
maxbuf
) {

385 
bx
 = 0;

386 
ch
;

388  
maxbuf
 > 0 && 
bx
+1 < maxbuf ) {

389 
ch
 = 
	`usb_gëc
();

390 i‡–
ch
 == -1 ) {

391 i‡–!
bx
 )

395 i‡–
ch
 == '\r' || ch == '\n' ) {

396 
buf
[
bx
++] = '\n';

397 
	`usb_putc
('\n');

400 
buf
[
bx
++] = ()
ch
;

401 
	`usb_putc
(
ch
);

404 
buf
[
bx
] = 0;

405  
bx
;

406 
	}
}

412 
	$usb_gëlöe
(*
buf
,
maxbuf
) {

414  
	`gëlöe
(
buf
,
maxbuf
,
usb_gëc
,
usb_putc
);

415 
	}
}

424 
	$usb_°¨t
(
boﬁ
 
gpio_öô
,
¥i‹ôy
) {

425 
usbd_devi˚
 *
udev
 = 0;

427 
usb_txq
 = 
	`xQueueCª©e
(128,());

428 
usb_rxq
 = 
	`xQueueCª©e
(128,());

430 i‡–
gpio_öô
 ) {

431 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOA
);

432 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_USB
);

435 
udev
 = 
	`usbd_öô
(&
°_usbfs_v1_usb_drivî
,&
dev
,&
c⁄fig
,

436 
usb_°rögs
,3,

437 
usbd_c⁄åﬁ_buf„r
,(usbd_control_buffer));

439 
	`usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
udev
,
cdˇcm_£t_c⁄fig
);

441 
	`xTaskCª©e
(
usb_èsk
,"USB",300,
udev
,
¥i‹ôy
,
NULL
);

442 
	}
}

448 
	$usb_ªady
() {

449  
öôülized
;

450 
	}
}

456 
	$usb_yõld
() {

457  !
öôülized
 )

458 
	`èskYIELD
();

459 
	}
}

	@../libwwg/src/winbond.c

4 
	~<°rög.h
>

5 
	~<˘y≥.h
>

7 
	~"FªeRTOS.h
"

8 
	~"èsk.h
"

10 
	~<lib›ícm3/°m32/rcc.h
>

11 
	~<lib›ícm3/°m32/gpio.h
>

12 
	~<lib›ícm3/°m32/•i.h
>

14 
	~"wöb⁄d.h
"

20 
uöt8_t


21 
	$w25_ªad_§1
(
uöt32_t
 
•i
) {

22 
uöt8_t
 
§1
;

24 
	`•i_íabÀ
(
•i
);

25 
	`•i_x„r
(
•i
,
W25_CMD_READ_SR1
);

26 
§1
 = 
	`•i_x„r
(
•i
,
DUMMY
);

27 
	`•i_dißbÀ
(
•i
);

28  
§1
;

29 
	}
}

35 
uöt8_t


36 
	$w25_ªad_§2
(
uöt32_t
 
•i
) {

37 
uöt8_t
 
§1
;

39 
	`•i_íabÀ
(
•i
);

40 
	`•i_x„r
(
•i
,
W25_CMD_READ_SR2
);

41 
§1
 = 
	`•i_x„r
(
•i
,0x00);

42 
	`•i_dißbÀ
(
•i
);

43  
§1
;

44 
	}
}

51 
	$w25_waô
(
uöt32_t
 
•i
) {

53  
	`w25_ªad_§1
(
•i
Ë& 
W25_SR1_BUSY
 )

54 
	`èskYIELD
();

55 
	}
}

61 
boﬁ


62 
	$w25_is_w¥Ÿe˘
(
uöt32_t
 
•i
) {

64 
	`w25_waô
(
•i
);

65  !(
	`w25_ªad_§1
(
•i
Ë& 
W25_SR1_WEL
);

66 
	}
}

73 
	$w25_wrôe_í
(
uöt32_t
 
•i
,
boﬁ
 
í
) {

75 
	`w25_waô
(
•i
);

77 
	`•i_íabÀ
(
•i
);

78 
	`•i_x„r
(
•i
,
í
 ? 
W25_CMD_WRITE_EN
 : 
W25_CMD_WRITE_DI
);

79 
	`•i_dißbÀ
(
•i
);

80 
	}
}

86 
uöt16_t


87 
	$w25_m™uf_devi˚
(
uöt32_t
 
•i
) {

88 
uöt16_t
 
öfo
;

90 
	`w25_waô
(
•i
);

91 
	`•i_íabÀ
(
•i
);

92 
	`•i_x„r
(
•i
,
W25_CMD_MANUF_DEVICE
);

93 
	`•i_x„r
(
•i
,
DUMMY
);

94 
	`•i_x„r
(
•i
,
DUMMY
);

95 
	`•i_x„r
(
•i
,0x00);

96 
öfo
 = 
	`•i_x„r
(
•i
,
DUMMY
) << 8;

97 
öfo
 |
	`•i_x„r
(
•i
,
DUMMY
);

98 
	`•i_dißbÀ
(
•i
);

99  
öfo
;

100 
	}
}

106 
uöt32_t


107 
	$w25_JEDEC_ID
(
uöt32_t
 
•i
) {

108 
uöt32_t
 
öfo
;

110 
	`w25_waô
(
•i
);

111 
	`•i_íabÀ
(
•i
);

112 
	`•i_x„r
(
•i
,
W25_CMD_JEDEC_ID
);

113 
öfo
 = 
	`•i_x„r
(
•i
,
DUMMY
);

114 
öfo
 = (öfÿ<< 8Ë| 
	`•i_x„r
(
•i
,
DUMMY
);

115 
öfo
 = (öfÿ<< 8Ë| 
	`•i_x„r
(
•i
,
DUMMY
);

116 
	`•i_dißbÀ
(
•i
);

118  
öfo
;

119 
	}
}

126 
	$w25_ªad_uid
(
uöt32_t
 
•i
,*
buf
,
uöt16_t
 
byãs
) {

127 
uöt8_t
 *
ud©a
 = (uöt8_t*)
buf
;

129 i‡–
byãs
 > 8 )

130 
byãs
 = 8;

131 i‡–
byãs
 <= 0 )

134 
	`w25_waô
(
•i
);

135 
	`•i_íabÀ
(
•i
);

136 
	`•i_x„r
(
•i
,
W25_CMD_READ_UID
);

137  
uöt8_t
 
ux
=0; ux<4; ++ux )

138 
	`•i_x„r
(
•i
,
DUMMY
);

139  
uöt8_t
 
ux
=0; ux<
byãs
; ++ux )

140 
ud©a
[
ux
] = 
	`•i_x„r
(
•i
,
DUMMY
);

141 
	`•i_dißbÀ
(
•i
);

142 
	}
}

149 
	$w25_powî
(
uöt32_t
 
•i
,
boﬁ
 
⁄
) {

151 i‡–!
⁄
 )

152 
	`w25_waô
(
•i
);

153 
	`•i_íabÀ
(
•i
);

154 
	`•i_x„r
(
•i
,
⁄
 ? 
W25_CMD_PWR_ON
 : 
W25_CMD_PWR_OFF
);

155 
	`•i_dißbÀ
(
•i
);

156 
	}
}

162 
boﬁ


163 
	$w25_chù_îa£
(
uöt32_t
 
•i
) {

165 i‡–
	`w25_is_w¥Ÿe˘
(
•i
) )

166  
Ál£
;

168 
	`•i_íabÀ
(
•i
);

169 
	`•i_x„r
(
•i
,
W25_CMD_CHIP_ERASE
);

170 
	`•i_dißbÀ
(
•i
);

172  
	`w25_is_w¥Ÿe˘
(
•i
);

173 
	}
}

179 
uöt32_t


180 
	$w25_ªad_d©a
(
uöt32_t
 
•i
,uöt32_à
addr
,*
d©a
,uöt32_à
byãs
) {

181 
uöt8_t
 *
ud©a
 = (uöt8_t*)
d©a
;

183 
	`w25_waô
(
•i
);

185 
	`•i_íabÀ
(
•i
);

186 
	`•i_x„r
(
•i
,
W25_CMD_FAST_READ
);

187 
	`•i_x„r
(
•i
,
addr
 >> 16);

188 
	`•i_x„r
(
•i
,(
addr
 >> 8) & 0xFF);

189 
	`•i_x„r
(
•i
,
addr
 & 0xFF);

190 
	`•i_x„r
(
•i
,
DUMMY
);

192  ; 
byãs
-- > 0; ++
addr
 )

193 *
ud©a
++ = 
	`•i_x„r
(
•i
,0x00);

195 
	`•i_dißbÀ
(
•i
);

196  
addr
;

197 
	}
}

204 
	$w25_wrôe_d©a
(
uöt32_t
 
•i
,uöt32_à
addr
,*
d©a
,uöt32_à
byãs
) {

205 
uöt8_t
 *
ud©a
 = (uöt8_t*)
d©a
;

207 
	`w25_wrôe_í
(
•i
,
åue
);

208 
	`w25_waô
(
•i
);

210 i‡–
	`w25_is_w¥Ÿe˘
(
•i
) )

213  
byãs
 > 0 ) {

214 
	`•i_íabÀ
(
•i
);

215 
	`•i_x„r
(
•i
,
W25_CMD_WRITE_DATA
);

216 
	`•i_x„r
(
•i
,
addr
 >> 16);

217 
	`•i_x„r
(
•i
,(
addr
 >> 8) & 0xFF);

218 
	`•i_x„r
(
•i
,
addr
 & 0xFF);

219  
byãs
 > 0 ) {

220 
	`•i_x„r
(
•i
,*
ud©a
++);

221 --
byãs
;

222 i‡–(++
addr
 & 0xFF) == 0x00 )

225 
	`•i_dißbÀ
(
•i
);

227 i‡–
byãs
 > 0 )

228 
	`w25_wrôe_í
(
•i
,
åue
);

231  
addr
;

232 
	}
}

238 
boﬁ


239 
	$w25_îa£_block
(
uöt32_t
 
•i
,uöt32_à
addr
,
uöt8_t
 
cmd
) {

241 i‡–
	`w25_is_w¥Ÿe˘
(
•i
) )

242  
Ál£
;

244  
cmd
 ) {

245 
W25_CMD_ERA_SECTOR
:

246 
addr
 &= ~(4*1024-1);

248 
W25_CMD_ERA_32K
:

249 
addr
 &= ~(32*1024-1);

251 
W25_CMD_ERA_64K
:

252 
addr
 &= ~(64*1024-1);

255  
Ál£
;

258 
	`•i_íabÀ
(
•i
);

259 
	`•i_x„r
(
•i
,
cmd
);

260 
	`•i_x„r
(
•i
,
addr
 >> 16);

261 
	`•i_x„r
(
•i
,(
addr
 >> 8) & 0xFF);

262 
	`•i_x„r
(
•i
,
addr
 & 0xFF);

263 
	`•i_dißbÀ
(
•i
);

265  
	`w25_is_w¥Ÿe˘
(
•i
);

266 
	}
}

273 
	$w25_•i_£tup
(

274 
uöt32_t
 
•i
,

275 
boﬁ
 
bôs8
,

276 
boﬁ
 
msbfú°
,

277 
boﬁ
 
mode0
,

278 
uöt8_t
 
Â˛k_div


281 
	`rcc_≥rùh_˛ock_íabÀ
(
•i
 =
SPI1
 ? 
RCC_SPI1
 : 
RCC_SPI2
);

282 i‡–
•i
 =
SPI1
 ) {

283 
	`gpio_£t_mode
(

284 
GPIOA
,

285 
GPIO_MODE_OUTPUT_50_MHZ
,

286 
GPIO_CNF_OUTPUT_ALTFN_PUSHPULL
,

287 
GPIO4
|
GPIO5
|
GPIO7


289 
	`gpio_£t_mode
(

290 
GPIOA
,

291 
GPIO_MODE_INPUT
,

292 
GPIO_CNF_INPUT_FLOAT
,

293 
GPIO6


295 
	`gpio_£t
(
GPIOA
,
GPIO4
);

297 
	`gpio_£t_mode
(

298 
GPIOB
,

299 
GPIO_MODE_OUTPUT_50_MHZ
,

300 
GPIO_CNF_OUTPUT_ALTFN_PUSHPULL
,

301 
GPIO12
|
GPIO13
|
GPIO15


303 
	`gpio_£t_mode
(

304 
GPIOB
,

305 
GPIO_MODE_INPUT
,

306 
GPIO_CNF_INPUT_FLOAT
,

307 
GPIO14


309 
	`gpio_£t
(
GPIOB
,
GPIO12
);

312 
	`•i_ª£t
(
•i
);

314 
	`•i_öô_ma°î
(

315 
•i
,

316 
Â˛k_div
,

317 
mode0
 ? 
SPI_CR1_CPOL_CLK_TO_0_WHEN_IDLE
 : 
SPI_CR1_CPOL_CLK_TO_1_WHEN_IDLE
,

318 
mode0
 ? 
SPI_CR1_CPHA_CLK_TRANSITION_1
 : 
SPI_CR1_CPHA_CLK_TRANSITION_2
,

319 
bôs8
 ? 
SPI_CR1_DFF_8BIT
 : 
SPI_CR1_DFF_16BIT
,

320 
msbfú°
 ? 
SPI_CR1_MSBFIRST
 : 
SPI_CR1_LSBFIRST


323 
	`•i_dißbÀ_so·w¨e_¶ave_m™agemít
(
•i
);

324 
	`•i_íabÀ_ss_ouçut
(
•i
);

325 
	}
}

	@FreeRTOSConfig.h

70 #i‚de‡
FREERTOS_CONFIG_H


71 
	#FREERTOS_CONFIG_H


	)

88 
	#c⁄figUSE_PREEMPTION
 1

	)

89 
	#c⁄figUSE_IDLE_HOOK
 0

	)

90 
	#c⁄figUSE_TICK_HOOK
 0

	)

91 
	#c⁄figCPU_CLOCK_HZ
 ( ( Ë72000000 )

	)

92 
	#c⁄figSYSTICK_CLOCK_HZ
 ( 
c⁄figCPU_CLOCK_HZ
 / 8 )

	)

93 
	#c⁄figTICK_RATE_HZ
 ( ( 
TickTy≥_t
 ) 250 )

	)

94 
	#c⁄figMAX_PRIORITIES
 ( 5 )

	)

95 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( Ë128 )

	)

96 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 17 * 1024 ) )

	)

97 
	#c⁄figMAX_TASK_NAME_LEN
 ( 16 )

	)

98 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

99 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

100 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

101 
	#c⁄figUSE_MUTEXES
 0

	)

102 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 1

	)

105 
	#c⁄figUSE_CO_ROUTINES
 0

	)

106 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

111 
	#INCLUDE_vTaskPri‹ôySë
 0

	)

112 
	#INCLUDE_uxTaskPri‹ôyGë
 0

	)

113 
	#INCLUDE_vTaskDñëe
 0

	)

114 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

115 
	#INCLUDE_vTaskSu•íd
 0

	)

116 
	#INCLUDE_vTaskDñayU¡û
 0

	)

117 
	#INCLUDE_vTaskDñay
 1

	)

121 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

124 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 191

	)

130 
	#c⁄figLIBRARY_KERNEL_INTERRUPT_PRIORITY
 15

	)

	@main.c

5 
	~"FªeRTOS.h
"

6 
	~"èsk.h
"

8 
	~<lib›ícm3/°m32/rcc.h
>

9 
	~<lib›ícm3/°m32/gpio.h
>

11 
vAµliˇti⁄SèckOvîÊowHook
(
xTaskH™dÀ
 *
pxTask
,sig√d 
p‹tCHAR
 *
pcTaskName
);

14 
	$vAµliˇti⁄SèckOvîÊowHook
(
xTaskH™dÀ
 *
pxTask
,sig√d 
p‹tCHAR
 *
pcTaskName
) {

15 ()
pxTask
;

16 ()
pcTaskName
;

18 
	}
}

21 
	$èsk1
(*
¨gs
) {

22 
i
;

24 ()
¨gs
;

27 
	`gpio_toggÀ
(
GPIOC
,
GPIO13
);

28 
i
 = 0; i < 1000000; i++)

29 
	`__asm__
("nop");

31 
	}
}

34 
	$maö
() {

36 
	`rcc_˛ock_£tup_ö_h£_8mhz_out_72mhz
();

37 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOC
);

38 
	`gpio_£t_mode
(
GPIOC
,
GPIO_MODE_OUTPUT_2_MHZ
,
GPIO_CNF_OUTPUT_PUSHPULL
,
GPIO13
);

40 
	`xTaskCª©e
(
èsk1
,"LED",100,
NULL
,
c⁄figMAX_PRIORITIES
-1,NULL);

41 
	`vTaskSèπScheduÀr
();

45 
	}
}

	@rtos/FreeRTOS.h

70 #i‚de‡
INC_FREERTOS_H


71 
	#INC_FREERTOS_H


	)

76 
	~<°ddef.h
>

91 
	~<°döt.h
>

93 #ifde‡
__˝lu•lus


98 
	~"FªeRTOSC⁄fig.h
"

101 
	~"¥ojdefs.h
"

104 
	~"p‹èbÀ.h
"

107 #i‚de‡
c⁄figUSE_NEWLIB_REENTRANT


108 
	#c⁄figUSE_NEWLIB_REENTRANT
 0

	)

112 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

113 
	~<ªít.h
>

121 #i‚de‡
c⁄figMINIMAL_STACK_SIZE


122 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMINIMAL_STACK_SIZE
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. c⁄figMINIMAL_STACK_SIZE 
deföes
 
the
 
size
 (ö 
w‹ds
Ë
of
Åhê
°ack
 
Æloˇãd
 
to
Åhê
idÀ
 
èsk
. 
Re„r
Åÿthê
demo
 
¥oje˘
 
¥ovided
 
your
 
p‹t
 
a
 
suôabÀ
 
vÆue
.

125 #i‚de‡
c⁄figMAX_PRIORITIES


126 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

129 #i‚de‡
c⁄figUSE_PREEMPTION


130 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

133 #i‚de‡
c⁄figUSE_IDLE_HOOK


134 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

137 #i‚de‡
c⁄figUSE_TICK_HOOK


138 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

141 #i‚de‡
c⁄figUSE_16_BIT_TICKS


142 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

145 #i‚de‡
c⁄figMAX_PRIORITIES


146 #îr‹ 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
to
 bê
gª©î
 
th™
 
‹
 
equÆ
Åo 1.

149 #i‚de‡
c⁄figUSE_CO_ROUTINES


150 
	#c⁄figUSE_CO_ROUTINES
 0

	)

153 #i‚de‡
INCLUDE_vTaskPri‹ôySë


154 
	#INCLUDE_vTaskPri‹ôySë
 0

	)

157 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


158 
	#INCLUDE_uxTaskPri‹ôyGë
 0

	)

161 #i‚de‡
INCLUDE_vTaskDñëe


162 
	#INCLUDE_vTaskDñëe
 0

	)

165 #i‚de‡
INCLUDE_vTaskSu•íd


166 
	#INCLUDE_vTaskSu•íd
 0

	)

169 #i‚de‡
INCLUDE_vTaskDñayU¡û


170 
	#INCLUDE_vTaskDñayU¡û
 0

	)

173 #i‚de‡
INCLUDE_vTaskDñay


174 
	#INCLUDE_vTaskDñay
 0

	)

177 #i‚de‡
INCLUDE_xTaskGëIdÀTaskH™dÀ


178 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 0

	)

181 #i‚de‡
INCLUDE_xTaskAb‹tDñay


182 
	#INCLUDE_xTaskAb‹tDñay
 0

	)

185 #i‚de‡
INCLUDE_xQueueGëMuãxHﬁdî


186 
	#INCLUDE_xQueueGëMuãxHﬁdî
 0

	)

189 #i‚de‡
INCLUDE_xSem≠h‹eGëMuãxHﬁdî


190 
	#INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 
INCLUDE_xQueueGëMuãxHﬁdî


	)

193 #i‚de‡
INCLUDE_xTaskGëH™dÀ


194 
	#INCLUDE_xTaskGëH™dÀ
 0

	)

197 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


198 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

201 #i‚de‡
INCLUDE_eTaskGëSèã


202 
	#INCLUDE_eTaskGëSèã
 0

	)

205 #i‚de‡
INCLUDE_xTaskResumeFromISR


206 
	#INCLUDE_xTaskResumeFromISR
 1

	)

209 #i‚de‡
INCLUDE_xTimîPídFun˘i⁄CÆl


210 
	#INCLUDE_xTimîPídFun˘i⁄CÆl
 0

	)

213 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


214 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

217 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


218 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

221 #i‡
c⁄figUSE_CO_ROUTINES
 != 0

222 #i‚de‡
c⁄figMAX_CO_ROUTINE_PRIORITIES


223 #îr‹ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 
mu°
 
be
 
gª©î
 
th™
 
‹
 
equÆ
 
to
 1.

227 #i‚de‡
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK


228 
	#c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 0

	)

231 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


232 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

235 #i‚de‡
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS


236 
	#c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 0

	)

239 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


240 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

243 #i‚de‡
c⁄figUSE_MUTEXES


244 
	#c⁄figUSE_MUTEXES
 0

	)

247 #i‚de‡
c⁄figUSE_TIMERS


248 
	#c⁄figUSE_TIMERS
 0

	)

251 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


252 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

255 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


256 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

259 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


260 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

263 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


264 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

267 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


268 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

271 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

272 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


275 #i‚de‡
c⁄figASSERT


276 
	#c⁄figASSERT
–
x
 )

	)

277 
	#c⁄figASSERT_DEFINED
 0

	)

279 
	#c⁄figASSERT_DEFINED
 1

	)

283 #i‡
c⁄figUSE_TIMERS
 == 1

285 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


286 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

289 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


290 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

293 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


294 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

299 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


300 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

303 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


304 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

307 #i‚de‡
p‹tCLEAN_UP_TCB


308 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

311 #i‚de‡
p‹tPRE_TASK_DELETE_HOOK


312 
	#p‹tPRE_TASK_DELETE_HOOK
–
pvTaskToDñëe
, 
pxYõldPídög
 )

	)

315 #i‚de‡
p‹tSETUP_TCB


316 
	#p‹tSETUP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

319 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


320 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

323 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1 )

324 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

325 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

326 
	#pcQueueGëName
–
xQueue
 )

	)

329 #i‚de‡
p‹tPOINTER_SIZE_TYPE


330 
	#p‹tPOINTER_SIZE_TYPE
 
uöt32_t


	)

334 #i‚de‡
åa˚START


337 
	#åa˚START
()

	)

340 #i‚de‡
åa˚END


343 
	#åa˚END
()

	)

346 #i‚de‡
åa˚TASK_SWITCHED_IN


349 
	#åa˚TASK_SWITCHED_IN
()

	)

352 #i‚de‡
åa˚INCREASE_TICK_COUNT


355 
	#åa˚INCREASE_TICK_COUNT
–
x
 )

	)

358 #i‚de‡
åa˚LOW_POWER_IDLE_BEGIN


360 
	#åa˚LOW_POWER_IDLE_BEGIN
()

	)

363 #i‚def 
åa˚LOW_POWER_IDLE_END


365 
	#åa˚LOW_POWER_IDLE_END
()

	)

368 #i‚de‡
åa˚TASK_SWITCHED_OUT


371 
	#åa˚TASK_SWITCHED_OUT
()

	)

374 #i‚de‡
åa˚TASK_PRIORITY_INHERIT


380 
	#åa˚TASK_PRIORITY_INHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxInhîôedPri‹ôy
 )

	)

383 #i‚de‡
åa˚TASK_PRIORITY_DISINHERIT


388 
	#åa˚TASK_PRIORITY_DISINHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxOrigöÆPri‹ôy
 )

	)

391 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


396 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

399 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


404 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

407 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


408 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

413 #i‚de‡
åa˚MOVED_TASK_TO_READY_STATE


414 
	#åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

417 #i‚de‡
åa˚POST_MOVED_TASK_TO_READY_STATE


418 
	#åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

421 #i‚de‡
åa˚QUEUE_CREATE


422 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

425 #i‚de‡
åa˚QUEUE_CREATE_FAILED


426 
	#åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 )

	)

429 #i‚de‡
åa˚CREATE_MUTEX


430 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

433 #i‚de‡
åa˚CREATE_MUTEX_FAILED


434 
	#åa˚CREATE_MUTEX_FAILED
()

	)

437 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


438 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

441 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


442 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

445 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


446 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

449 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


450 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

453 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


454 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

457 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


458 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

461 #i‚de‡
åa˚QUEUE_SEND


462 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

465 #i‚de‡
åa˚QUEUE_SEND_FAILED


466 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

469 #i‚de‡
åa˚QUEUE_RECEIVE


470 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

473 #i‚de‡
åa˚QUEUE_PEEK


474 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

477 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR


478 
	#åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 )

	)

481 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


482 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

485 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


486 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

489 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


490 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

493 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


494 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

497 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


498 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

501 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR_FAILED


502 
	#åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 )

	)

505 #i‚de‡
åa˚QUEUE_DELETE


506 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

509 #i‚de‡
åa˚TASK_CREATE


510 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

513 #i‚de‡
åa˚TASK_CREATE_FAILED


514 
	#åa˚TASK_CREATE_FAILED
()

	)

517 #i‚de‡
åa˚TASK_DELETE


518 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

521 #i‚de‡
åa˚TASK_DELAY_UNTIL


522 
	#åa˚TASK_DELAY_UNTIL
–
x
 )

	)

525 #i‚de‡
åa˚TASK_DELAY


526 
	#åa˚TASK_DELAY
()

	)

529 #i‚de‡
åa˚TASK_PRIORITY_SET


530 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

533 #i‚de‡
åa˚TASK_SUSPEND


534 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

537 #i‚de‡
åa˚TASK_RESUME


538 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

541 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


542 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

545 #i‚de‡
åa˚TASK_INCREMENT_TICK


546 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

549 #i‚de‡
åa˚TIMER_CREATE


550 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

553 #i‚de‡
åa˚TIMER_CREATE_FAILED


554 
	#åa˚TIMER_CREATE_FAILED
()

	)

557 #i‚de‡
åa˚TIMER_COMMAND_SEND


558 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

561 #i‚de‡
åa˚TIMER_EXPIRED


562 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

565 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


566 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

569 #i‚de‡
åa˚MALLOC


570 
	#åa˚MALLOC
–
pvAddªss
, 
uiSize
 )

	)

573 #i‚de‡
åa˚FREE


574 
	#åa˚FREE
–
pvAddªss
, 
uiSize
 )

	)

577 #i‚de‡
åa˚EVENT_GROUP_CREATE


578 
	#åa˚EVENT_GROUP_CREATE
–
xEvítGroup
 )

	)

581 #i‚de‡
åa˚EVENT_GROUP_CREATE_FAILED


582 
	#åa˚EVENT_GROUP_CREATE_FAILED
()

	)

585 #i‚de‡
åa˚EVENT_GROUP_SYNC_BLOCK


586 
	#åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 )

	)

589 #i‚de‡
åa˚EVENT_GROUP_SYNC_END


590 
	#åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

593 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_BLOCK


594 
	#åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 )

	)

597 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_END


598 
	#åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

601 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS


602 
	#åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

605 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR


606 
	#åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

609 #i‚de‡
åa˚EVENT_GROUP_SET_BITS


610 
	#åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 )

	)

613 #i‚de‡
åa˚EVENT_GROUP_SET_BITS_FROM_ISR


614 
	#åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 )

	)

617 #i‚de‡
åa˚EVENT_GROUP_DELETE


618 
	#åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 )

	)

621 #i‚de‡
åa˚PEND_FUNC_CALL


622 
	#åa˚PEND_FUNC_CALL
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

625 #i‚de‡
åa˚PEND_FUNC_CALL_FROM_ISR


626 
	#åa˚PEND_FUNC_CALL_FROM_ISR
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

629 #i‚de‡
åa˚QUEUE_REGISTRY_ADD


630 
	#åa˚QUEUE_REGISTRY_ADD
(
xQueue
, 
pcQueueName
)

	)

633 #i‚de‡
åa˚TASK_NOTIFY_TAKE_BLOCK


634 
	#åa˚TASK_NOTIFY_TAKE_BLOCK
()

	)

637 #i‚de‡
åa˚TASK_NOTIFY_TAKE


638 
	#åa˚TASK_NOTIFY_TAKE
()

	)

641 #i‚de‡
åa˚TASK_NOTIFY_WAIT_BLOCK


642 
	#åa˚TASK_NOTIFY_WAIT_BLOCK
()

	)

645 #i‚de‡
åa˚TASK_NOTIFY_WAIT


646 
	#åa˚TASK_NOTIFY_WAIT
()

	)

649 #i‚de‡
åa˚TASK_NOTIFY


650 
	#åa˚TASK_NOTIFY
()

	)

653 #i‚de‡
åa˚TASK_NOTIFY_FROM_ISR


654 
	#åa˚TASK_NOTIFY_FROM_ISR
()

	)

657 #i‚de‡
åa˚TASK_NOTIFY_GIVE_FROM_ISR


658 
	#åa˚TASK_NOTIFY_GIVE_FROM_ISR
()

	)

661 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


662 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

665 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

667 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


668 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

671 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


672 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


673 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

679 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


680 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

683 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


684 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

687 #i‚de‡
p‹tPRIVILEGE_BIT


688 
	#p‹tPRIVILEGE_BIT
 ( ( 
UBa£Ty≥_t
 ) 0x00 )

	)

691 #i‚de‡
p‹tYIELD_WITHIN_API


692 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

695 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


696 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 )

	)

699 #i‚de‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP


700 
	#c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 2

	)

703 #i‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 < 2

704 #îr‹ 
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 
mu°
 
nŸ
 
be
 
Àss
 
th™
 2

707 #i‚de‡
c⁄figUSE_TICKLESS_IDLE


708 
	#c⁄figUSE_TICKLESS_IDLE
 0

	)

711 #i‚de‡
c⁄figPRE_SLEEP_PROCESSING


712 
	#c⁄figPRE_SLEEP_PROCESSING
–
x
 )

	)

715 #i‚de‡
c⁄figPOST_SLEEP_PROCESSING


716 
	#c⁄figPOST_SLEEP_PROCESSING
–
x
 )

	)

719 #i‚de‡
c⁄figUSE_QUEUE_SETS


720 
	#c⁄figUSE_QUEUE_SETS
 0

	)

723 #i‚de‡
p‹tTASK_USES_FLOATING_POINT


724 
	#p‹tTASK_USES_FLOATING_POINT
()

	)

727 #i‚de‡
c⁄figUSE_TIME_SLICING


728 
	#c⁄figUSE_TIME_SLICING
 1

	)

731 #i‚de‡
c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS


732 
	#c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
 0

	)

735 #i‚de‡
c⁄figUSE_STATS_FORMATTING_FUNCTIONS


736 
	#c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 0

	)

739 #i‚de‡
p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID


740 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
()

	)

743 #i‚de‡
c⁄figUSE_TRACE_FACILITY


744 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

747 #i‚de‡
mtCOVERAGE_TEST_MARKER


748 
	#mtCOVERAGE_TEST_MARKER
()

	)

751 #i‚de‡
mtCOVERAGE_TEST_DELAY


752 
	#mtCOVERAGE_TEST_DELAY
()

	)

755 #i‚de‡
p‹tASSERT_IF_IN_ISR


756 
	#p‹tASSERT_IF_IN_ISR
()

	)

759 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


760 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 0

	)

763 #i‚de‡
c⁄figAPPLICATION_ALLOCATED_HEAP


764 
	#c⁄figAPPLICATION_ALLOCATED_HEAP
 0

	)

767 #i‚de‡
c⁄figUSE_TASK_NOTIFICATIONS


768 
	#c⁄figUSE_TASK_NOTIFICATIONS
 1

	)

771 #i‚de‡
p‹tTICK_TYPE_IS_ATOMIC


772 
	#p‹tTICK_TYPE_IS_ATOMIC
 0

	)

775 #i‚de‡
c⁄figSUPPORT_STATIC_ALLOCATION


777 
	#c⁄figSUPPORT_STATIC_ALLOCATION
 0

	)

780 #i‚de‡
c⁄figSUPPORT_DYNAMIC_ALLOCATION


782 
	#c⁄figSUPPORT_DYNAMIC_ALLOCATION
 1

	)

786 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

787 #if–
INCLUDE_vTaskSu•íd
 != 1 )

788 #îr‹ 
INCLUDE_vTaskSu•íd
 
mu°
 
be
 
£t
 
to
 1 
c⁄figUSE_TICKLESS_IDLE
 
is
 
nŸ
 setÅo 0

792 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 ) )

793 #îr‹ 
c⁄figSUPPORT_STATIC_ALLOCATION
 
™d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
ˇ¬Ÿ
 
bŸh
 
be
 0, 
but
 
ˇn
 both be 1.

796 #if––
c⁄figUSE_RECURSIVE_MUTEXES
 =1 ) && ( 
c⁄figUSE_MUTEXES
 != 1 ) )

797 #îr‹ 
c⁄figUSE_MUTEXES
 
mu°
 
be
 
£t
 
to
 1Åÿ
u£
 
ªcursive
 
muãxes


800 #if–
p‹tTICK_TYPE_IS_ATOMIC
 == 0 )

804 
	#p‹tTICK_TYPE_ENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

805 
	#p‹tTICK_TYPE_EXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

806 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

807 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
––x ) )

	)

811 
	#p‹tTICK_TYPE_ENTER_CRITICAL
()

	)

812 
	#p‹tTICK_TYPE_EXIT_CRITICAL
()

	)

813 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

814 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) ( Ë
	)
x

819 #i‚de‡
c⁄figENABLE_BACKWARD_COMPATIBILITY


820 
	#c⁄figENABLE_BACKWARD_COMPATIBILITY
 1

	)

823 #i‡
c⁄figENABLE_BACKWARD_COMPATIBILITY
 == 1

824 
	#eTaskSèãGë
 
eTaskGëSèã


	)

825 
	#p‹tTickTy≥
 
TickTy≥_t


	)

826 
	#xTaskH™dÀ
 
TaskH™dÀ_t


	)

827 
	#xQueueH™dÀ
 
QueueH™dÀ_t


	)

828 
	#xSem≠h‹eH™dÀ
 
Sem≠h‹eH™dÀ_t


	)

829 
	#xQueueSëH™dÀ
 
QueueSëH™dÀ_t


	)

830 
	#xQueueSëMembîH™dÀ
 
QueueSëMembîH™dÀ_t


	)

831 
	#xTimeOutTy≥
 
TimeOut_t


	)

832 
	#xMem‹yRegi⁄
 
Mem‹yRegi⁄_t


	)

833 
	#xTaskP¨amëîs
 
TaskP¨amëîs_t


	)

834 
	#xTaskSètusTy≥
 
TaskSètus_t


	)

835 
	#xTimîH™dÀ
 
TimîH™dÀ_t


	)

836 
	#xCoRoutöeH™dÀ
 
CoRoutöeH™dÀ_t


	)

837 
	#pdTASK_HOOK_CODE
 
TaskHookFun˘i⁄_t


	)

838 
	#p‹tTICK_RATE_MS
 
p‹tTICK_PERIOD_MS


	)

839 
	#pcTaskGëTaskName
 
pcTaskGëName


	)

840 
	#pcTimîGëTimîName
 
pcTimîGëName


	)

841 
	#pcQueueGëQueueName
 
pcQueueGëName


	)

842 
	#vTaskGëTaskInfo
 
vTaskGëInfo


	)

846 
	#tmrTIMER_CALLBACK
 
TimîCÆlbackFun˘i⁄_t


	)

847 
	#pdTASK_CODE
 
TaskFun˘i⁄_t


	)

848 
	#xLi°Iãm
 
Li°Iãm_t


	)

849 
	#xLi°
 
Li°_t


	)

852 #if–
c⁄figUSE_ALTERNATIVE_API
 != 0 )

853 #îr‹ 
The
 
Æã∫©ive
 
API
 
was
 
dïªˇãd
 
some
 
time
 
ago
, 
™d
 wa†
ªmoved
 
ö
 
FªeRTOS
 
V9
.0 0

860 #i‚de‡
c⁄figUSE_TASK_FPU_SUPPORT


861 
	#c⁄figUSE_TASK_FPU_SUPPORT
 1

	)

874 
	sxSTATIC_LIST_ITEM


876 
TickTy≥_t
 
xDummy1
;

877 *
pvDummy2
[ 4 ];

879 
xSTATIC_LIST_ITEM
 
	tSèticLi°Iãm_t
;

882 
	sxSTATIC_MINI_LIST_ITEM


884 
TickTy≥_t
 
xDummy1
;

885 *
pvDummy2
[ 2 ];

887 
xSTATIC_MINI_LIST_ITEM
 
	tSèticMöiLi°Iãm_t
;

890 
	sxSTATIC_LIST


892 
UBa£Ty≥_t
 
uxDummy1
;

893 *
pvDummy2
;

894 
SèticMöiLi°Iãm_t
 
xDummy3
;

895 } 
	tSèticLi°_t
;

910 
	sxSTATIC_TCB


912 *
pxDummy1
;

913 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

914 
xMPU_SETTINGS
 
xDummy2
;

916 
SèticLi°Iãm_t
 
xDummy3
[ 2 ];

917 
UBa£Ty≥_t
 
uxDummy5
;

918 *
pxDummy6
;

919 
uöt8_t
 
ucDummy7
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

920 #i‡–
p‹tSTACK_GROWTH
 > 0 )

921 *
pxDummy8
;

923 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

924 
UBa£Ty≥_t
 
uxDummy9
;

926 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

927 
UBa£Ty≥_t
 
uxDummy10
[ 2 ];

929 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

930 
UBa£Ty≥_t
 
uxDummy12
[ 2 ];

932 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

933 *
pxDummy14
;

935 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

936 *
pvDummy15
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

938 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

939 
uöt32_t
 
ulDummy16
;

941 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

942 
_ªít
 
xDummy17
;

944 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

945 
uöt32_t
 
ulDummy18
;

946 
uöt8_t
 
ucDummy19
;

948 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

949 
uöt8_t
 
uxDummy20
;

952 } 
	tSèticTask_t
;

968 
	sxSTATIC_QUEUE


970 *
pvDummy1
[ 3 ];

974 *
pvDummy2
;

975 
UBa£Ty≥_t
 
uxDummy2
;

976 } 
u
;

978 
SèticLi°_t
 
xDummy3
[ 2 ];

979 
UBa£Ty≥_t
 
uxDummy4
[ 3 ];

980 
uöt8_t
 
ucDummy5
[ 2 ];

982 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

983 
uöt8_t
 
ucDummy6
;

986 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

987 *
pvDummy7
;

990 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

991 
UBa£Ty≥_t
 
uxDummy8
;

992 
uöt8_t
 
ucDummy9
;

995 } 
	tSèticQueue_t
;

996 
SèticQueue_t
 
	tSèticSem≠h‹e_t
;

1012 
	sxSTATIC_EVENT_GROUP


1014 
TickTy≥_t
 
xDummy1
;

1015 
SèticLi°_t
 
xDummy2
;

1017 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1018 
UBa£Ty≥_t
 
uxDummy3
;

1021 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1022 
uöt8_t
 
ucDummy4
;

1025 } 
	tSèticEvítGroup_t
;

1041 
	sxSTATIC_TIMER


1043 *
pvDummy1
;

1044 
SèticLi°Iãm_t
 
xDummy2
;

1045 
TickTy≥_t
 
xDummy3
;

1046 
UBa£Ty≥_t
 
uxDummy4
;

1047 *
pvDummy5
[ 2 ];

1048 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1049 
UBa£Ty≥_t
 
uxDummy6
;

1052 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1053 
uöt8_t
 
ucDummy7
;

1056 } 
	tSèticTimî_t
;

1058 #ifde‡
__˝lu•lus


	@rtos/StackMacros.h

70 #i‚de‡
STACK_MACROS_H


71 
	#STACK_MACROS_H


	)

89 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

92 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

95 if–
pxCuºítTCB
->
pxT›OfSèck
 <pxCuºítTCB->
pxSèck
 ) \

97 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

99 }

	)

104 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

107 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

111 if–
pxCuºítTCB
->
pxT›OfSèck
 >pxCuºítTCB->
pxEndOfSèck
 ) \

113 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

115 }

	)

120 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

122 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

124 c⁄° 
uöt32_t
 * c⁄° 
pulSèck
 = ( uöt32_à* ) 
pxCuºítTCB
->
pxSèck
; \

125 c⁄° 
uöt32_t
 
ulCheckVÆue
 = ( uint32_t ) 0xa5a5a5a5; \

127 if––
pulSèck
[ 0 ] !
ulCheckVÆue
 ) || \

128 –
pulSèck
[ 1 ] !
ulCheckVÆue
 ) || \

129 –
pulSèck
[ 2 ] !
ulCheckVÆue
 ) || \

130 –
pulSèck
[ 3 ] !
ulCheckVÆue
 ) ) \

132 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

134 }

	)

139 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

141 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

143 
öt8_t
 *
pcEndOfSèck
 = ( i¡8_à* ) 
pxCuºítTCB
->
pxEndOfSèck
; \

144 c⁄° 
uöt8_t
 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

145 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

146 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

147 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

148 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

151 
pcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

154 if–
	`memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

156 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

158 }

	)

164 #i‚de‡
èskCHECK_FOR_STACK_OVERFLOW


165 
	#èskCHECK_FOR_STACK_OVERFLOW
()

	)

	@rtos/croutine.h

70 #i‚de‡
CO_ROUTINE_H


71 
	#CO_ROUTINE_H


	)

73 #i‚de‡
INC_FREERTOS_H


77 
	~"li°.h
"

79 #ifde‡
__˝lu•lus


86 * 
	tCoRoutöeH™dÀ_t
;

89 (*
¸COROUTINE_CODE
)–
	tCoRoutöeH™dÀ_t
, 
	tUBa£Ty≥_t
 );

91 
	sc‹CoRoutöeC⁄åﬁBlock


93 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

94 
Li°Iãm_t
 
xGíîicLi°Iãm
;

95 
Li°Iãm_t
 
xEvítLi°Iãm
;

96 
UBa£Ty≥_t
 
uxPri‹ôy
;

97 
UBa£Ty≥_t
 
uxIndex
;

98 
uöt16_t
 
uxSèã
;

99 } 
	tCRCB_t
;

173 
Ba£Ty≥_t
 
xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
UBa£Ty≥_t
 
uxPri‹ôy
, UBa£Ty≥_à
uxIndex
 );

215 
vCoRoutöeScheduÀ
( );

246 
	#¸START
–
pxCRCB
 )  ( ( 
CRCB_t
 * )–pxCRCB ) )->
uxSèã
 ) { 0:

	)

277 
	#¸END
(Ë}

	)

283 
	#¸SET_STATE0
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = (
__LINE__
 * 2); ; (__LINE__ * 2):

	)

284 
	#¸SET_STATE1
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = ((
__LINE__
 * 2)+1); ; ((__LINE__ * 2)+1):

	)

332 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

333 if––
xTicksToDñay
 ) > 0 ) \

335 
	`vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

337 
	`¸SET_STATE0
––
xH™dÀ
 ) );

	)

422 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

424 *–
pxResu…
 ) = 
	`xQueueCRSíd
––
pxQueue
Ë, ( 
pvIãmToQueue
Ë, ( 
xTicksToWaô
 ) ); \

425 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

427 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

428 *
pxResu…
 = 
	`xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

430 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

432 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

433 *
pxResu…
 = 
pdPASS
; \

435 }

	)

514 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

516 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

517 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

519 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

520 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), 0 ); \

522 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

524 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

525 *–
pxResu…
 ) = 
pdPASS
; \

527 }

	)

623 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) 
	`xQueueCRSídFromISR
––pxQueuê), (ÖvIãmToQueuê), ( xCoRoutöePªviou¶yWokí ) )

	)

736 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) 
	`xQueueCRRe˚iveFromISR
––pxQueuê), (ÖvBuf„∏), (ÖxCoRoutöeWokí ) )

	)

747 
vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
, 
Li°_t
 *
pxEvítLi°
 );

756 
Ba£Ty≥_t
 
xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 *
pxEvítLi°
 );

758 #ifde‡
__˝lu•lus


	@rtos/deprecated_definitions.h

70 #i‚de‡
DEPRECATED_DEFINITIONS_H


71 
	#DEPRECATED_DEFINITIONS_H


	)

83 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


84 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

85 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

88 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


89 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

90 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

93 #ifde‡
GCC_MEGA_AVR


94 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

97 #ifde‡
IAR_MEGA_AVR


98 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

101 #ifde‡
MPLAB_PIC24_PORT


102 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

105 #ifde‡
MPLAB_DSPIC_PORT


106 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

109 #ifde‡
MPLAB_PIC18F_PORT


110 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC18F/p‹tma¸o.h
"

113 #ifde‡
MPLAB_PIC32MX_PORT


114 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC32MX/p‹tma¸o.h
"

117 #ifde‡
_FEDPICC


118 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

121 #ifde‡
SDCC_CYGNAL


122 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

125 #ifde‡
GCC_ARM7


126 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

129 #ifde‡
GCC_ARM7_ECLIPSE


130 
	~"p‹tma¸o.h
"

133 #ifde‡
ROWLEY_LPC23xx


134 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

137 #ifde‡
IAR_MSP430


138 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

141 #ifde‡
GCC_MSP430


142 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

145 #ifde‡
ROWLEY_MSP430


146 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

149 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


150 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

153 #ifde‡
SAM7_GCC


154 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

157 #ifde‡
SAM7_IAR


158 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

161 #ifde‡
SAM9XE_IAR


162 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

165 #ifde‡
LPC2000_IAR


166 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

169 #ifde‡
STR71X_IAR


170 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

173 #ifde‡
STR75X_IAR


174 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

177 #ifde‡
STR75X_GCC


178 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

181 #ifde‡
STR91X_IAR


182 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

185 #ifde‡
GCC_H8S


186 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

189 #ifde‡
GCC_AT91FR40008


190 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

193 #ifde‡
RVDS_ARMCM3_LM3S102


194 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

197 #ifde‡
GCC_ARMCM3_LM3S102


198 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

201 #ifde‡
GCC_ARMCM3


202 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

205 #ifde‡
IAR_ARM_CM3


206 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

209 #ifde‡
IAR_ARMCM3_LM


210 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

213 #ifde‡
HCS12_CODE_WARRIOR


214 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

217 #ifde‡
MICROBLAZE_GCC


218 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

221 #ifde‡
TERN_EE


222 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

225 #ifde‡
GCC_HCS12


226 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

229 #ifde‡
GCC_MCF5235


230 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

233 #ifde‡
COLDFIRE_V2_GCC


234 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

237 #ifde‡
COLDFIRE_V2_CODEWARRIOR


238 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

241 #ifde‡
GCC_PPC405


242 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

245 #ifde‡
GCC_PPC440


246 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

249 #ifde‡
_16FX_SOFTUNE


250 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

253 #ifde‡
BCC_INDUSTRIAL_PC_PORT


256 
	~"‰c⁄fig.h
"

257 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

258 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

261 #ifde‡
BCC_FLASH_LITE_186_PORT


264 
	~"‰c⁄fig.h
"

265 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

266 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

269 #ifde‡
__GNUC__


270 #ifde‡
__AVR32_AVR32A__


271 
	~"p‹tma¸o.h
"

275 #ifde‡
__ICCAVR32__


276 #ifde‡
__CORE__


277 #i‡
__CORE__
 =
__AVR32A__


278 
	~"p‹tma¸o.h
"

283 #ifde‡
__91467D


284 
	~"p‹tma¸o.h
"

287 #ifde‡
__96340


288 
	~"p‹tma¸o.h
"

292 #ifde‡
__IAR_V850ES_Fx3__


293 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

296 #ifde‡
__IAR_V850ES_Jx3__


297 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

300 #ifde‡
__IAR_V850ES_Jx3_L__


301 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

304 #ifde‡
__IAR_V850ES_Jx2__


305 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

308 #ifde‡
__IAR_V850ES_Hx2__


309 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

312 #ifde‡
__IAR_78K0R_Kx3__


313 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

316 #ifde‡
__IAR_78K0R_Kx3L__


317 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

	@rtos/event_groups.h

70 #i‚de‡
EVENT_GROUPS_H


71 
	#EVENT_GROUPS_H


	)

73 #i‚de‡
INC_FREERTOS_H


74 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "includeÉvent_groups.h"

78 
	~"timîs.h
"

80 #ifde‡
__˝lu•lus


123 * 
	tEvítGroupH™dÀ_t
;

133 
TickTy≥_t
 
	tEvítBôs_t
;

187 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

188 
EvítGroupH™dÀ_t
 
xEvítGroupCª©e
–Ë
PRIVILEGED_FUNCTION
;

240 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

241 
EvítGroupH™dÀ_t
 
xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 ) 
PRIVILEGED_FUNCTION
;

336 
EvítBôs_t
 
xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

393 
EvítBôs_t
 
xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

448 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

449 
Ba£Ty≥_t
 
xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

451 
	#xEvítGroupCÀ¨BôsFromISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToCÀ¨, 
NULL
 )

	)

526 
EvítBôs_t
 
xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

600 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

601 
Ba£Ty≥_t
 
xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

603 
	#xEvítGroupSëBôsFromISR
–
xEvítGroup
, 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToSë,ÖxHighîPri‹ôyTaskWokí )

	)

730 
EvítBôs_t
 
xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

749 
	#xEvítGroupGëBôs
–
xEvítGroup
 ) 
	`xEvítGroupCÀ¨Bôs
–xEvítGroup, 0 )

	)

766 
EvítBôs_t
 
xEvítGroupGëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

780 
vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

783 
vEvítGroupSëBôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

784 
vEvítGroupCÀ¨BôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

787 #i‡(
c⁄figUSE_TRACE_FACILITY
 == 1)

788 
UBa£Ty≥_t
 
uxEvítGroupGëNumbî
–* 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

791 #ifde‡
__˝lu•lus


	@rtos/heap_1.c

78 
	~<°dlib.h
>

83 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

85 
	~"FªeRTOS.h
"

86 
	~"èsk.h
"

88 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


90 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

91 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

95 
	#c⁄figADJUSTED_HEAP_SIZE
 ( 
c⁄figTOTAL_HEAP_SIZE
 - 
p‹tBYTE_ALIGNMENT
 )

	)

99 #if–
c⁄figAPPLICATION_ALLOCATED_HEAP
 == 1 )

102 
uöt8_t
 
ucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

104 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

107 
size_t
 
	gxNextFªeByã
 = ( size_t ) 0;

111 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

113 *
pvRëu∫
 = 
NULL
;

114 
uöt8_t
 *
pucAlig√dHóp
 = 
NULL
;

117 #if–
p‹tBYTE_ALIGNMENT
 != 1 )

119 if–
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 )

122 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

127 
	`vTaskSu•ídAŒ
();

129 if–
pucAlig√dHóp
 =
NULL
 )

132 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 ) &
ucHóp
[ 
p‹tBYTE_ALIGNMENT
 ] ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

136 if–––
xNextFªeByã
 + 
xW™ãdSize
 ) < 
c⁄figADJUSTED_HEAP_SIZE
 ) &&

137 ––
xNextFªeByã
 + 
xW™ãdSize
 ) > xNextFreeByte ) )

141 
pvRëu∫
 = 
pucAlig√dHóp
 + 
xNextFªeByã
;

142 
xNextFªeByã
 +
xW™ãdSize
;

145 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

147 –Ë
	`xTaskResumeAŒ
();

149 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

151 if–
pvRëu∫
 =
NULL
 )

153 
	`vAµliˇti⁄MÆlocFaûedHook
( );

154 
	`vAµliˇti⁄MÆlocFaûedHook
();

159  
pvRëu∫
;

160 
	}
}

163 
	$vP‹tFªe
–*
pv
 )

168 –Ë
pv
;

171 
	`c⁄figASSERT
–
pv
 =
NULL
 );

172 
	}
}

175 
	$vP‹tInôüli£Blocks
( )

178 
xNextFªeByã
 = ( 
size_t
 ) 0;

179 
	}
}

182 
size_t
 
	$xP‹tGëFªeHópSize
( )

184  ( 
c⁄figADJUSTED_HEAP_SIZE
 - 
xNextFªeByã
 );

185 
	}
}

	@rtos/heap_2.c

79 
	~<°dlib.h
>

84 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

86 
	~"FªeRTOS.h
"

87 
	~"èsk.h
"

89 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


91 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

92 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

96 
	#c⁄figADJUSTED_HEAP_SIZE
 ( 
c⁄figTOTAL_HEAP_SIZE
 - 
p‹tBYTE_ALIGNMENT
 )

	)

101 
¥vHópInô
( );

104 #if–
c⁄figAPPLICATION_ALLOCATED_HEAP
 == 1 )

107 
uöt8_t
 
ucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

109 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

115 
	sA_BLOCK_LINK


117 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

118 
size_t
 
	mxBlockSize
;

119 } 
	tBlockLök_t
;

122 c⁄° 
uöt16_t
 
	ghópSTRUCT_SIZE
 = ( (  ( 
BlockLök_t
 ) + ( 
p‹tBYTE_ALIGNMENT
 - 1 ) ) & ~
p‹tBYTE_ALIGNMENT_MASK
 );

123 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
hópSTRUCT_SIZE
 * 2 ) )

	)

126 
BlockLök_t
 
	gxSèπ
, 
	gxEnd
;

130 
size_t
 
	gxFªeByãsRemaöög
 = 
c⁄figADJUSTED_HEAP_SIZE
;

139 
	#¥vIn£πBlockI¡oFªeLi°
–
pxBlockToIn£π
 ) \

141 
BlockLök_t
 *
pxIãøt‹
; \

142 
size_t
 
xBlockSize
; \

144 
xBlockSize
 = 
pxBlockToIn£π
->xBlockSize; \

148  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
->
xBlockSize
 < xBlockSize;ÖxIterator =ÖxIterator->pxNextFreeBlock ) \

155 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock; \

156 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
; \

157 }

	)

160 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

162 
BlockLök_t
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

163 
Ba£Ty≥_t
 
xHópHasBìnInôüli£d
 = 
pdFALSE
;

164 *
pvRëu∫
 = 
NULL
;

166 
	`vTaskSu•ídAŒ
();

170 if–
xHópHasBìnInôüli£d
 =
pdFALSE
 )

172 
	`¥vHópInô
();

173 
xHópHasBìnInôüli£d
 = 
pdTRUE
;

178 if–
xW™ãdSize
 > 0 )

180 
xW™ãdSize
 +
hópSTRUCT_SIZE
;

183 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

186 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

190 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê< 
c⁄figADJUSTED_HEAP_SIZE
 ) )

194 
pxPªviousBlock
 = &
xSèπ
;

195 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

196  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

198 
pxPªviousBlock
 = 
pxBlock
;

199 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

203 if–
pxBlock
 !&
xEnd
 )

207 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
hópSTRUCT_SIZE
 );

211 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

214 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

219 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

223 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

224 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

227 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

230 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

234 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

236 –Ë
	`xTaskResumeAŒ
();

238 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

240 if–
pvRëu∫
 =
NULL
 )

242 
	`vAµliˇti⁄MÆlocFaûedHook
( );

243 
	`vAµliˇti⁄MÆlocFaûedHook
();

248  
pvRëu∫
;

249 
	}
}

252 
	$vP‹tFªe
–*
pv
 )

254 
uöt8_t
 *
puc
 = ( uöt8_à* ) 
pv
;

255 
BlockLök_t
 *
pxLök
;

257 if–
pv
 !
NULL
 )

261 
puc
 -
hópSTRUCT_SIZE
;

265 
pxLök
 = ( * ) 
puc
;

267 
	`vTaskSu•ídAŒ
();

270 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

271 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

272 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

274 –Ë
	`xTaskResumeAŒ
();

276 
	}
}

279 
size_t
 
	$xP‹tGëFªeHópSize
( )

281  
xFªeByãsRemaöög
;

282 
	}
}

285 
	$vP‹tInôüli£Blocks
( )

288 
	}
}

291 
	$¥vHópInô
( )

293 
BlockLök_t
 *
pxFú°FªeBlock
;

294 
uöt8_t
 *
pucAlig√dHóp
;

297 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 ) &
ucHóp
[ 
p‹tBYTE_ALIGNMENT
 ] ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

301 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
pucAlig√dHóp
;

302 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

305 
xEnd
.
xBlockSize
 = 
c⁄figADJUSTED_HEAP_SIZE
;

306 
xEnd
.
pxNextFªeBlock
 = 
NULL
;

310 
pxFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

311 
pxFú°FªeBlock
->
xBlockSize
 = 
c⁄figADJUSTED_HEAP_SIZE
;

312 
pxFú°FªeBlock
->
pxNextFªeBlock
 = &
xEnd
;

313 
	}
}

	@rtos/heap_3.c

82 
	~<°dlib.h
>

87 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

89 
	~"FªeRTOS.h
"

90 
	~"èsk.h
"

92 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


94 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

95 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

100 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

102 *
pvRëu∫
;

104 
	`vTaskSu•ídAŒ
();

106 
pvRëu∫
 = 
	`mÆloc
–
xW™ãdSize
 );

107 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

109 –Ë
	`xTaskResumeAŒ
();

111 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

113 if–
pvRëu∫
 =
NULL
 )

115 
	`vAµliˇti⁄MÆlocFaûedHook
( );

116 
	`vAµliˇti⁄MÆlocFaûedHook
();

121  
pvRëu∫
;

122 
	}
}

125 
	$vP‹tFªe
–*
pv
 )

127 if–
pv
 )

129 
	`vTaskSu•ídAŒ
();

131 
	`‰ì
–
pv
 );

132 
	`åa˚FREE
–
pv
, 0 );

134 –Ë
	`xTaskResumeAŒ
();

136 
	}
}

	@rtos/heap_4.c

78 
	~<°dlib.h
>

83 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

85 
	~"FªeRTOS.h
"

86 
	~"èsk.h
"

88 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


90 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

91 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

95 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
xHópSåu˘Size
 << 1 ) )

	)

98 
	#hópBITS_PER_BYTE
 ( ( 
size_t
 ) 8 )

	)

101 #if–
c⁄figAPPLICATION_ALLOCATED_HEAP
 == 1 )

104 
uöt8_t
 
ucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

106 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

111 
	sA_BLOCK_LINK


113 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

114 
size_t
 
	mxBlockSize
;

115 } 
	tBlockLök_t
;

125 
¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 );

131 
¥vHópInô
( );

137 c⁄° 
size_t
 
	gxHópSåu˘Size
 = ( –
BlockLök_t
 ) + ( ( size_àË–
p‹tBYTE_ALIGNMENT
 - 1 ) ) ) & ~––size_àË
p‹tBYTE_ALIGNMENT_MASK
 );

140 
BlockLök_t
 
	gxSèπ
, *
	gpxEnd
 = 
NULL
;

144 
size_t
 
	gxFªeByãsRemaöög
 = 0U;

145 
size_t
 
	gxMöimumEvîFªeByãsRemaöög
 = 0U;

151 
size_t
 
	gxBlockAŒoˇãdBô
 = 0;

155 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

157 
BlockLök_t
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

158 *
pvRëu∫
 = 
NULL
;

160 
	`vTaskSu•ídAŒ
();

164 if–
pxEnd
 =
NULL
 )

166 
	`¥vHópInô
();

170 
	`mtCOVERAGE_TEST_MARKER
();

177 if––
xW™ãdSize
 & 
xBlockAŒoˇãdBô
 ) == 0 )

181 if–
xW™ãdSize
 > 0 )

183 
xW™ãdSize
 +
xHópSåu˘Size
;

187 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0x00 )

190 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

191 
	`c⁄figASSERT
––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

195 
	`mtCOVERAGE_TEST_MARKER
();

200 
	`mtCOVERAGE_TEST_MARKER
();

203 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê<
xFªeByãsRemaöög
 ) )

207 
pxPªviousBlock
 = &
xSèπ
;

208 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

209  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

211 
pxPªviousBlock
 = 
pxBlock
;

212 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

217 if–
pxBlock
 !
pxEnd
 )

221 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
xHópSåu˘Size
 );

225 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

229 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

235 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

236 
	`c⁄figASSERT
––––
size_t
 ) 
pxNewBlockLök
 ) & 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

240 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

241 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

244 
	`¥vIn£πBlockI¡oFªeLi°
–
pxNewBlockLök
 );

248 
	`mtCOVERAGE_TEST_MARKER
();

251 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

253 if–
xFªeByãsRemaöög
 < 
xMöimumEvîFªeByãsRemaöög
 )

255 
xMöimumEvîFªeByãsRemaöög
 = 
xFªeByãsRemaöög
;

259 
	`mtCOVERAGE_TEST_MARKER
();

264 
pxBlock
->
xBlockSize
 |
xBlockAŒoˇãdBô
;

265 
pxBlock
->
pxNextFªeBlock
 = 
NULL
;

269 
	`mtCOVERAGE_TEST_MARKER
();

274 
	`mtCOVERAGE_TEST_MARKER
();

279 
	`mtCOVERAGE_TEST_MARKER
();

282 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

284 –Ë
	`xTaskResumeAŒ
();

286 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

288 if–
pvRëu∫
 =
NULL
 )

290 
	`vAµliˇti⁄MÆlocFaûedHook
( );

291 
	`vAµliˇti⁄MÆlocFaûedHook
();

295 
	`mtCOVERAGE_TEST_MARKER
();

300 
	`c⁄figASSERT
––––
size_t
 ) 
pvRëu∫
 ) & ( size_àË
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

301  
pvRëu∫
;

302 
	}
}

305 
	$vP‹tFªe
–*
pv
 )

307 
uöt8_t
 *
puc
 = ( uöt8_à* ) 
pv
;

308 
BlockLök_t
 *
pxLök
;

310 if–
pv
 !
NULL
 )

314 
puc
 -
xHópSåu˘Size
;

317 
pxLök
 = ( * ) 
puc
;

320 
	`c⁄figASSERT
––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 );

321 
	`c⁄figASSERT
–
pxLök
->
pxNextFªeBlock
 =
NULL
 );

323 if––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 )

325 if–
pxLök
->
pxNextFªeBlock
 =
NULL
 )

329 
pxLök
->
xBlockSize
 &~
xBlockAŒoˇãdBô
;

331 
	`vTaskSu•ídAŒ
();

334 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

335 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

336 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

338 –Ë
	`xTaskResumeAŒ
();

342 
	`mtCOVERAGE_TEST_MARKER
();

347 
	`mtCOVERAGE_TEST_MARKER
();

350 
	}
}

353 
size_t
 
	$xP‹tGëFªeHópSize
( )

355  
xFªeByãsRemaöög
;

356 
	}
}

359 
size_t
 
	$xP‹tGëMöimumEvîFªeHópSize
( )

361  
xMöimumEvîFªeByãsRemaöög
;

362 
	}
}

365 
	$vP‹tInôüli£Blocks
( )

368 
	}
}

371 
	$¥vHópInô
( )

373 
BlockLök_t
 *
pxFú°FªeBlock
;

374 
uöt8_t
 *
pucAlig√dHóp
;

375 
size_t
 
uxAddªss
;

376 
size_t
 
xTŸÆHópSize
 = 
c⁄figTOTAL_HEAP_SIZE
;

379 
uxAddªss
 = ( 
size_t
 ) 
ucHóp
;

381 if––
uxAddªss
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

383 
uxAddªss
 +–
p‹tBYTE_ALIGNMENT
 - 1 );

384 
uxAddªss
 &~––
size_t
 ) 
p‹tBYTE_ALIGNMENT_MASK
 );

385 
xTŸÆHópSize
 -
uxAddªss
 - ( 
size_t
 ) 
ucHóp
;

388 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) 
uxAddªss
;

392 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
pucAlig√dHóp
;

393 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

397 
uxAddªss
 = ( ( 
size_t
 ) 
pucAlig√dHóp
 ) + 
xTŸÆHópSize
;

398 
uxAddªss
 -
xHópSåu˘Size
;

399 
uxAddªss
 &~––
size_t
 ) 
p‹tBYTE_ALIGNMENT_MASK
 );

400 
pxEnd
 = ( * ) 
uxAddªss
;

401 
pxEnd
->
xBlockSize
 = 0;

402 
pxEnd
->
pxNextFªeBlock
 = 
NULL
;

406 
pxFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

407 
pxFú°FªeBlock
->
xBlockSize
 = 
uxAddªss
 - ( 
size_t
 )ÖxFirstFreeBlock;

408 
pxFú°FªeBlock
->
pxNextFªeBlock
 = 
pxEnd
;

411 
xMöimumEvîFªeByãsRemaöög
 = 
pxFú°FªeBlock
->
xBlockSize
;

412 
xFªeByãsRemaöög
 = 
pxFú°FªeBlock
->
xBlockSize
;

415 
xBlockAŒoˇãdBô
 = ( ( 
size_t
 ) 1 ) << ( ( –size_àË* 
hópBITS_PER_BYTE
 ) - 1 );

416 
	}
}

419 
	$¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 )

421 
BlockLök_t
 *
pxIãøt‹
;

422 
uöt8_t
 *
puc
;

426  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
 < 
pxBlockToIn£π
;ÖxIterator =ÖxIterator->pxNextFreeBlock )

433 
puc
 = ( 
uöt8_t
 * ) 
pxIãøt‹
;

434 if––
puc
 + 
pxIãøt‹
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxBlockToIn£π
 )

436 
pxIãøt‹
->
xBlockSize
 +
pxBlockToIn£π
->xBlockSize;

437 
pxBlockToIn£π
 = 
pxIãøt‹
;

441 
	`mtCOVERAGE_TEST_MARKER
();

446 
puc
 = ( 
uöt8_t
 * ) 
pxBlockToIn£π
;

447 if––
puc
 + 
pxBlockToIn£π
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxIãøt‹
->
pxNextFªeBlock
 )

449 if–
pxIãøt‹
->
pxNextFªeBlock
 !
pxEnd
 )

452 
pxBlockToIn£π
->
xBlockSize
 +
pxIãøt‹
->
pxNextFªeBlock
->xBlockSize;

453 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock->pxNextFreeBlock;

457 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxEnd
;

462 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock;

469 if–
pxIãøt‹
 !
pxBlockToIn£π
 )

471 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
;

475 
	`mtCOVERAGE_TEST_MARKER
();

477 
	}
}

	@rtos/heap_5.c

112 
	~<°dlib.h
>

117 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

119 
	~"FªeRTOS.h
"

120 
	~"èsk.h
"

122 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


124 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

125 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

129 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
xHópSåu˘Size
 << 1 ) )

	)

132 
	#hópBITS_PER_BYTE
 ( ( 
size_t
 ) 8 )

	)

136 
	sA_BLOCK_LINK


138 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

139 
size_t
 
	mxBlockSize
;

140 } 
	tBlockLök_t
;

150 
¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 );

156 c⁄° 
size_t
 
	gxHópSåu˘Size
 = ( –
BlockLök_t
 ) + ( ( size_àË–
p‹tBYTE_ALIGNMENT
 - 1 ) ) ) & ~––size_àË
p‹tBYTE_ALIGNMENT_MASK
 );

159 
BlockLök_t
 
	gxSèπ
, *
	gpxEnd
 = 
NULL
;

163 
size_t
 
	gxFªeByãsRemaöög
 = 0U;

164 
size_t
 
	gxMöimumEvîFªeByãsRemaöög
 = 0U;

170 
size_t
 
	gxBlockAŒoˇãdBô
 = 0;

174 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

176 
BlockLök_t
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

177 *
pvRëu∫
 = 
NULL
;

181 
	`c⁄figASSERT
–
pxEnd
 );

183 
	`vTaskSu•ídAŒ
();

189 if––
xW™ãdSize
 & 
xBlockAŒoˇãdBô
 ) == 0 )

193 if–
xW™ãdSize
 > 0 )

195 
xW™ãdSize
 +
xHópSåu˘Size
;

199 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0x00 )

202 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

206 
	`mtCOVERAGE_TEST_MARKER
();

211 
	`mtCOVERAGE_TEST_MARKER
();

214 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê<
xFªeByãsRemaöög
 ) )

218 
pxPªviousBlock
 = &
xSèπ
;

219 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

220  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

222 
pxPªviousBlock
 = 
pxBlock
;

223 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

228 if–
pxBlock
 !
pxEnd
 )

232 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
xHópSåu˘Size
 );

236 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

240 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

246 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

250 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

251 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

254 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

258 
	`mtCOVERAGE_TEST_MARKER
();

261 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

263 if–
xFªeByãsRemaöög
 < 
xMöimumEvîFªeByãsRemaöög
 )

265 
xMöimumEvîFªeByãsRemaöög
 = 
xFªeByãsRemaöög
;

269 
	`mtCOVERAGE_TEST_MARKER
();

274 
pxBlock
->
xBlockSize
 |
xBlockAŒoˇãdBô
;

275 
pxBlock
->
pxNextFªeBlock
 = 
NULL
;

279 
	`mtCOVERAGE_TEST_MARKER
();

284 
	`mtCOVERAGE_TEST_MARKER
();

289 
	`mtCOVERAGE_TEST_MARKER
();

292 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

294 –Ë
	`xTaskResumeAŒ
();

296 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

298 if–
pvRëu∫
 =
NULL
 )

300 
	`vAµliˇti⁄MÆlocFaûedHook
( );

301 
	`vAµliˇti⁄MÆlocFaûedHook
();

305 
	`mtCOVERAGE_TEST_MARKER
();

310  
pvRëu∫
;

311 
	}
}

314 
	$vP‹tFªe
–*
pv
 )

316 
uöt8_t
 *
puc
 = ( uöt8_à* ) 
pv
;

317 
BlockLök_t
 *
pxLök
;

319 if–
pv
 !
NULL
 )

323 
puc
 -
xHópSåu˘Size
;

326 
pxLök
 = ( * ) 
puc
;

329 
	`c⁄figASSERT
––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 );

330 
	`c⁄figASSERT
–
pxLök
->
pxNextFªeBlock
 =
NULL
 );

332 if––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 )

334 if–
pxLök
->
pxNextFªeBlock
 =
NULL
 )

338 
pxLök
->
xBlockSize
 &~
xBlockAŒoˇãdBô
;

340 
	`vTaskSu•ídAŒ
();

343 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

344 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

345 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

347 –Ë
	`xTaskResumeAŒ
();

351 
	`mtCOVERAGE_TEST_MARKER
();

356 
	`mtCOVERAGE_TEST_MARKER
();

359 
	}
}

362 
size_t
 
	$xP‹tGëFªeHópSize
( )

364  
xFªeByãsRemaöög
;

365 
	}
}

368 
size_t
 
	$xP‹tGëMöimumEvîFªeHópSize
( )

370  
xMöimumEvîFªeByãsRemaöög
;

371 
	}
}

374 
	$¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 )

376 
BlockLök_t
 *
pxIãøt‹
;

377 
uöt8_t
 *
puc
;

381  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
 < 
pxBlockToIn£π
;ÖxIterator =ÖxIterator->pxNextFreeBlock )

388 
puc
 = ( 
uöt8_t
 * ) 
pxIãøt‹
;

389 if––
puc
 + 
pxIãøt‹
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxBlockToIn£π
 )

391 
pxIãøt‹
->
xBlockSize
 +
pxBlockToIn£π
->xBlockSize;

392 
pxBlockToIn£π
 = 
pxIãøt‹
;

396 
	`mtCOVERAGE_TEST_MARKER
();

401 
puc
 = ( 
uöt8_t
 * ) 
pxBlockToIn£π
;

402 if––
puc
 + 
pxBlockToIn£π
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxIãøt‹
->
pxNextFªeBlock
 )

404 if–
pxIãøt‹
->
pxNextFªeBlock
 !
pxEnd
 )

407 
pxBlockToIn£π
->
xBlockSize
 +
pxIãøt‹
->
pxNextFªeBlock
->xBlockSize;

408 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock->pxNextFreeBlock;

412 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxEnd
;

417 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock;

424 if–
pxIãøt‹
 !
pxBlockToIn£π
 )

426 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
;

430 
	`mtCOVERAGE_TEST_MARKER
();

432 
	}
}

435 
	$vP‹tDeföeHópRegi⁄s
–c⁄° 
HópRegi⁄_t
 * c⁄° 
pxHópRegi⁄s
 )

437 
BlockLök_t
 *
pxFú°FªeBlockInRegi⁄
 = 
NULL
, *
pxPªviousFªeBlock
;

438 
size_t
 
xAlig√dHóp
;

439 
size_t
 
xTŸÆRegi⁄Size
, 
xTŸÆHópSize
 = 0;

440 
Ba£Ty≥_t
 
xDeföedRegi⁄s
 = 0;

441 
size_t
 
xAddªss
;

442 c⁄° 
HópRegi⁄_t
 *
pxHópRegi⁄
;

445 
	`c⁄figASSERT
–
pxEnd
 =
NULL
 );

447 
pxHópRegi⁄
 = &–
pxHópRegi⁄s
[ 
xDeföedRegi⁄s
 ] );

449  
pxHópRegi⁄
->
xSizeInByãs
 > 0 )

451 
xTŸÆRegi⁄Size
 = 
pxHópRegi⁄
->
xSizeInByãs
;

454 
xAddªss
 = ( 
size_t
 ) 
pxHópRegi⁄
->
pucSèπAddªss
;

455 if––
xAddªss
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

457 
xAddªss
 +–
p‹tBYTE_ALIGNMENT
 - 1 );

458 
xAddªss
 &~
p‹tBYTE_ALIGNMENT_MASK
;

461 
xTŸÆRegi⁄Size
 -
xAddªss
 - ( 
size_t
 ) 
pxHópRegi⁄
->
pucSèπAddªss
;

464 
xAlig√dHóp
 = 
xAddªss
;

467 if–
xDeföedRegi⁄s
 == 0 )

471 
xSèπ
.
pxNextFªeBlock
 = ( 
BlockLök_t
 * ) 
xAlig√dHóp
;

472 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

478 
	`c⁄figASSERT
–
pxEnd
 !
NULL
 );

481 
	`c⁄figASSERT
–
xAddªss
 > ( 
size_t
 ) 
pxEnd
 );

486 
pxPªviousFªeBlock
 = 
pxEnd
;

490 
xAddªss
 = 
xAlig√dHóp
 + 
xTŸÆRegi⁄Size
;

491 
xAddªss
 -
xHópSåu˘Size
;

492 
xAddªss
 &~
p‹tBYTE_ALIGNMENT_MASK
;

493 
pxEnd
 = ( 
BlockLök_t
 * ) 
xAddªss
;

494 
pxEnd
->
xBlockSize
 = 0;

495 
pxEnd
->
pxNextFªeBlock
 = 
NULL
;

500 
pxFú°FªeBlockInRegi⁄
 = ( 
BlockLök_t
 * ) 
xAlig√dHóp
;

501 
pxFú°FªeBlockInRegi⁄
->
xBlockSize
 = 
xAddªss
 - ( 
size_t
 )ÖxFirstFreeBlockInRegion;

502 
pxFú°FªeBlockInRegi⁄
->
pxNextFªeBlock
 = 
pxEnd
;

506 if–
pxPªviousFªeBlock
 !
NULL
 )

508 
pxPªviousFªeBlock
->
pxNextFªeBlock
 = 
pxFú°FªeBlockInRegi⁄
;

511 
xTŸÆHópSize
 +
pxFú°FªeBlockInRegi⁄
->
xBlockSize
;

514 
xDeföedRegi⁄s
++;

515 
pxHópRegi⁄
 = &–
pxHópRegi⁄s
[ 
xDeföedRegi⁄s
 ] );

518 
xMöimumEvîFªeByãsRemaöög
 = 
xTŸÆHópSize
;

519 
xFªeByãsRemaöög
 = 
xTŸÆHópSize
;

522 
	`c⁄figASSERT
–
xTŸÆHópSize
 );

525 
xBlockAŒoˇãdBô
 = ( ( 
size_t
 ) 1 ) << ( ( –size_àË* 
hópBITS_PER_BYTE
 ) - 1 );

526 
	}
}

	@rtos/list.c

71 
	~<°dlib.h
>

72 
	~"FªeRTOS.h
"

73 
	~"li°.h
"

79 
	$vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 )

84 
pxLi°
->
pxIndex
 = ( 
Li°Iãm_t
 * ) &–pxLi°->
xLi°End
 );

88 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

92 
pxLi°
->
xLi°End
.
pxNext
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

93 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

95 
pxLi°
->
uxNumbîOfIãms
 = ( 
UBa£Ty≥_t
 ) 0U;

99 
	`li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 );

100 
	`li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 );

101 
	}
}

104 
	$vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 )

107 
pxIãm
->
pvC⁄èöî
 = 
NULL
;

111 
	`li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

112 
	`li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

113 
	}
}

116 
	$vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

118 
Li°Iãm_t
 * c⁄° 
pxIndex
 = 
pxLi°
->pxIndex;

123 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

124 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

129 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
;

130 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIndex
->pxPrevious;

133 
	`mtCOVERAGE_TEST_DELAY
();

135 
pxIndex
->
pxPªvious
->
pxNext
 = 
pxNewLi°Iãm
;

136 
pxIndex
->
pxPªvious
 = 
pxNewLi°Iãm
;

139 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

141 –
pxLi°
->
uxNumbîOfIãms
 )++;

142 
	}
}

145 
	$vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

147 
Li°Iãm_t
 *
pxIãøt‹
;

148 c⁄° 
TickTy≥_t
 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

153 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

154 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

164 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

166 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

192  
pxIãøt‹
 = ( 
Li°Iãm_t
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

199 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

200 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 =ÖxNewListItem;

201 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

202 
pxIãøt‹
->
pxNext
 = 
pxNewLi°Iãm
;

206 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

208 –
pxLi°
->
uxNumbîOfIãms
 )++;

209 
	}
}

212 
UBa£Ty≥_t
 
	$uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 )

216 
Li°_t
 * c⁄° 
pxLi°
 = ( Li°_à* ) 
pxIãmToRemove
->
pvC⁄èöî
;

218 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

219 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

222 
	`mtCOVERAGE_TEST_DELAY
();

225 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

227 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

231 
	`mtCOVERAGE_TEST_MARKER
();

234 
pxIãmToRemove
->
pvC⁄èöî
 = 
NULL
;

235 –
pxLi°
->
uxNumbîOfIãms
 )--;

237  
pxLi°
->
uxNumbîOfIãms
;

238 
	}
}

	@rtos/list.h

98 #i‚de‡
INC_FREERTOS_H


99 #îr‹ 
FªeRTOS
.
h
 
mu°
 
be
 
ö˛uded
 
bef‹e
 
li°
.h

102 #i‚de‡
LIST_H


103 
	#LIST_H


	)

133 #i‚de‡
c⁄figLIST_VOLATILE


134 
	#c⁄figLIST_VOLATILE


	)

137 #ifde‡
__˝lu•lus


146 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 0 )

148 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

149 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

150 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE


	)

151 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE


	)

152 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

153 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

154 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 )

	)

155 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 )

	)

156 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 )

	)

157 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 )

	)

160 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue1
;

	)

161 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue2
;

	)

162 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue1
;

	)

163 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue2
;

	)

166 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

167 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

168 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

169 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

173 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 ) 
	`c⁄figASSERT
–––pxIãm )->
xLi°IãmI¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

174 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 ) 
	`c⁄figASSERT
–––pxLi° )->
xLi°I¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxLi° )->
xLi°I¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

181 
	sxLIST_ITEM


183 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


184 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

185 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

186 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

187 * 
	gpvOw√r
;

188 * 
c⁄figLIST_VOLATILE
 
	gpvC⁄èöî
;

189 
	gli°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


191 
xLIST_ITEM
 
	tLi°Iãm_t
;

193 
	sxMINI_LIST_ITEM


195 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


196 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

197 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

198 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

200 
xMINI_LIST_ITEM
 
	tMöiLi°Iãm_t
;

205 
	sxLIST


207 
li°FIRST_LIST_INTEGRITY_CHECK_VALUE


208 
c⁄figLIST_VOLATILE
 
UBa£Ty≥_t
 
	guxNumbîOfIãms
;

209 
Li°Iãm_t
 * 
c⁄figLIST_VOLATILE
 
	gpxIndex
;

210 
MöiLi°Iãm_t
 
	gxLi°End
;

211 
	gli°SECOND_LIST_INTEGRITY_CHECK_VALUE


212 } 
	tLi°_t
;

221 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) ( (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏Ë)

	)

230 
	#li°GET_LIST_ITEM_OWNER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvOw√r
 )

	)

239 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuêË)

	)

249 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

258 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
->
xIãmVÆue
 )

	)

266 
	#li°GET_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
 )

	)

274 
	#li°GET_NEXT
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxNext
 )

	)

282 
	#li°GET_END_MARKER
–
pxLi°
 ) ( ( 
Li°Iãm_t
 c⁄° * ) ( &––pxLi° )->
xLi°End
 ) ) )

	)

291 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 =–
UBa£Ty≥_t
 ) 0 ) )

	)

296 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

318 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

320 
Li°_t
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

323 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

324 if––* ) ( 
pxC⁄°Li°
 )->
pxIndex
 =–* ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

326 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

328 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

329 }

	)

348 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
pvOw√r
 )

	)

359 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 =–* ) (ÖxLi° ) ) )

	)

367 
	#li°LIST_ITEM_CONTAINER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 )

	)

374 
	#li°LIST_IS_INITIALISED
–
pxLi°
 ) ( (ÖxLi° )->
xLi°End
.
xIãmVÆue
 =
p‹tMAX_DELAY
 )

	)

386 
vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 ) 
	gPRIVILEGED_FUNCTION
;

397 
vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 ) 
	gPRIVILEGED_FUNCTION
;

410 
vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

431 
vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

446 
UBa£Ty≥_t
 
uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 ) 
	gPRIVILEGED_FUNCTION
;

448 #ifde‡
__˝lu•lus


	@rtos/mpu_prototypes.h

79 #i‚de‡
MPU_PROTOTYPES_H


80 
	#MPU_PROTOTYPES_H


	)

83 
Ba£Ty≥_t
 
MPU_xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt16_t
 
usSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 );

84 
TaskH™dÀ_t
 
MPU_xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt32_t
 
ulSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
, 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 );

85 
Ba£Ty≥_t
 
MPU_xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 );

86 
MPU_vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 );

87 
MPU_vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 );

88 
MPU_vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 );

89 
MPU_vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 );

90 
Ba£Ty≥_t
 
MPU_xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 );

91 
UBa£Ty≥_t
 
MPU_uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 );

92 
eTaskSèã
 
MPU_eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 );

93 
MPU_vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 );

94 
MPU_vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 );

95 
MPU_vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 );

96 
MPU_vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 );

97 
MPU_vTaskSèπScheduÀr
( );

98 
MPU_vTaskSu•ídAŒ
( );

99 
Ba£Ty≥_t
 
MPU_xTaskResumeAŒ
( );

100 
TickTy≥_t
 
MPU_xTaskGëTickCou¡
( );

101 
UBa£Ty≥_t
 
MPU_uxTaskGëNumbîOfTasks
( );

102 * 
MPU_pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 );

103 
TaskH™dÀ_t
 
MPU_xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 );

104 
UBa£Ty≥_t
 
MPU_uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 );

105 
MPU_vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 );

106 
TaskHookFun˘i⁄_t
 
MPU_xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 );

107 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 );

108 * 
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 );

109 
Ba£Ty≥_t
 
MPU_xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 );

110 
TaskH™dÀ_t
 
MPU_xTaskGëIdÀTaskH™dÀ
( );

111 
UBa£Ty≥_t
 
MPU_uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 );

112 
MPU_vTaskLi°
–* 
pcWrôeBuf„r
 );

113 
MPU_vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 );

114 
Ba£Ty≥_t
 
MPU_xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 );

115 
Ba£Ty≥_t
 
MPU_xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 );

116 
uöt32_t
 
MPU_ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 );

117 
Ba£Ty≥_t
 
MPU_xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 );

118 
Ba£Ty≥_t
 
MPU_xTaskIn¸emítTick
( );

119 
TaskH™dÀ_t
 
MPU_xTaskGëCuºítTaskH™dÀ
( );

120 
MPU_vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 );

121 
Ba£Ty≥_t
 
MPU_xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 );

122 
MPU_vTaskMis£dYõld
( );

123 
Ba£Ty≥_t
 
MPU_xTaskGëScheduÀrSèã
( );

126 
Ba£Ty≥_t
 
MPU_xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 );

127 
Ba£Ty≥_t
 
MPU_xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xJu°Pìk
 );

128 
UBa£Ty≥_t
 
MPU_uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 );

129 
UBa£Ty≥_t
 
MPU_uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 );

130 
MPU_vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 );

131 
QueueH™dÀ_t
 
MPU_xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 );

132 
QueueH™dÀ_t
 
MPU_xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 );

133 
QueueH™dÀ_t
 
MPU_xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 );

134 
QueueH™dÀ_t
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 );

135 * 
MPU_xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 );

136 
Ba£Ty≥_t
 
MPU_xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 );

137 
Ba£Ty≥_t
 
MPU_xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
pxMuãx
 );

138 
MPU_vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
 );

139 
MPU_vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 );

140 c⁄° * 
MPU_pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 );

141 
QueueH™dÀ_t
 
MPU_xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 );

142 
QueueH™dÀ_t
 
MPU_xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 );

143 
QueueSëH™dÀ_t
 
MPU_xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 );

144 
Ba£Ty≥_t
 
MPU_xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 );

145 
Ba£Ty≥_t
 
MPU_xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 );

146 
QueueSëMembîH™dÀ_t
 
MPU_xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 );

147 
Ba£Ty≥_t
 
MPU_xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
 );

148 
MPU_vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 );

149 
UBa£Ty≥_t
 
MPU_uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 );

150 
uöt8_t
 
MPU_ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 );

153 
TimîH™dÀ_t
 
MPU_xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 );

154 
TimîH™dÀ_t
 
MPU_xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
, 
SèticTimî_t
 *
pxTimîBuf„r
 );

155 * 
MPU_pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 );

156 
MPU_vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 );

157 
Ba£Ty≥_t
 
MPU_xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 );

158 
TaskH™dÀ_t
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ
( );

159 
Ba£Ty≥_t
 
MPU_xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 );

160 c⁄° * 
MPU_pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 );

161 
TickTy≥_t
 
MPU_xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 );

162 
TickTy≥_t
 
MPU_xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 );

163 
Ba£Ty≥_t
 
MPU_xTimîCª©eTimîTask
( );

164 
Ba£Ty≥_t
 
MPU_xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 );

167 
EvítGroupH™dÀ_t
 
MPU_xEvítGroupCª©e
( );

168 
EvítGroupH™dÀ_t
 
MPU_xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
 );

169 
EvítBôs_t
 
MPU_xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 );

170 
EvítBôs_t
 
MPU_xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
 );

171 
EvítBôs_t
 
MPU_xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
 );

172 
EvítBôs_t
 
MPU_xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 );

173 
MPU_vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 );

174 
UBa£Ty≥_t
 
MPU_uxEvítGroupGëNumbî
–* 
xEvítGroup
 );

	@rtos/mpu_wrappers.h

70 #i‚de‡
MPU_WRAPPERS_H


71 
	#MPU_WRAPPERS_H


	)

75 #ifde‡
p‹tUSING_MPU_WRAPPERS


80 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


91 
	#xTaskCª©e
 
MPU_xTaskCª©e


	)

92 
	#xTaskCª©eSètic
 
MPU_xTaskCª©eSètic


	)

93 
	#xTaskCª©eRe°ri˘ed
 
MPU_xTaskCª©eRe°ri˘ed


	)

94 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

95 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

96 
	#vTaskDñay
 
MPU_vTaskDñay


	)

97 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

98 
	#xTaskAb‹tDñay
 
MPU_xTaskAb‹tDñay


	)

99 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

100 
	#eTaskGëSèã
 
MPU_eTaskGëSèã


	)

101 
	#vTaskGëInfo
 
MPU_vTaskGëInfo


	)

102 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

103 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

104 
	#vTaskResume
 
MPU_vTaskResume


	)

105 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

106 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

107 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

108 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

109 
	#pcTaskGëName
 
MPU_pcTaskGëName


	)

110 
	#xTaskGëH™dÀ
 
MPU_xTaskGëH™dÀ


	)

111 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

112 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

113 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

114 
	#vTaskSëThªadLoˇlSt‹agePoöãr
 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr


	)

115 
	#pvTaskGëThªadLoˇlSt‹agePoöãr
 
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr


	)

116 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

117 
	#xTaskGëIdÀTaskH™dÀ
 
MPU_xTaskGëIdÀTaskH™dÀ


	)

118 
	#uxTaskGëSy°emSèã
 
MPU_uxTaskGëSy°emSèã


	)

119 
	#vTaskLi°
 
MPU_vTaskLi°


	)

120 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

121 
	#xTaskGíîicNŸify
 
MPU_xTaskGíîicNŸify


	)

122 
	#xTaskNŸifyWaô
 
MPU_xTaskNŸifyWaô


	)

123 
	#ulTaskNŸifyTake
 
MPU_ulTaskNŸifyTake


	)

124 
	#xTaskNŸifySèãCÀ¨
 
MPU_xTaskNŸifySèãCÀ¨


	)

126 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

127 
	#vTaskSëTimeOutSèã
 
MPU_vTaskSëTimeOutSèã


	)

128 
	#xTaskCheckF‹TimeOut
 
MPU_xTaskCheckF‹TimeOut


	)

129 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

132 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

133 
	#xQueueGíîicRe˚ive
 
MPU_xQueueGíîicRe˚ive


	)

134 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

135 
	#uxQueueS∑˚sAvaûabÀ
 
MPU_uxQueueS∑˚sAvaûabÀ


	)

136 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

137 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

138 
	#xQueueCª©eMuãxSètic
 
MPU_xQueueCª©eMuãxSètic


	)

139 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

140 
	#xQueueCª©eCou¡ögSem≠h‹eSètic
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic


	)

141 
	#xQueueGëMuãxHﬁdî
 
MPU_xQueueGëMuãxHﬁdî


	)

142 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

143 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

144 
	#xQueueGíîicCª©e
 
MPU_xQueueGíîicCª©e


	)

145 
	#xQueueGíîicCª©eSètic
 
MPU_xQueueGíîicCª©eSètic


	)

146 
	#xQueueCª©eSë
 
MPU_xQueueCª©eSë


	)

147 
	#xQueueAddToSë
 
MPU_xQueueAddToSë


	)

148 
	#xQueueRemoveFromSë
 
MPU_xQueueRemoveFromSë


	)

149 
	#xQueueSñe˘FromSë
 
MPU_xQueueSñe˘FromSë


	)

150 
	#xQueueGíîicRe£t
 
MPU_xQueueGíîicRe£t


	)

152 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

153 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

154 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

155 
	#pcQueueGëName
 
MPU_pcQueueGëName


	)

159 
	#xTimîCª©e
 
MPU_xTimîCª©e


	)

160 
	#xTimîCª©eSètic
 
MPU_xTimîCª©eSètic


	)

161 
	#pvTimîGëTimîID
 
MPU_pvTimîGëTimîID


	)

162 
	#vTimîSëTimîID
 
MPU_vTimîSëTimîID


	)

163 
	#xTimîIsTimîA˘ive
 
MPU_xTimîIsTimîA˘ive


	)

164 
	#xTimîGëTimîD´m⁄TaskH™dÀ
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ


	)

165 
	#xTimîPídFun˘i⁄CÆl
 
MPU_xTimîPídFun˘i⁄CÆl


	)

166 
	#pcTimîGëName
 
MPU_pcTimîGëName


	)

167 
	#xTimîGëPîiod
 
MPU_xTimîGëPîiod


	)

168 
	#xTimîGëExpúyTime
 
MPU_xTimîGëExpúyTime


	)

169 
	#xTimîGíîicComm™d
 
MPU_xTimîGíîicComm™d


	)

172 
	#xEvítGroupCª©e
 
MPU_xEvítGroupCª©e


	)

173 
	#xEvítGroupCª©eSètic
 
MPU_xEvítGroupCª©eSètic


	)

174 
	#xEvítGroupWaôBôs
 
MPU_xEvítGroupWaôBôs


	)

175 
	#xEvítGroupCÀ¨Bôs
 
MPU_xEvítGroupCÀ¨Bôs


	)

176 
	#xEvítGroupSëBôs
 
MPU_xEvítGroupSëBôs


	)

177 
	#xEvítGroupSync
 
MPU_xEvítGroupSync


	)

178 
	#vEvítGroupDñëe
 
MPU_vEvítGroupDñëe


	)

181 
	#PRIVILEGED_FUNCTION


	)

186 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_fun˘i⁄s")))

	)

187 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

193 
	#PRIVILEGED_FUNCTION


	)

194 
	#PRIVILEGED_DATA


	)

195 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@rtos/opencm3.c

6 
	~"FªeRTOS.h
"

7 
	~"èsk.h
"

8 
	~<lib›ícm3/°m32/rcc.h
>

9 
	~<lib›ícm3/°m32/gpio.h
>

10 
	~<lib›ícm3/cm3/nvic.h
>

12 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

13 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

14 
	`xP‹tSysTickH™dÀr
( );

16 
	$sv_ˇŒ_h™dÀr
() {

17 
	`vP‹tSVCH™dÀr
();

18 
	}
}

20 
	$≥nd_sv_h™dÀr
() {

21 
	`xP‹tPídSVH™dÀr
();

22 
	}
}

24 
	$sys_tick_h™dÀr
() {

25 
	`xP‹tSysTickH™dÀr
();

26 
	}
}

	@rtos/port.c

75 
	~"FªeRTOS.h
"

76 
	~"èsk.h
"

81 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


82 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

85 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


86 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

88 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

92 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

96 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

97 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

98 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

99 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

101 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

102 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

103 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

104 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

105 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

107 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

108 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

111 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

112 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

113 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

114 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

115 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

116 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

117 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

118 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

121 
	#p‹tVECTACTIVE_MASK
 ( 0xFFUL )

	)

124 
	#p‹tINITIAL_XPSR
 ( 0x01000000UL )

	)

127 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

132 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

136 
	#p‹tSTART_ADDRESS_MASK
 ( ( 
SèckTy≥_t
 ) 0xffffff„UL )

	)

141 #ifde‡
c⁄figTASK_RETURN_ADDRESS


142 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

144 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

149 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

156 
vP‹tSëupTimîI¡îru±
( );

161 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

162 
	`xP‹tSysTickH™dÀr
( );

163 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

168 
	$¥vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

173 
	`¥vTaskExôEº‹
( );

180 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

181 
uöt32_t
 
ulTimîCou¡sF‹O√Tick
 = 0;

188 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

189 
uöt32_t
 
xMaximumPossibÀSuµªs£dTicks
 = 0;

196 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

197 
uöt32_t
 
ulSt›≥dTimîCom≥nßti⁄
 = 0;

205 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

206 
uöt8_t
 
ucMaxSysCÆlPri‹ôy
 = 0;

207 
uöt32_t
 
ulMaxPRIGROUPVÆue
 = 0;

208 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
pcI¡îru±Pri‹ôyRegi°îs
 = ( c⁄° vﬁ©ûêuöt8_à* c⁄° ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

216 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

220 
pxT›OfSèck
--;

221 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

222 
pxT›OfSèck
--;

223 *
pxT›OfSèck
 = ( ( 
SèckTy≥_t
 ) 
pxCode
 ) & 
p‹tSTART_ADDRESS_MASK
;

224 
pxT›OfSèck
--;

225 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tTASK_RETURN_ADDRESS
;

226 
pxT›OfSèck
 -= 5;

227 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

228 
pxT›OfSèck
 -= 8;

230  
pxT›OfSèck
;

231 
	}
}

234 
	$¥vTaskExôEº‹
( )

242 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

243 
	`p‹tDISABLE_INTERRUPTS
();

245 
	}
}

248 
	$vP‹tSVCH™dÀr
( )

250 
__asm
 volatile (

265 
	}
}

268 
	$¥vP‹tSèπFú°Task
( )

270 
__asm
 volatile(

282 
	}
}

288 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

292 
	`c⁄figASSERT
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

294 #if–
c⁄figASSERT_DEFINED
 == 1 )

296 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

297 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

298 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

306 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

310 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

313 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

316 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

320 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

321  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

323 
ulMaxPRIGROUPVÆue
--;

324 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

329 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

330 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

334 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

339 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

340 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

344 
	`vP‹tSëupTimîI¡îru±
();

347 
uxCrôiˇlNe°ög
 = 0;

350 
	`¥vP‹tSèπFú°Task
();

356 
	`¥vTaskExôEº‹
();

360 
	}
}

363 
	$vP‹tEndScheduÀr
( )

367 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

368 
	}
}

371 
	$vP‹tE¡îCrôiˇl
( )

373 
	`p‹tDISABLE_INTERRUPTS
();

374 
uxCrôiˇlNe°ög
++;

381 if–
uxCrôiˇlNe°ög
 == 1 )

383 
	`c⁄figASSERT
––
p‹tNVIC_INT_CTRL_REG
 & 
p‹tVECTACTIVE_MASK
 ) == 0 );

385 
	}
}

388 
	$vP‹tExôCrôiˇl
( )

390 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

391 
uxCrôiˇlNe°ög
--;

392 if–
uxCrôiˇlNe°ög
 == 0 )

394 
	`p‹tENABLE_INTERRUPTS
();

396 
	}
}

399 
	$xP‹tPídSVH™dÀr
( )

403 
__asm
 volatile

431 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

433 
	}
}

436 
	$xP‹tSysTickH™dÀr
( )

442 
	`p‹tDISABLE_INTERRUPTS
();

445 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

449 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

452 
	`p‹tENABLE_INTERRUPTS
();

453 
	}
}

456 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

458 
__©åibuã__
((
wók
)Ë
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

460 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
, 
ulSysTickCTRL
;

461 
TickTy≥_t
 
xModifübÀIdÀTime
;

464 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

466 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

473 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

478 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

479 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

481 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

486 
__asm
 volatile( "cpsid i" );

487 
__asm
 volatile( "dsb" );

488 
__asm
 volatile( "isb" );

492 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

496 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

499 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

503 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

507 
__asm
 volatile( "cpsie i" );

512 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

516 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

519 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

526 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

527 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

528 if–
xModifübÀIdÀTime
 > 0 )

530 
__asm
 volatile( "dsb" );

531 
__asm
 volatile( "wfi" );

532 
__asm
 volatile( "isb" );

534 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

540 
ulSysTickCTRL
 = 
p‹tNVIC_SYSTICK_CTRL_REG
;

541 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
ulSysTickCTRL
 & ~
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

545 
__asm
 volatile( "cpsie i" );

547 if––
ulSysTickCTRL
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

549 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

555 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

560 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

562 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

565 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

572 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

580 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

584 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

588 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1UL ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

596 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

597 
	`p‹tENTER_CRITICAL
();

599 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

600 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

601 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

603 
	`p‹tEXIT_CRITICAL
();

605 
	}
}

614 
__©åibuã__
(–
wók
 )Ë
	$vP‹tSëupTimîI¡îru±
( )

617 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

619 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

620 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

621 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

626 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

627 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

628 
	}
}

631 #if–
c⁄figASSERT_DEFINED
 == 1 )

633 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

635 
uöt32_t
 
ulCuºítI¡îru±
;

636 
uöt8_t
 
ucCuºítPri‹ôy
;

639 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) );

642 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

645 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

670 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

686 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

687 
	}
}

	@rtos/portable.h

74 #i‚de‡
PORTABLE_H


75 
	#PORTABLE_H


	)

87 
	~"dïªˇãd_deföôi⁄s.h
"

93 #i‚de‡
p‹tENTER_CRITICAL


94 
	~"p‹tma¸o.h
"

97 #i‡
p‹tBYTE_ALIGNMENT
 == 32

98 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x001‡)

	)

101 #i‡
p‹tBYTE_ALIGNMENT
 == 16

102 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x000‡)

	)

105 #i‡
p‹tBYTE_ALIGNMENT
 == 8

106 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

109 #i‡
p‹tBYTE_ALIGNMENT
 == 4

110 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

113 #i‡
p‹tBYTE_ALIGNMENT
 == 2

114 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

117 #i‡
p‹tBYTE_ALIGNMENT
 == 1

118 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

121 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


125 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


126 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

129 #ifde‡
__˝lu•lus


133 
	~"mpu_wøµîs.h
"

141 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

142 
SèckTy≥_t
 *
pxP‹tInôüli£Sèck
–SèckTy≥_à*
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
, 
Ba£Ty≥_t
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

144 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

148 
	sHópRegi⁄


150 
uöt8_t
 *
pucSèπAddªss
;

151 
size_t
 
xSizeInByãs
;

152 } 
	tHópRegi⁄_t
;

165 
	`vP‹tDeföeHópRegi⁄s
–c⁄° 
HópRegi⁄_t
 * c⁄° 
pxHópRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

171 *
	`pvP‹tMÆloc
–
size_t
 
xSize
 ) 
PRIVILEGED_FUNCTION
;

172 
	`vP‹tFªe
–*
pv
 ) 
PRIVILEGED_FUNCTION
;

173 
	`vP‹tInôüli£Blocks
–Ë
PRIVILEGED_FUNCTION
;

174 
size_t
 
	`xP‹tGëFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

175 
size_t
 
	`xP‹tGëMöimumEvîFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

181 
Ba£Ty≥_t
 
	`xP‹tSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

188 
	`vP‹tEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

197 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

198 
xMEMORY_REGION
;

199 
	`vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
SèckTy≥_t
 *
pxBŸtomOfSèck
, 
uöt32_t
 
ulSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

202 #ifde‡
__˝lu•lus


203 
	}
}

	@rtos/portmacro.h

71 #i‚de‡
PORTMACRO_H


72 
	#PORTMACRO_H


	)

74 #ifde‡
__˝lu•lus


89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

95 
	#p‹tBASE_TYPE
 

	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
	#p‹tTICK_TYPE_IS_ATOMIC
 1

	)

115 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

116 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

117 
	#p‹tBYTE_ALIGNMENT
 8

	)

121 
	#p‹tYIELD
() \

124 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
; \

128 
__asm
 volatile( "dsb" ); \

129 
__asm
 volatile( "isb" ); \

130 }

	)

132 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

133 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

134 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

135 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

139 
vP‹tE¡îCrôiˇl
( );

140 
vP‹tExôCrôiˇl
( );

141 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tRai£BASEPRI
()

	)

142 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tSëBASEPRI
(x)

	)

143 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tRai£BASEPRI
()

	)

144 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tSëBASEPRI
(0)

	)

145 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

146 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

153 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

154 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

158 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


159 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

160 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

165 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


166 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

169 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

172 
__©åibuã__
––
Æways_ölöe
 ) ) 
ölöe
 
uöt8_t
 
ucP‹tCou¡LódögZîos
–
uöt32_t
 
ulBôm≠
 )

174 
uöt8_t
 
	gucRëu∫
;

176 
__asm
 vﬁ©ûê–"˛z %0, %1" : "Ù" ( 
ucRëu∫
 ) : "r" ( 
ulBôm≠
 ) );

177  
	gucRëu∫
;

181 #if–
c⁄figMAX_PRIORITIES
 > 32 )

182 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

186 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

187 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

191 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31UL - ( 
uöt32_t
 ) 
	`ucP‹tCou¡LódögZîos
––uxRódyPri‹ôõ†ËË)

	)

197 #ifde‡
c⁄figASSERT


198 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

199 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

203 
	#p‹tNOP
()

	)

205 
	#p‹tINLINE
 
__ölöe


	)

207 #i‚de‡
p‹tFORCE_INLINE


208 
	#p‹tFORCE_INLINE
 
ölöe
 
	`__©åibuã__
(–
Æways_ölöe
))

	)

211 
p‹tFORCE_INLINE
 
Ba£Ty≥_t
 
xP‹tIsInsideI¡îru±
( )

213 
uöt32_t
 
	gulCuºítI¡îru±
;

214 
Ba£Ty≥_t
 
	gxRëu∫
;

217 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) );

219 if–
	gulCuºítI¡îru±
 == 0 )

221 
xRëu∫
 = 
pdFALSE
;

225 
	gxRëu∫
 = 
pdTRUE
;

228  
	gxRëu∫
;

233 
p‹tFORCE_INLINE
 
vP‹tRai£BASEPRI
( )

235 
uöt32_t
 
	gulNewBASEPRI
;

237 
__asm
 volatile

243 :"Ù" (
ulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

249 
p‹tFORCE_INLINE
 
uöt32_t
 
ulP‹tRai£BASEPRI
( )

251 
uöt32_t
 
	gulOrigöÆBASEPRI
, 
	gulNewBASEPRI
;

253 
__asm
 volatile

260 :"Ù" (
ulOrigöÆBASEPRI
), "Ù" (
	gulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

265  
	gulOrigöÆBASEPRI
;

269 
p‹tFORCE_INLINE
 
vP‹tSëBASEPRI
–
uöt32_t
 
ulNewMaskVÆue
 )

271 
__asm
 volatile

273 " m§ ba£¥i, %0 " :: "r" ( 
ulNewMaskVÆue
 )

279 #ifde‡
__˝lu•lus


	@rtos/projdefs.h

70 #i‚de‡
PROJDEFS_H


71 
	#PROJDEFS_H


	)

77 (*
	tTaskFun˘i⁄_t
)( * );

82 #i‚de‡
pdMS_TO_TICKS


83 
	#pdMS_TO_TICKS
–
xTimeInMs
 ) ( ( 
TickTy≥_t
 ) ( ( ( TickTy≥_àË–xTimeInM†Ë* ( TickTy≥_àË
c⁄figTICK_RATE_HZ
 ) / ( TickTy≥_àË1000 ) )

	)

86 
	#pdFALSE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

87 
	#pdTRUE
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

89 
	#pdPASS
 ( 
pdTRUE
 )

	)

90 
	#pdFAIL
 ( 
pdFALSE
 )

	)

91 
	#îrQUEUE_EMPTY
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

92 
	#îrQUEUE_FULL
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

95 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

96 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

97 
	#îrQUEUE_YIELD
 ( -5 )

	)

100 #i‚de‡
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES


101 
	#c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 0

	)

104 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

105 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a

	)

107 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a5a5aUL

	)

112 
	#pdFREERTOS_ERRNO_NONE
 0

	)

113 
	#pdFREERTOS_ERRNO_ENOENT
 2

	)

114 
	#pdFREERTOS_ERRNO_EINTR
 4

	)

115 
	#pdFREERTOS_ERRNO_EIO
 5

	)

116 
	#pdFREERTOS_ERRNO_ENXIO
 6

	)

117 
	#pdFREERTOS_ERRNO_EBADF
 9

	)

118 
	#pdFREERTOS_ERRNO_EAGAIN
 11

	)

119 
	#pdFREERTOS_ERRNO_EWOULDBLOCK
 11

	)

120 
	#pdFREERTOS_ERRNO_ENOMEM
 12

	)

121 
	#pdFREERTOS_ERRNO_EACCES
 13

	)

122 
	#pdFREERTOS_ERRNO_EFAULT
 14

	)

123 
	#pdFREERTOS_ERRNO_EBUSY
 16

	)

124 
	#pdFREERTOS_ERRNO_EEXIST
 17

	)

125 
	#pdFREERTOS_ERRNO_EXDEV
 18

	)

126 
	#pdFREERTOS_ERRNO_ENODEV
 19

	)

127 
	#pdFREERTOS_ERRNO_ENOTDIR
 20

	)

128 
	#pdFREERTOS_ERRNO_EISDIR
 21

	)

129 
	#pdFREERTOS_ERRNO_EINVAL
 22

	)

130 
	#pdFREERTOS_ERRNO_ENOSPC
 28

	)

131 
	#pdFREERTOS_ERRNO_ESPIPE
 29

	)

132 
	#pdFREERTOS_ERRNO_EROFS
 30

	)

133 
	#pdFREERTOS_ERRNO_EUNATCH
 42

	)

134 
	#pdFREERTOS_ERRNO_EBADE
 50

	)

135 
	#pdFREERTOS_ERRNO_EFTYPE
 79

	)

136 
	#pdFREERTOS_ERRNO_ENMFILE
 89

	)

137 
	#pdFREERTOS_ERRNO_ENOTEMPTY
 90

	)

138 
	#pdFREERTOS_ERRNO_ENAMETOOLONG
 91

	)

139 
	#pdFREERTOS_ERRNO_EOPNOTSUPP
 95

	)

140 
	#pdFREERTOS_ERRNO_ENOBUFS
 105

	)

141 
	#pdFREERTOS_ERRNO_ENOPROTOOPT
 109

	)

142 
	#pdFREERTOS_ERRNO_EADDRINUSE
 112

	)

143 
	#pdFREERTOS_ERRNO_ETIMEDOUT
 116

	)

144 
	#pdFREERTOS_ERRNO_EINPROGRESS
 119

	)

145 
	#pdFREERTOS_ERRNO_EALREADY
 120

	)

146 
	#pdFREERTOS_ERRNO_EADDRNOTAVAIL
 125

	)

147 
	#pdFREERTOS_ERRNO_EISCONN
 127

	)

148 
	#pdFREERTOS_ERRNO_ENOTCONN
 128

	)

149 
	#pdFREERTOS_ERRNO_ENOMEDIUM
 135

	)

150 
	#pdFREERTOS_ERRNO_EILSEQ
 138

	)

151 
	#pdFREERTOS_ERRNO_ECANCELED
 140

	)

155 
	#pdFREERTOS_LITTLE_ENDIAN
 0

	)

156 
	#pdFREERTOS_BIG_ENDIAN
 1

	)

	@rtos/queue.c

70 
	~<°dlib.h
>

71 
	~<°rög.h
>

76 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

78 
	~"FªeRTOS.h
"

79 
	~"èsk.h
"

80 
	~"queue.h
"

82 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

83 
	~"¸outöe.h
"

90 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


94 
	#queueUNLOCKED
 ( ( 
öt8_t
 ) -1 )

	)

95 
	#queueLOCKED_UNMODIFIED
 ( ( 
öt8_t
 ) 0 )

	)

108 
	#pxMuãxHﬁdî
 
pcTaû


	)

109 
	#uxQueueTy≥
 
pcHód


	)

110 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

114 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
UBa£Ty≥_t
 ) 0 )

	)

115 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

117 #if–
c⁄figUSE_PREEMPTION
 == 0 )

120 
	#queueYIELD_IF_USING_PREEMPTION
()

	)

122 
	#queueYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

130 
	sQueueDeföôi⁄


132 
öt8_t
 *
	mpcHód
;

133 
öt8_t
 *
	mpcTaû
;

134 
öt8_t
 *
	mpcWrôeTo
;

138 
öt8_t
 *
	mpcRódFrom
;

139 
UBa£Ty≥_t
 
	muxRecursiveCÆlCou¡
;

140 } 
	mu
;

142 
Li°_t
 
	mxTasksWaôögToSíd
;

143 
Li°_t
 
	mxTasksWaôögToRe˚ive
;

145 vﬁ©ûê
UBa£Ty≥_t
 
	muxMesßgesWaôög
;

146 
UBa£Ty≥_t
 
	muxLígth
;

147 
UBa£Ty≥_t
 
	muxIãmSize
;

149 vﬁ©ûê
öt8_t
 
	mcRxLock
;

150 vﬁ©ûê
öt8_t
 
	mcTxLock
;

152 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

153 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

156 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

157 
QueueDeföôi⁄
 *
	mpxQueueSëC⁄èöî
;

160 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

161 
UBa£Ty≥_t
 
	muxQueueNumbî
;

162 
uöt8_t
 
	mucQueueTy≥
;

165 } 
	txQUEUE
;

169 
xQUEUE
 
	tQueue_t
;

177 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

182 
	sQUEUE_REGISTRY_ITEM


184 c⁄° *
	mpcQueueName
;

185 
QueueH™dÀ_t
 
	mxH™dÀ
;

186 } 
	txQueueRegi°ryIãm
;

191 
xQueueRegi°ryIãm
 
	tQueueRegi°ryIãm_t
;

196 
PRIVILEGED_DATA
 
QueueRegi°ryIãm_t
 
	gxQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

208 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

215 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

222 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

228 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

233 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

235 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

240 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

247 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, c⁄° uöt8_à
ucQueueTy≥
, 
Queue_t
 *
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

254 #if–
c⁄figUSE_MUTEXES
 == 1 )

255 
	$¥vInôüli£Muãx
–
Queue_t
 *
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

264 
	#¥vLockQueue
–
pxQueue
 ) \

265 
	`èskENTER_CRITICAL
(); \

267 if––
pxQueue
 )->
cRxLock
 =
queueUNLOCKED
 ) \

269 –
pxQueue
 )->
cRxLock
 = 
queueLOCKED_UNMODIFIED
; \

271 if––
pxQueue
 )->
cTxLock
 =
queueUNLOCKED
 ) \

273 –
pxQueue
 )->
cTxLock
 = 
queueLOCKED_UNMODIFIED
; \

275 
	}
} \

276 
	`èskEXIT_CRITICAL
()

	)

279 
Ba£Ty≥_t
 
	$xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 
xNewQueue
 )

281 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

283 
	`c⁄figASSERT
–
pxQueue
 );

285 
	`èskENTER_CRITICAL
();

287 
pxQueue
->
pcTaû
 =ÖxQueue->
pcHód
 + (ÖxQueue->
uxLígth
 *ÖxQueue->
uxIãmSize
 );

288 
pxQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

289 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

290 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
 + ( (ÖxQueue->
uxLígth
 - ( 
UBa£Ty≥_t
 ) 1U ) *ÖxQueue->
uxIãmSize
 );

291 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

292 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

294 if–
xNewQueue
 =
pdFALSE
 )

301 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

303 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

305 
	`queueYIELD_IF_USING_PREEMPTION
();

309 
	`mtCOVERAGE_TEST_MARKER
();

314 
	`mtCOVERAGE_TEST_MARKER
();

320 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToSíd
 ) );

321 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

324 
	`èskEXIT_CRITICAL
();

328  
pdPASS
;

329 
	}
}

332 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

334 
QueueH™dÀ_t
 
	$xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 )

336 
Queue_t
 *
pxNewQueue
;

338 
	`c⁄figASSERT
–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 );

342 
	`c⁄figASSERT
–
pxSèticQueue
 !
NULL
 );

346 
	`c⁄figASSERT
–!––
pucQueueSt‹age
 !
NULL
 ) && ( 
uxIãmSize
 == 0 ) ) );

347 
	`c⁄figASSERT
–!––
pucQueueSt‹age
 =
NULL
 ) && ( 
uxIãmSize
 != 0 ) ) );

349 #if–
c⁄figASSERT_DEFINED
 == 1 )

354 vﬁ©ûê
size_t
 
xSize
 = –
SèticQueue_t
 );

355 
	`c⁄figASSERT
–
xSize
 =–
Queue_t
 ) );

362 
pxNewQueue
 = ( 
Queue_t
 * ) 
pxSèticQueue
;

364 if–
pxNewQueue
 !
NULL
 )

366 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

371 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

375 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

378  
pxNewQueue
;

379 
	}
}

384 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

386 
QueueH™dÀ_t
 
	$xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 )

388 
Queue_t
 *
pxNewQueue
;

389 
size_t
 
xQueueSizeInByãs
;

390 
uöt8_t
 *
pucQueueSt‹age
;

392 
	`c⁄figASSERT
–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 );

394 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

397 
xQueueSizeInByãs
 = ( 
size_t
 ) 0;

403 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 );

406 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
––Queue_àË+ 
xQueueSizeInByãs
 );

408 if–
pxNewQueue
 !
NULL
 )

412 
pucQueueSt‹age
 = ( ( 
uöt8_t
 * ) 
pxNewQueue
 ) + –
Queue_t
 );

414 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

419 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

423 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

426  
pxNewQueue
;

427 
	}
}

432 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, c⁄° uöt8_à
ucQueueTy≥
, 
Queue_t
 *
pxNewQueue
 )

436 –Ë
ucQueueTy≥
;

438 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

444 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * )ÖxNewQueue;

449 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * ) 
pucQueueSt‹age
;

454 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

455 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

456 –Ë
	`xQueueGíîicRe£t
–
pxNewQueue
, 
pdTRUE
 );

458 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

460 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

464 #if–
c⁄figUSE_QUEUE_SETS
 == 1 )

466 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

470 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

471 
	}
}

474 #if–
c⁄figUSE_MUTEXES
 == 1 )

476 
	$¥vInôüli£Muãx
–
Queue_t
 *
pxNewQueue
 )

478 if–
pxNewQueue
 !
NULL
 )

484 
pxNewQueue
->
pxMuãxHﬁdî
 = 
NULL
;

485 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

488 
pxNewQueue
->
u
.
uxRecursiveCÆlCou¡
 = 0;

490 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

493 –Ë
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
TickTy≥_t
 ) 0U, 
queueSEND_TO_BACK
 );

497 
	`åa˚CREATE_MUTEX_FAILED
();

499 
	}
}

504 #if––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

506 
QueueH™dÀ_t
 
	$xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 )

508 
Queue_t
 *
pxNewQueue
;

509 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

511 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`xQueueGíîicCª©e
–
uxMuãxLígth
, 
uxMuãxSize
, 
ucQueueTy≥
 );

512 
	`¥vInôüli£Muãx
–
pxNewQueue
 );

514  
pxNewQueue
;

515 
	}
}

520 #if––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

522 
QueueH™dÀ_t
 
	$xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 )

524 
Queue_t
 *
pxNewQueue
;

525 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

529 –Ë
ucQueueTy≥
;

531 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`xQueueGíîicCª©eSètic
–
uxMuãxLígth
, 
uxMuãxSize
, 
NULL
, 
pxSèticQueue
, 
ucQueueTy≥
 );

532 
	`¥vInôüli£Muãx
–
pxNewQueue
 );

534  
pxNewQueue
;

535 
	}
}

540 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

542 * 
	$xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

544 *
pxRëu∫
;

551 
	`èskENTER_CRITICAL
();

553 if–––
Queue_t
 * ) 
xSem≠h‹e
 )->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

555 
pxRëu∫
 = ( * ) ( ( 
Queue_t
 * ) 
xSem≠h‹e
 )->
pxMuãxHﬁdî
;

559 
pxRëu∫
 = 
NULL
;

562 
	`èskEXIT_CRITICAL
();

564  
pxRëu∫
;

565 
	}
}

570 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

572 
Ba£Ty≥_t
 
	$xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 )

574 
Ba£Ty≥_t
 
xRëu∫
;

575 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

577 
	`c⁄figASSERT
–
pxMuãx
 );

585 if–
pxMuãx
->
pxMuãxHﬁdî
 =–* ) 
	`xTaskGëCuºítTaskH™dÀ
() )

587 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

594 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )--;

597 if–
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 =–
UBa£Ty≥_t
 ) 0 )

601 –Ë
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

605 
	`mtCOVERAGE_TEST_MARKER
();

608 
xRëu∫
 = 
pdPASS
;

614 
xRëu∫
 = 
pdFAIL
;

616 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

619  
xRëu∫
;

620 
	}
}

625 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

627 
Ba£Ty≥_t
 
	$xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 )

629 
Ba£Ty≥_t
 
xRëu∫
;

630 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

632 
	`c⁄figASSERT
–
pxMuãx
 );

637 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

639 if–
pxMuãx
->
pxMuãxHﬁdî
 =–* ) 
	`xTaskGëCuºítTaskH™dÀ
() )

641 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )++;

642 
xRëu∫
 = 
pdPASS
;

646 
xRëu∫
 = 
	`xQueueGíîicRe˚ive
–
pxMuãx
, 
NULL
, 
xTicksToWaô
, 
pdFALSE
 );

651 if–
xRëu∫
 !
pdFAIL
 )

653 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )++;

657 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

661  
xRëu∫
;

662 
	}
}

667 #if––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

669 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 )

671 
QueueH™dÀ_t
 
xH™dÀ
;

673 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

674 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

676 
xH™dÀ
 = 
	`xQueueGíîicCª©eSètic
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
, 
pxSèticQueue
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

678 if–
xH™dÀ
 !
NULL
 )

680 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

682 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

686 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

689  
xH™dÀ
;

690 
	}
}

695 #if––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

697 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 )

699 
QueueH™dÀ_t
 
xH™dÀ
;

701 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

702 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

704 
xH™dÀ
 = 
	`xQueueGíîicCª©e
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

706 if–
xH™dÀ
 !
NULL
 )

708 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

710 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

714 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

717  
xH™dÀ
;

718 
	}
}

723 
Ba£Ty≥_t
 
	$xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

725 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
, 
xYõldRequúed
;

726 
TimeOut_t
 
xTimeOut
;

727 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

729 
	`c⁄figASSERT
–
pxQueue
 );

730 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

731 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

732 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

734 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

744 
	`èskENTER_CRITICAL
();

750 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

752 
	`åa˚QUEUE_SEND
–
pxQueue
 );

753 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

755 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

757 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

759 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
xC›yPosôi⁄
 ) !
pdFALSE
 )

764 
	`queueYIELD_IF_USING_PREEMPTION
();

768 
	`mtCOVERAGE_TEST_MARKER
();

775 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

777 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

783 
	`queueYIELD_IF_USING_PREEMPTION
();

787 
	`mtCOVERAGE_TEST_MARKER
();

790 if–
xYõldRequúed
 !
pdFALSE
 )

796 
	`queueYIELD_IF_USING_PREEMPTION
();

800 
	`mtCOVERAGE_TEST_MARKER
();

808 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

810 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

816 
	`queueYIELD_IF_USING_PREEMPTION
();

820 
	`mtCOVERAGE_TEST_MARKER
();

823 if–
xYõldRequúed
 !
pdFALSE
 )

829 
	`queueYIELD_IF_USING_PREEMPTION
();

833 
	`mtCOVERAGE_TEST_MARKER
();

838 
	`èskEXIT_CRITICAL
();

839  
pdPASS
;

843 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

847 
	`èskEXIT_CRITICAL
();

851 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

852  
îrQUEUE_FULL
;

854 if–
xE¡ryTimeSë
 =
pdFALSE
 )

858 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

859 
xE¡ryTimeSë
 = 
pdTRUE
;

864 
	`mtCOVERAGE_TEST_MARKER
();

868 
	`èskEXIT_CRITICAL
();

873 
	`vTaskSu•ídAŒ
();

874 
	`¥vLockQueue
–
pxQueue
 );

877 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

879 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

881 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

882 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

889 
	`¥vU∆ockQueue
–
pxQueue
 );

896 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

898 
	`p‹tYIELD_WITHIN_API
();

904 
	`¥vU∆ockQueue
–
pxQueue
 );

905 –Ë
	`xTaskResumeAŒ
();

911 
	`¥vU∆ockQueue
–
pxQueue
 );

912 –Ë
	`xTaskResumeAŒ
();

914 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

915  
îrQUEUE_FULL
;

918 
	}
}

921 
Ba£Ty≥_t
 
	$xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 )

923 
Ba£Ty≥_t
 
xRëu∫
;

924 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

925 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

927 
	`c⁄figASSERT
–
pxQueue
 );

928 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

929 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

945 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

952 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

954 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

956 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

958 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

965 –Ë
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

969 if–
cTxLock
 =
queueUNLOCKED
 )

971 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

973 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

975 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
xC›yPosôi⁄
 ) !
pdFALSE
 )

980 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

982 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

986 
	`mtCOVERAGE_TEST_MARKER
();

991 
	`mtCOVERAGE_TEST_MARKER
();

996 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

998 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1002 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1004 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1008 
	`mtCOVERAGE_TEST_MARKER
();

1013 
	`mtCOVERAGE_TEST_MARKER
();

1018 
	`mtCOVERAGE_TEST_MARKER
();

1024 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1026 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1030 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1032 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1036 
	`mtCOVERAGE_TEST_MARKER
();

1041 
	`mtCOVERAGE_TEST_MARKER
();

1046 
	`mtCOVERAGE_TEST_MARKER
();

1055 
pxQueue
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

1058 
xRëu∫
 = 
pdPASS
;

1062 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1063 
xRëu∫
 = 
îrQUEUE_FULL
;

1066 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1068  
xRëu∫
;

1069 
	}
}

1072 
Ba£Ty≥_t
 
	$xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1074 
Ba£Ty≥_t
 
xRëu∫
;

1075 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1076 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1084 
	`c⁄figASSERT
–
pxQueue
 );

1088 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1093 
	`c⁄figASSERT
–!––
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 ) && (ÖxQueue->
pxMuãxHﬁdî
 !
NULL
 ) ) );

1109 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1111 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1113 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1118 if–
uxMesßgesWaôög
 < 
pxQueue
->
uxLígth
 )

1120 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

1122 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1130 
pxQueue
->
uxMesßgesWaôög
 = uxMessagesWaiting + 1;

1134 if–
cTxLock
 =
queueUNLOCKED
 )

1136 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1138 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1140 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
queueSEND_TO_BACK
 ) !
pdFALSE
 )

1145 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1147 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1151 
	`mtCOVERAGE_TEST_MARKER
();

1156 
	`mtCOVERAGE_TEST_MARKER
();

1161 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1163 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1167 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1169 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1173 
	`mtCOVERAGE_TEST_MARKER
();

1178 
	`mtCOVERAGE_TEST_MARKER
();

1183 
	`mtCOVERAGE_TEST_MARKER
();

1189 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1191 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1195 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1197 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1201 
	`mtCOVERAGE_TEST_MARKER
();

1206 
	`mtCOVERAGE_TEST_MARKER
();

1211 
	`mtCOVERAGE_TEST_MARKER
();

1220 
pxQueue
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

1223 
xRëu∫
 = 
pdPASS
;

1227 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1228 
xRëu∫
 = 
îrQUEUE_FULL
;

1231 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1233  
xRëu∫
;

1234 
	}
}

1237 
Ba£Ty≥_t
 
	$xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xJu°Pìkög
 )

1239 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1240 
TimeOut_t
 
xTimeOut
;

1241 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1242 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1244 
	`c⁄figASSERT
–
pxQueue
 );

1245 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1246 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1248 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1258 
	`èskENTER_CRITICAL
();

1260 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1264 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1268 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

1270 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1272 if–
xJu°Pìkög
 =
pdFALSE
 )

1274 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1277 
pxQueue
->
uxMesßgesWaôög
 = uxMessagesWaiting - 1;

1279 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1281 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1285 
pxQueue
->
pxMuãxHﬁdî
 = ( 
öt8_t
 * ) 
	`pvTaskIn¸emítMuãxHñdCou¡
();

1289 
	`mtCOVERAGE_TEST_MARKER
();

1294 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1296 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1298 
	`queueYIELD_IF_USING_PREEMPTION
();

1302 
	`mtCOVERAGE_TEST_MARKER
();

1307 
	`mtCOVERAGE_TEST_MARKER
();

1312 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

1316 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1320 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1322 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1325 
	`queueYIELD_IF_USING_PREEMPTION
();

1329 
	`mtCOVERAGE_TEST_MARKER
();

1334 
	`mtCOVERAGE_TEST_MARKER
();

1338 
	`èskEXIT_CRITICAL
();

1339  
pdPASS
;

1343 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1347 
	`èskEXIT_CRITICAL
();

1348 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1349  
îrQUEUE_EMPTY
;

1351 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1355 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

1356 
xE¡ryTimeSë
 = 
pdTRUE
;

1361 
	`mtCOVERAGE_TEST_MARKER
();

1365 
	`èskEXIT_CRITICAL
();

1370 
	`vTaskSu•ídAŒ
();

1371 
	`¥vLockQueue
–
pxQueue
 );

1374 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1376 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1378 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1380 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1382 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1384 
	`èskENTER_CRITICAL
();

1386 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1388 
	`èskEXIT_CRITICAL
();

1392 
	`mtCOVERAGE_TEST_MARKER
();

1397 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1398 
	`¥vU∆ockQueue
–
pxQueue
 );

1399 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1401 
	`p‹tYIELD_WITHIN_API
();

1405 
	`mtCOVERAGE_TEST_MARKER
();

1411 
	`¥vU∆ockQueue
–
pxQueue
 );

1412 –Ë
	`xTaskResumeAŒ
();

1417 
	`¥vU∆ockQueue
–
pxQueue
 );

1418 –Ë
	`xTaskResumeAŒ
();

1420 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1422 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1423  
îrQUEUE_EMPTY
;

1427 
	`mtCOVERAGE_TEST_MARKER
();

1431 
	}
}

1434 
Ba£Ty≥_t
 
	$xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1436 
Ba£Ty≥_t
 
xRëu∫
;

1437 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1438 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1440 
	`c⁄figASSERT
–
pxQueue
 );

1441 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1457 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1459 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1461 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1464 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1466 c⁄° 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

1468 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1470 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1471 
pxQueue
->
uxMesßgesWaôög
 = uxMessagesWaiting - 1;

1477 if–
cRxLock
 =
queueUNLOCKED
 )

1479 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1481 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1485 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1487 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1491 
	`mtCOVERAGE_TEST_MARKER
();

1496 
	`mtCOVERAGE_TEST_MARKER
();

1501 
	`mtCOVERAGE_TEST_MARKER
();

1508 
pxQueue
->
cRxLock
 = ( 
öt8_t
 ) ( cRxLock + 1 );

1511 
xRëu∫
 = 
pdPASS
;

1515 
xRëu∫
 = 
pdFAIL
;

1516 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1519 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1521  
xRëu∫
;

1522 
	}
}

1525 
Ba£Ty≥_t
 
	$xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 )

1527 
Ba£Ty≥_t
 
xRëu∫
;

1528 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1529 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1530 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1532 
	`c⁄figASSERT
–
pxQueue
 );

1533 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1534 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 != 0 );

1550 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1552 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1555 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1557 
	`åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 );

1561 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

1562 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1563 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1565 
xRëu∫
 = 
pdPASS
;

1569 
xRëu∫
 = 
pdFAIL
;

1570 
	`åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 );

1573 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1575  
xRëu∫
;

1576 
	}
}

1579 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1581 
UBa£Ty≥_t
 
uxRëu∫
;

1583 
	`c⁄figASSERT
–
xQueue
 );

1585 
	`èskENTER_CRITICAL
();

1587 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1589 
	`èskEXIT_CRITICAL
();

1591  
uxRëu∫
;

1592 
	}
}

1595 
UBa£Ty≥_t
 
	$uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1597 
UBa£Ty≥_t
 
uxRëu∫
;

1598 
Queue_t
 *
pxQueue
;

1600 
pxQueue
 = ( 
Queue_t
 * ) 
xQueue
;

1601 
	`c⁄figASSERT
–
pxQueue
 );

1603 
	`èskENTER_CRITICAL
();

1605 
uxRëu∫
 = 
pxQueue
->
uxLígth
 -ÖxQueue->
uxMesßgesWaôög
;

1607 
	`èskEXIT_CRITICAL
();

1609  
uxRëu∫
;

1610 
	}
}

1613 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1615 
UBa£Ty≥_t
 
uxRëu∫
;

1617 
	`c⁄figASSERT
–
xQueue
 );

1619 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1621  
uxRëu∫
;

1622 
	}
}

1625 
	$vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 )

1627 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1629 
	`c⁄figASSERT
–
pxQueue
 );

1630 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

1632 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1634 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

1638 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

1642 
	`vP‹tFªe
–
pxQueue
 );

1644 #ñif––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

1648 if–
pxQueue
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

1650 
	`vP‹tFªe
–
pxQueue
 );

1654 
	`mtCOVERAGE_TEST_MARKER
();

1661 –Ë
pxQueue
;

1664 
	}
}

1667 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1669 
UBa£Ty≥_t
 
	$uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 )

1671  ( ( 
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
;

1672 
	}
}

1677 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1679 
	$vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 )

1681 ––
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
 = uxQueueNumber;

1682 
	}
}

1687 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1689 
uöt8_t
 
	$ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 )

1691  ( ( 
Queue_t
 * ) 
xQueue
 )->
ucQueueTy≥
;

1692 
	}
}

1697 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 )

1699 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

1700 
UBa£Ty≥_t
 
uxMesßgesWaôög
;

1704 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1706 if–
pxQueue
->
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

1708 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1710 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1713 
xRëu∫
 = 
	`xTaskPri‹ôyDisöhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1714 
pxQueue
->
pxMuãxHﬁdî
 = 
NULL
;

1718 
	`mtCOVERAGE_TEST_MARKER
();

1723 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

1725 –Ë
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

1726 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

1727 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
pcTaû
 )

1729 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

1733 
	`mtCOVERAGE_TEST_MARKER
();

1738 –Ë
	`mem˝y
––* ) 
pxQueue
->
u
.
pcRódFrom
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

1739 
pxQueue
->
u
.
pcRódFrom
 -pxQueue->
uxIãmSize
;

1740 if–
pxQueue
->
u
.
pcRódFrom
 <ÖxQueue->
pcHód
 )

1742 
pxQueue
->
u
.
pcRódFrom
 = (ÖxQueue->
pcTaû
 -ÖxQueue->
uxIãmSize
 );

1746 
	`mtCOVERAGE_TEST_MARKER
();

1749 if–
xPosôi⁄
 =
queueOVERWRITE
 )

1751 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1757 --
uxMesßgesWaôög
;

1761 
	`mtCOVERAGE_TEST_MARKER
();

1766 
	`mtCOVERAGE_TEST_MARKER
();

1770 
pxQueue
->
uxMesßgesWaôög
 = uxMessagesWaiting + 1;

1772  
xRëu∫
;

1773 
	}
}

1776 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 )

1778 if–
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0 )

1780 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

1781 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

1783 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

1787 
	`mtCOVERAGE_TEST_MARKER
();

1789 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

1791 
	}
}

1794 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 )

1802 
	`èskENTER_CRITICAL
();

1804 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

1807  
cTxLock
 > 
queueLOCKED_UNMODIFIED
 )

1811 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1813 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1815 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
queueSEND_TO_BACK
 ) !
pdFALSE
 )

1820 
	`vTaskMis£dYõld
();

1824 
	`mtCOVERAGE_TEST_MARKER
();

1832 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1834 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1838 
	`vTaskMis£dYõld
();

1842 
	`mtCOVERAGE_TEST_MARKER
();

1855 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1857 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1861 
	`vTaskMis£dYõld
();

1865 
	`mtCOVERAGE_TEST_MARKER
();

1875 --
cTxLock
;

1878 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

1880 
	`èskEXIT_CRITICAL
();

1883 
	`èskENTER_CRITICAL
();

1885 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

1887  
cRxLock
 > 
queueLOCKED_UNMODIFIED
 )

1889 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1891 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1893 
	`vTaskMis£dYõld
();

1897 
	`mtCOVERAGE_TEST_MARKER
();

1900 --
cRxLock
;

1908 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

1910 
	`èskEXIT_CRITICAL
();

1911 
	}
}

1914 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 )

1916 
Ba£Ty≥_t
 
xRëu∫
;

1918 
	`èskENTER_CRITICAL
();

1920 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

1922 
xRëu∫
 = 
pdTRUE
;

1926 
xRëu∫
 = 
pdFALSE
;

1929 
	`èskEXIT_CRITICAL
();

1931  
xRëu∫
;

1932 
	}
}

1935 
Ba£Ty≥_t
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1937 
Ba£Ty≥_t
 
xRëu∫
;

1939 
	`c⁄figASSERT
–
xQueue
 );

1940 if–––
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

1942 
xRëu∫
 = 
pdTRUE
;

1946 
xRëu∫
 = 
pdFALSE
;

1949  
xRëu∫
;

1950 
	}
}

1953 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 )

1955 
Ba£Ty≥_t
 
xRëu∫
;

1957 
	`èskENTER_CRITICAL
();

1959 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

1961 
xRëu∫
 = 
pdTRUE
;

1965 
xRëu∫
 = 
pdFALSE
;

1968 
	`èskEXIT_CRITICAL
();

1970  
xRëu∫
;

1971 
	}
}

1974 
Ba£Ty≥_t
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1976 
Ba£Ty≥_t
 
xRëu∫
;

1978 
	`c⁄figASSERT
–
xQueue
 );

1979 if–––
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
 =––Queue_à* ) xQueuê)->
uxLígth
 )

1981 
xRëu∫
 = 
pdTRUE
;

1985 
xRëu∫
 = 
pdFALSE
;

1988  
xRëu∫
;

1989 
	}
}

1992 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

1994 
Ba£Ty≥_t
 
	$xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 )

1996 
Ba£Ty≥_t
 
xRëu∫
;

1997 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2002 
	`p‹tDISABLE_INTERRUPTS
();

2004 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

2008 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2012 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

2013 
	`p‹tENABLE_INTERRUPTS
();

2014  
îrQUEUE_BLOCKED
;

2018 
	`p‹tENABLE_INTERRUPTS
();

2019  
îrQUEUE_FULL
;

2023 
	`p‹tENABLE_INTERRUPTS
();

2025 
	`p‹tDISABLE_INTERRUPTS
();

2027 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2030 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2031 
xRëu∫
 = 
pdPASS
;

2034 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2040 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2044 
xRëu∫
 = 
îrQUEUE_YIELD
;

2048 
	`mtCOVERAGE_TEST_MARKER
();

2053 
	`mtCOVERAGE_TEST_MARKER
();

2058 
xRëu∫
 = 
îrQUEUE_FULL
;

2061 
	`p‹tENABLE_INTERRUPTS
();

2063  
xRëu∫
;

2064 
	}
}

2069 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2071 
Ba£Ty≥_t
 
	$xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 )

2073 
Ba£Ty≥_t
 
xRëu∫
;

2074 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2079 
	`p‹tDISABLE_INTERRUPTS
();

2081 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2085 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2089 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2090 
	`p‹tENABLE_INTERRUPTS
();

2091  
îrQUEUE_BLOCKED
;

2095 
	`p‹tENABLE_INTERRUPTS
();

2096  
îrQUEUE_FULL
;

2101 
	`mtCOVERAGE_TEST_MARKER
();

2104 
	`p‹tENABLE_INTERRUPTS
();

2106 
	`p‹tDISABLE_INTERRUPTS
();

2108 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2111 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2112 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

2114 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2118 
	`mtCOVERAGE_TEST_MARKER
();

2120 --–
pxQueue
->
uxMesßgesWaôög
 );

2121 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2123 
xRëu∫
 = 
pdPASS
;

2126 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2132 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2134 
xRëu∫
 = 
îrQUEUE_YIELD
;

2138 
	`mtCOVERAGE_TEST_MARKER
();

2143 
	`mtCOVERAGE_TEST_MARKER
();

2148 
xRëu∫
 = 
pdFAIL
;

2151 
	`p‹tENABLE_INTERRUPTS
();

2153  
xRëu∫
;

2154 
	}
}

2159 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2161 
Ba£Ty≥_t
 
	$xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
Ba£Ty≥_t
 
xCoRoutöePªviou¶yWokí
 )

2163 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2167 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2169 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2173 if–
xCoRoutöePªviou¶yWokí
 =
pdFALSE
 )

2175 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2177 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2179  
pdTRUE
;

2183 
	`mtCOVERAGE_TEST_MARKER
();

2188 
	`mtCOVERAGE_TEST_MARKER
();

2193 
	`mtCOVERAGE_TEST_MARKER
();

2198 
	`mtCOVERAGE_TEST_MARKER
();

2201  
xCoRoutöePªviou¶yWokí
;

2202 
	}
}

2207 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2209 
Ba£Ty≥_t
 
	$xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
Ba£Ty≥_t
 *
pxCoRoutöeWokí
 )

2211 
Ba£Ty≥_t
 
xRëu∫
;

2212 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2216 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2219 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2220 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

2222 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2226 
	`mtCOVERAGE_TEST_MARKER
();

2228 --–
pxQueue
->
uxMesßgesWaôög
 );

2229 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2231 if––*
pxCoRoutöeWokí
 ) =
pdFALSE
 )

2233 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2235 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2237 *
pxCoRoutöeWokí
 = 
pdTRUE
;

2241 
	`mtCOVERAGE_TEST_MARKER
();

2246 
	`mtCOVERAGE_TEST_MARKER
();

2251 
	`mtCOVERAGE_TEST_MARKER
();

2254 
xRëu∫
 = 
pdPASS
;

2258 
xRëu∫
 = 
pdFAIL
;

2261  
xRëu∫
;

2262 
	}
}

2267 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2269 
	$vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcQueueName
 )

2271 
UBa£Ty≥_t
 
ux
;

2275  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2277 if–
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =
NULL
 )

2280 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =ÖcQueueName;

2281 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = 
xQueue
;

2283 
	`åa˚QUEUE_REGISTRY_ADD
–
xQueue
, 
pcQueueName
 );

2288 
	`mtCOVERAGE_TEST_MARKER
();

2291 
	}
}

2296 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2298 c⁄° *
	$pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 )

2300 
UBa£Ty≥_t
 
ux
;

2301 c⁄° *
pcRëu∫
 = 
NULL
;

2305  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2307 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2309 
pcRëu∫
 = 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
;

2314 
	`mtCOVERAGE_TEST_MARKER
();

2318  
pcRëu∫
;

2319 
	}
}

2324 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2326 
	$vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 )

2328 
UBa£Ty≥_t
 
ux
;

2332  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2334 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2337 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

2342 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = ( 
QueueH™dÀ_t
 ) 0;

2347 
	`mtCOVERAGE_TEST_MARKER
();

2351 
	}
}

2356 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2358 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

2360 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2376 
	`¥vLockQueue
–
pxQueue
 );

2377 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0U )

2380 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
, 
xWaôIndeföôñy
 );

2384 
	`mtCOVERAGE_TEST_MARKER
();

2386 
	`¥vU∆ockQueue
–
pxQueue
 );

2387 
	}
}

2392 #if––
c⁄figUSE_QUEUE_SETS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

2394 
QueueSëH™dÀ_t
 
	$xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 )

2396 
QueueSëH™dÀ_t
 
pxQueue
;

2398 
pxQueue
 = 
	`xQueueGíîicCª©e
–
uxEvítQueueLígth
, –
Queue_t
 * ), 
queueQUEUE_TYPE_SET
 );

2400  
pxQueue
;

2401 
	}
}

2406 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2408 
Ba£Ty≥_t
 
	$xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2410 
Ba£Ty≥_t
 
xRëu∫
;

2412 
	`èskENTER_CRITICAL
();

2414 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 !
NULL
 )

2417 
xRëu∫
 = 
pdFAIL
;

2419 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2423 
xRëu∫
 = 
pdFAIL
;

2427 ––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 = 
xQueueSë
;

2428 
xRëu∫
 = 
pdPASS
;

2431 
	`èskEXIT_CRITICAL
();

2433  
xRëu∫
;

2434 
	}
}

2439 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2441 
Ba£Ty≥_t
 
	$xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2443 
Ba£Ty≥_t
 
xRëu∫
;

2444 
Queue_t
 * c⁄° 
pxQueueOrSem≠h‹e
 = ( Queue_à* ) 
xQueueOrSem≠h‹e
;

2446 if–
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 !
xQueueSë
 )

2449 
xRëu∫
 = 
pdFAIL
;

2451 if–
pxQueueOrSem≠h‹e
->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2456 
xRëu∫
 = 
pdFAIL
;

2460 
	`èskENTER_CRITICAL
();

2463 
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 = 
NULL
;

2465 
	`èskEXIT_CRITICAL
();

2466 
xRëu∫
 = 
pdPASS
;

2469  
xRëu∫
;

2470 
	}
}

2475 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2477 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, 
TickTy≥_t
 c⁄° 
xTicksToWaô
 )

2479 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2481 –Ë
	`xQueueGíîicRe˚ive
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
xTicksToWaô
, 
pdFALSE
 );

2482  
xRëu∫
;

2483 
	}
}

2488 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2490 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 )

2492 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2494 –Ë
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
NULL
 );

2495  
xRëu∫
;

2496 
	}
}

2501 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2503 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

2505 
Queue_t
 *
pxQueueSëC⁄èöî
 = 
pxQueue
->pxQueueSetContainer;

2506 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2510 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
 );

2511 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 );

2513 if–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 )

2515 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueueSëC⁄èöî
->cTxLock;

2517 
	`åa˚QUEUE_SEND
–
pxQueueSëC⁄èöî
 );

2520 
xRëu∫
 = 
	`¥vC›yD©aToQueue
–
pxQueueSëC⁄èöî
, &
pxQueue
, 
xC›yPosôi⁄
 );

2522 if–
cTxLock
 =
queueUNLOCKED
 )

2524 if–
	`li°LIST_IS_EMPTY
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2526 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2529 
xRëu∫
 = 
pdTRUE
;

2533 
	`mtCOVERAGE_TEST_MARKER
();

2538 
	`mtCOVERAGE_TEST_MARKER
();

2543 
pxQueueSëC⁄èöî
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

2548 
	`mtCOVERAGE_TEST_MARKER
();

2551  
xRëu∫
;

2552 
	}
}

	@rtos/queue.h

71 #i‚de‡
QUEUE_H


72 
	#QUEUE_H


	)

74 #i‚de‡
INC_FREERTOS_H


75 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include queue.h"

78 #ifde‡
__˝lu•lus


88 * 
	tQueueH™dÀ_t
;

95 * 
	tQueueSëH™dÀ_t
;

102 * 
	tQueueSëMembîH™dÀ_t
;

105 
	#queueSEND_TO_BACK
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

106 
	#queueSEND_TO_FRONT
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

107 
	#queueOVERWRITE
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

110 
	#queueQUEUE_TYPE_BASE
 ( ( 
uöt8_t
 ) 0U )

	)

111 
	#queueQUEUE_TYPE_SET
 ( ( 
uöt8_t
 ) 0U )

	)

112 
	#queueQUEUE_TYPE_MUTEX
 ( ( 
uöt8_t
 ) 1U )

	)

113 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( ( 
uöt8_t
 ) 2U )

	)

114 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( ( 
uöt8_t
 ) 3U )

	)

115 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( ( 
uöt8_t
 ) 4U )

	)

185 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

186 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
––uxQueueLígth ), ( uxIãmSizê), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

271 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

272 
	#xQueueCª©eSètic
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
pxQueueBuf„r
 ) 
	`xQueueGíîicCª©eSètic
––uxQueueLígth ), ( uxIãmSizê), (ÖucQueueSt‹agê), (ÖxQueueBuf„∏), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

355 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

437 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

521 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

604 
	#xQueueOvîwrôe
–
xQueue
, 
pvIãmToQueue
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), 0, 
queueOVERWRITE
 )

	)

692 
Ba£Ty≥_t
 
xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

788 
	#xQueuePìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

821 
Ba£Ty≥_t
 
xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

914 
	#xQueueRe˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

1013 
Ba£Ty≥_t
 
xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xJu°Pìk
 ) 
PRIVILEGED_FUNCTION
;

1028 
UBa£Ty≥_t
 
uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1045 
UBa£Ty≥_t
 
uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1059 
vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1129 
	#xQueueSídToFr⁄tFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_FRONT
 )

	)

1200 
	#xQueueSídToBackFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1287 
	#xQueueOvîwrôeFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueOVERWRITE
 )

	)

1361 
	#xQueueSídFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1440 
Ba£Ty≥_t
 
xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

1441 
Ba£Ty≥_t
 
xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1530 
Ba£Ty≥_t
 
xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1536 
Ba£Ty≥_t
 
xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1537 
Ba£Ty≥_t
 
xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1538 
UBa£Ty≥_t
 
uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1549 
Ba£Ty≥_t
 
xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, Ba£Ty≥_à
xCoRoutöePªviou¶yWokí
 );

1550 
Ba£Ty≥_t
 
xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, Ba£Ty≥_à*
pxTaskWokí
 );

1551 
Ba£Ty≥_t
 
xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 );

1552 
Ba£Ty≥_t
 
xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 );

1559 
QueueH™dÀ_t
 
xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1560 
QueueH™dÀ_t
 
xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1561 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 ) 
PRIVILEGED_FUNCTION
;

1562 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1563 * 
xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

1569 
Ba£Ty≥_t
 
xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1570 
Ba£Ty≥_t
 
xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
pxMuãx
 ) 
PRIVILEGED_FUNCTION
;

1576 
	#xQueueRe£t
–
xQueue
 ) 
	`xQueueGíîicRe£t
–xQueue, 
pdFALSE
 )

	)

1600 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1601 
vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
 ) 
PRIVILEGED_FUNCTION
;

1614 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1615 
vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1629 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1630 c⁄° *
pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1638 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1639 
QueueH™dÀ_t
 
xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1647 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1648 
QueueH™dÀ_t
 
xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1699 
QueueSëH™dÀ_t
 
xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 ) 
PRIVILEGED_FUNCTION
;

1723 
Ba£Ty≥_t
 
xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1742 
Ba£Ty≥_t
 
xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1778 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1783 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1786 
vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

1787 
Ba£Ty≥_t
 
xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
 ) 
PRIVILEGED_FUNCTION
;

1788 
vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 ) 
PRIVILEGED_FUNCTION
;

1789 
UBa£Ty≥_t
 
uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1790 
uöt8_t
 
ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1793 #ifde‡
__˝lu•lus


	@rtos/semphr.h

70 #i‚de‡
SEMAPHORE_H


71 
	#SEMAPHORE_H


	)

73 #i‚de‡
INC_FREERTOS_H


74 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include semphr.h"

77 
	~"queue.h
"

79 
QueueH™dÀ_t
 
	tSem≠h‹eH™dÀ_t
;

81 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( 
uöt8_t
 ) 1U )

	)

82 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
uöt8_t
 ) 0U )

	)

83 
	#£mGIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

135 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

136 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) \

138 –
xSem≠h‹e
 ) = 
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 ); \

139 if––
xSem≠h‹e
 ) !
NULL
 ) \

141 –Ë
	`xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

143 }

	)

203 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

204 
	#xSem≠h‹eCª©eBö¨y
(Ë
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

262 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

263 
	#xSem≠h‹eCª©eBö¨ySètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueGíîicCª©eSètic
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
,ÖxSèticSem≠h‹e, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

331 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueGíîicRe˚ive
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

424 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

425 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

489 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

573 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

574 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

666 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGiveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

700 
	#xSem≠h‹eTakeFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

757 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

758 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 )

	)

818 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

819 
	#xSem≠h‹eCª©eMuãxSètic
–
pxMuãxBuf„r
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_MUTEX
, (ÖxMuãxBuf„∏Ë)

	)

886 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

887 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
 )

	)

959 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

960 
	#xSem≠h‹eCª©eRecursiveMuãxSètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
,ÖxSèticSem≠h‹ê)

	)

1039 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1040 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

1124 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1125 
	#xSem≠h‹eCª©eCou¡ögSètic
–
uxMaxCou¡
, 
uxInôülCou¡
, 
pxSem≠h‹eBuf„r
 ) 
	`xQueueCª©eCou¡ögSem≠h‹eSètic
––uxMaxCou¡ ), ( uxInôülCou¡ ), (ÖxSem≠h‹eBuf„∏Ë)

	)

1140 
	#vSem≠h‹eDñëe
–
xSem≠h‹e
 ) 
	`vQueueDñëe
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

1155 
	#xSem≠h‹eGëMuãxHﬁdî
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdî
––xSem≠h‹êË)

	)

1167 
	#uxSem≠h‹eGëCou¡
–
xSem≠h‹e
 ) 
	`uxQueueMesßgesWaôög
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

	@rtos/task.h

71 #i‚de‡
INC_TASK_H


72 
	#INC_TASK_H


	)

74 #i‚de‡
INC_FREERTOS_H


78 
	~"li°.h
"

80 #ifde‡
__˝lu•lus


88 
	#tskKERNEL_VERSION_NUMBER
 "V9.0.0"

	)

89 
	#tskKERNEL_VERSION_MAJOR
 9

	)

90 
	#tskKERNEL_VERSION_MINOR
 0

	)

91 
	#tskKERNEL_VERSION_BUILD
 0

	)

103 * 
	tTaskH™dÀ_t
;

109 
Ba£Ty≥_t
 (*
	tTaskHookFun˘i⁄_t
)( * );

114 
eRu¬ög
 = 0,

115 
eRódy
,

116 
eBlocked
,

117 
eSu•íded
,

118 
eDñëed
,

119 
eInvÆid


120 } 
	teTaskSèã
;

125 
eNoA˘i⁄
 = 0,

126 
eSëBôs
,

127 
eIn¸emít
,

128 
eSëVÆueWôhOvîwrôe
,

129 
eSëVÆueWôhoutOvîwrôe


130 } 
	teNŸifyA˘i⁄
;

135 
	sxTIME_OUT


137 
Ba£Ty≥_t
 
xOvîÊowCou¡
;

138 
TickTy≥_t
 
xTimeOnE¡îög
;

139 } 
	tTimeOut_t
;

144 
	sxMEMORY_REGION


146 *
pvBa£Addªss
;

147 
uöt32_t
 
ulLígthInByãs
;

148 
uöt32_t
 
ulP¨amëîs
;

149 } 
	tMem‹yRegi⁄_t
;

154 
	sxTASK_PARAMETERS


156 
TaskFun˘i⁄_t
 
pvTaskCode
;

157 c⁄° * c⁄° 
pcName
;

158 
uöt16_t
 
usSèckDïth
;

159 *
pvP¨amëîs
;

160 
UBa£Ty≥_t
 
uxPri‹ôy
;

161 
SèckTy≥_t
 *
puxSèckBuf„r
;

162 
Mem‹yRegi⁄_t
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

163 } 
	tTaskP¨amëîs_t
;

167 
	sxTASK_STATUS


169 
TaskH™dÀ_t
 
xH™dÀ
;

170 c⁄° *
pcTaskName
;

171 
UBa£Ty≥_t
 
xTaskNumbî
;

172 
eTaskSèã
 
eCuºítSèã
;

173 
UBa£Ty≥_t
 
uxCuºítPri‹ôy
;

174 
UBa£Ty≥_t
 
uxBa£Pri‹ôy
;

175 
uöt32_t
 
ulRunTimeCou¡î
;

176 
SèckTy≥_t
 *
pxSèckBa£
;

177 
uöt16_t
 
usSèckHighW©îM¨k
;

178 } 
	tTaskSètus_t
;

183 
eAb‹tSÀï
 = 0,

184 
eSènd¨dSÀï
,

185 
eNoTasksWaôögTimeout


186 } 
	teSÀïModeSètus
;

193 
	#tskIDLE_PRIORITY
 ( ( 
UBa£Ty≥_t
 ) 0U )

	)

203 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

217 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

218 
	#èskENTER_CRITICAL_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

232 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

233 
	#èskEXIT_CRITICAL_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–x )

	)

242 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

252 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

257 
	#èskSCHEDULER_SUSPENDED
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

258 
	#èskSCHEDULER_NOT_STARTED
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

259 
	#èskSCHEDULER_RUNNING
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

359 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

360 
Ba£Ty≥_t
 
xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

361 c⁄° * c⁄° 
pcName
,

362 c⁄° 
uöt16_t
 
usSèckDïth
,

363 * c⁄° 
pvP¨amëîs
,

364 
UBa£Ty≥_t
 
uxPri‹ôy
,

365 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

475 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

476 
TaskH™dÀ_t
 
xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

477 c⁄° * c⁄° 
pcName
,

478 c⁄° 
uöt32_t
 
ulSèckDïth
,

479 * c⁄° 
pvP¨amëîs
,

480 
UBa£Ty≥_t
 
uxPri‹ôy
,

481 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

482 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 ) 
PRIVILEGED_FUNCTION
;

552 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

553 
Ba£Ty≥_t
 
xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

602 
vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

643 
vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 ) 
PRIVILEGED_FUNCTION
;

695 
vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 ) 
PRIVILEGED_FUNCTION
;

754 
vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 ) 
PRIVILEGED_FUNCTION
;

779 
Ba£Ty≥_t
 
xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

826 
UBa£Ty≥_t
 
uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

834 
UBa£Ty≥_t
 
uxTaskPri‹ôyGëFromISR
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

852 
eTaskSèã
 
eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

908 
vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

950 
vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 ) 
PRIVILEGED_FUNCTION
;

1001 
vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 ) 
PRIVILEGED_FUNCTION
;

1050 
vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1079 
Ba£Ty≥_t
 
xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1112 
vTaskSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1168 
vTaskEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1219 
vTaskSu•ídAŒ
–Ë
PRIVILEGED_FUNCTION
;

1273 
Ba£Ty≥_t
 
xTaskResumeAŒ
–Ë
PRIVILEGED_FUNCTION
;

1288 
TickTy≥_t
 
xTaskGëTickCou¡
–Ë
PRIVILEGED_FUNCTION
;

1304 
TickTy≥_t
 
xTaskGëTickCou¡FromISR
–Ë
PRIVILEGED_FUNCTION
;

1318 
UBa£Ty≥_t
 
uxTaskGëNumbîOfTasks
–Ë
PRIVILEGED_FUNCTION
;

1331 *
pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1347 
TaskH™dÀ_t
 
xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1368 
UBa£Ty≥_t
 
uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1376 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1377 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1386 
vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

1394 
TaskHookFun˘i⁄_t
 
xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1398 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

1405 
vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 ) 
PRIVILEGED_FUNCTION
;

1406 *
pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 ) 
PRIVILEGED_FUNCTION
;

1421 
Ba£Ty≥_t
 
xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 ) 
PRIVILEGED_FUNCTION
;

1430 
TaskH™dÀ_t
 
xTaskGëIdÀTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

1529 
UBa£Ty≥_t
 
uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 ) 
PRIVILEGED_FUNCTION
;

1576 
vTaskLi°
–* 
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1630 
vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1711 
Ba£Ty≥_t
 
xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 ) 
PRIVILEGED_FUNCTION
;

1712 
	#xTaskNŸify
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
 )

	)

1713 
	#xTaskNŸifyAndQuîy
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifyVÆue
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifyVÆuêË)

	)

1802 
Ba£Ty≥_t
 
xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1803 
	#xTaskNŸifyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

1804 
	#xTaskNŸifyAndQuîyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifiˇti⁄VÆue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifiˇti⁄VÆuê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

1879 
Ba£Ty≥_t
 
xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1925 
	#xTaskNŸifyGive
–
xTaskToNŸify
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( 0 ), 
eIn¸emít
, 
NULL
 )

	)

1980 
vTaskNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

2049 
uöt32_t
 
ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2065 
Ba£Ty≥_t
 
xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 );

2086 
Ba£Ty≥_t
 
xTaskIn¸emítTick
–Ë
PRIVILEGED_FUNCTION
;

2119 
vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2120 
vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2133 
vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

2159 
Ba£Ty≥_t
 
xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 ) 
PRIVILEGED_FUNCTION
;

2160 
Ba£Ty≥_t
 
xTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 ) 
PRIVILEGED_FUNCTION
;

2170 
vTaskSwôchC⁄ãxt
–Ë
PRIVILEGED_FUNCTION
;

2176 
TickTy≥_t
 
uxTaskRe£tEvítIãmVÆue
–Ë
PRIVILEGED_FUNCTION
;

2181 
TaskH™dÀ_t
 
xTaskGëCuºítTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

2186 
vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

2192 
Ba£Ty≥_t
 
xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2198 
vTaskMis£dYõld
–Ë
PRIVILEGED_FUNCTION
;

2204 
Ba£Ty≥_t
 
xTaskGëScheduÀrSèã
–Ë
PRIVILEGED_FUNCTION
;

2210 
vTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2216 
Ba£Ty≥_t
 
xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2221 
UBa£Ty≥_t
 
uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

2227 
vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 ) 
PRIVILEGED_FUNCTION
;

2237 
vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 ) 
PRIVILEGED_FUNCTION
;

2253 
eSÀïModeSètus
 
eTaskC⁄fúmSÀïModeSètus
–Ë
PRIVILEGED_FUNCTION
;

2259 *
pvTaskIn¸emítMuãxHñdCou¡
–Ë
PRIVILEGED_FUNCTION
;

2261 #ifde‡
__˝lu•lus


	@rtos/tasks.c

71 
	~<°dlib.h
>

72 
	~<°rög.h
>

77 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

80 
	~"FªeRTOS.h
"

81 
	~"èsk.h
"

82 
	~"timîs.h
"

83 
	~"SèckMa¸os.h
"

89 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


93 #i‡–
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 )

98 
	~<°dio.h
>

101 #if–
c⁄figUSE_PREEMPTION
 == 0 )

104 
	#èskYIELD_IF_USING_PREEMPTION
()

	)

106 
	#èskYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

110 
	#èskNOT_WAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 0 )

	)

111 
	#èskWAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 1 )

	)

112 
	#èskNOTIFICATION_RECEIVED
 ( ( 
uöt8_t
 ) 2 )

	)

118 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

135 
	#tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 ( ( ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) ) || ( 
p‹tUSING_MPU_WRAPPERS
 =1 ) )

	)

136 
	#tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 0 )

	)

137 
	#tskSTATICALLY_ALLOCATED_STACK_ONLY
 ( ( 
uöt8_t
 ) 1 )

	)

138 
	#tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 2 )

	)

143 
	#tskBLOCKED_CHAR
 ( 'B' )

	)

144 
	#tskREADY_CHAR
 ( 'R' )

	)

145 
	#tskDELETED_CHAR
 ( 'D' )

	)

146 
	#tskSUSPENDED_CHAR
 ( 'S' )

	)

152 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


153 

	)

156 #i‡–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

164 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) \

166 if––
uxPri‹ôy
 ) > 
uxT›RódyPri‹ôy
 ) \

168 
uxT›RódyPri‹ôy
 = ( 
uxPri‹ôy
 ); \

170 }

	)

174 
	#èskSELECT_HIGHEST_PRIORITY_TASK
() \

176 
UBa£Ty≥_t
 
uxT›Pri‹ôy
 = 
uxT›RódyPri‹ôy
; \

179  
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) ) \

181 
	`c⁄figASSERT
–
uxT›Pri‹ôy
 ); \

182 --
uxT›Pri‹ôy
; \

187 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

188 
uxT›RódyPri‹ôy
 = 
uxT›Pri‹ôy
; \

189 }

	)

196 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 )

	)

197 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 )

	)

206 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) 
	`p‹tRECORD_READY_PRIORITY
–uxPri‹ôy, 
uxT›RódyPri‹ôy
 )

	)

210 
	#èskSELECT_HIGHEST_PRIORITY_TASK
() \

212 
UBa£Ty≥_t
 
uxT›Pri‹ôy
; \

215 
	`p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxT›RódyPri‹ôy
 ); \

216 
	`c⁄figASSERT
–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) > 0 ); \

217 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

218 }

	)

225 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 ) \

227 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ ( 
uxPri‹ôy
 ) ] ) ) =–
UBa£Ty≥_t
 ) 0 ) \

229 
	`p‹tRESET_READY_PRIORITY
––
uxPri‹ôy
 ), ( 
uxT›RódyPri‹ôy
 ) ); \

231 }

	)

239 
	#èskSWITCH_DELAYED_LISTS
() \

241 
Li°_t
 *
pxTemp
; \

244 
	`c⁄figASSERT
––
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) ); \

246 
pxTemp
 = 
pxDñayedTaskLi°
; \

247 
pxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
; \

248 
pxOvîÊowDñayedTaskLi°
 = 
pxTemp
; \

249 
xNumOfOvîÊows
++; \

250 
	`¥vRe£tNextTaskUnblockTime
(); \

251 }

	)

259 
	#¥vAddTaskToRódyLi°
–
pxTCB
 ) \

260 
	`åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 ); \

261 
	`èskRECORD_READY_PRIORITY
––
pxTCB
 )->
uxPri‹ôy
 ); \

262 
	`vLi°In£πEnd
–&–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xSèãLi°Iãm
 ) ); \

263 
	`åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

272 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? ( 
TCB_t
 * ) 
pxCuºítTCB
 : ( TCB_à* ) (ÖxH™dÀ ) )

	)

282 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

283 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x8000U

	)

285 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x80000000UL

	)

293 
	stskTaskC⁄åﬁBlock


295 vﬁ©ûê
SèckTy≥_t
 *
	mpxT›OfSèck
;

297 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

298 
xMPU_SETTINGS
 
	mxMPUSëtögs
;

301 
Li°Iãm_t
 
	mxSèãLi°Iãm
;

302 
Li°Iãm_t
 
	mxEvítLi°Iãm
;

303 
UBa£Ty≥_t
 
	muxPri‹ôy
;

304 
SèckTy≥_t
 *
	mpxSèck
;

305 
	mpcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

307 #i‡–
p‹tSTACK_GROWTH
 > 0 )

308 
SèckTy≥_t
 *
	mpxEndOfSèck
;

311 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

312 
UBa£Ty≥_t
 
	muxCrôiˇlNe°ög
;

315 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

316 
UBa£Ty≥_t
 
	muxTCBNumbî
;

317 
UBa£Ty≥_t
 
	muxTaskNumbî
;

320 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

321 
UBa£Ty≥_t
 
	muxBa£Pri‹ôy
;

322 
UBa£Ty≥_t
 
	muxMuãxesHñd
;

325 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

326 
TaskHookFun˘i⁄_t
 
	mpxTaskTag
;

329 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

330 *
	mpvThªadLoˇlSt‹agePoöãrs
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

333 #if–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

334 
uöt32_t
 
	mulRunTimeCou¡î
;

337 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

345 
_ªít
 
	mxNewLib_ªít
;

348 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

349 vﬁ©ûê
uöt32_t
 
	mulNŸifõdVÆue
;

350 vﬁ©ûê
uöt8_t
 
	mucNŸifySèã
;

355 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

356 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

359 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

360 
uöt8_t
 
	mucDñayAb‹ãd
;

363 } 
	ttskTCB
;

367 
tskTCB
 
	tTCB_t
;

372 
PRIVILEGED_DATA
 
TCB_t
 * vﬁ©ûê
	gpxCuºítTCB
 = 
NULL
;

375 
PRIVILEGED_DATA
 
Li°_t
 
	gpxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

376 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°1
;

377 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°2
;

378 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxDñayedTaskLi°
;

379 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxOvîÊowDñayedTaskLi°
;

380 
PRIVILEGED_DATA
 
Li°_t
 
	gxPídögRódyLi°
;

382 #if–
INCLUDE_vTaskDñëe
 == 1 )

384 
PRIVILEGED_DATA
 
Li°_t
 
	gxTasksWaôögTîmö©i⁄
;

385 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxDñëedTasksWaôögCÀ™Up
 = ( UBaseType_t ) 0U;

389 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

391 
PRIVILEGED_DATA
 
Li°_t
 
	gxSu•ídedTaskLi°
;

396 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxCuºítNumbîOfTasks
 = ( UBaseType_t ) 0U;

397 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxTickCou¡
 = ( TickType_t ) 0U;

398 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

399 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

400 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxPídedTicks
 = ( UBaseType_t ) 0U;

401 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxYõldPídög
 = 
pdFALSE
;

402 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxNumOfOvîÊows
 = ( BaseType_t ) 0;

403 
PRIVILEGED_DATA
 
UBa£Ty≥_t
 
	guxTaskNumbî
 = ( UBaseType_t ) 0U;

404 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxNextTaskUnblockTime
 = ( TickType_t ) 0U;

405 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxIdÀTaskH™dÀ
 = 
NULL
;

415 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxScheduÀrSu•íded
 = ( UBa£Ty≥_àË
pdFALSE
;

417 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

419 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTaskSwôchedInTime
 = 0UL;

420 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTŸÆRunTime
 = 0UL;

429 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 )

430 
vAµliˇti⁄SèckOvîÊowHook
–
TaskH™dÀ_t
 
xTask
, *
pcTaskName
 );

433 #if–
c⁄figUSE_TICK_HOOK
 > 0 )

434 
vAµliˇti⁄TickHook
( );

437 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

438 
vAµliˇti⁄GëIdÀTaskMem‹y
–
SèticTask_t
 **
µxIdÀTaskTCBBuf„r
, 
SèckTy≥_t
 **
µxIdÀTaskSèckBuf„r
, 
uöt32_t
 *
pulIdÀTaskSèckSize
 );

448 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

449 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

456 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

469 
	`p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 );

478 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

480 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

489 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

495 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

505 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

507 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

515 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

517 
TCB_t
 *
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 *
pxLi°
, c⁄° 
pcNameToQuîy
[] ) 
PRIVILEGED_FUNCTION
;

526 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

528 
uöt16_t
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

541 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

543 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
–Ë
PRIVILEGED_FUNCTION
;

551 
	`¥vRe£tNextTaskUnblockTime
( );

553 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

559 *
	$¥vWrôeNameToBuf„r
–*
pcBuf„r
, c⁄° *
pcTaskName
 ) 
PRIVILEGED_FUNCTION
;

567 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

568 c⁄° * c⁄° 
pcName
,

569 c⁄° 
uöt32_t
 
ulSèckDïth
,

570 * c⁄° 
pvP¨amëîs
,

571 
UBa£Ty≥_t
 
uxPri‹ôy
,

572 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

573 
TCB_t
 *
pxNewTCB
,

574 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

580 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 *
pxNewTCB
 ) 
PRIVILEGED_FUNCTION
;

584 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

586 
TaskH™dÀ_t
 
	$xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

587 c⁄° * c⁄° 
pcName
,

588 c⁄° 
uöt32_t
 
ulSèckDïth
,

589 * c⁄° 
pvP¨amëîs
,

590 
UBa£Ty≥_t
 
uxPri‹ôy
,

591 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

592 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 )

594 
TCB_t
 *
pxNewTCB
;

595 
TaskH™dÀ_t
 
xRëu∫
;

597 
	`c⁄figASSERT
–
puxSèckBuf„r
 !
NULL
 );

598 
	`c⁄figASSERT
–
pxTaskBuf„r
 !
NULL
 );

600 if––
pxTaskBuf„r
 !
NULL
 ) && ( 
puxSèckBuf„r
 != NULL ) )

604 
pxNewTCB
 = ( 
TCB_t
 * ) 
pxTaskBuf„r
;

605 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
puxSèckBuf„r
;

607 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

611 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
;

615 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, 
ulSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, &
xRëu∫
, 
pxNewTCB
, 
NULL
 );

616 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

620 
xRëu∫
 = 
NULL
;

623  
xRëu∫
;

624 
	}
}

629 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

631 
Ba£Ty≥_t
 
	$xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
 )

633 
TCB_t
 *
pxNewTCB
;

634 
Ba£Ty≥_t
 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

636 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 );

638 if–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 )

643 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

645 if–
pxNewTCB
 !
NULL
 )

648 
pxNewTCB
->
pxSèck
 = 
pxTaskDeföôi⁄
->
puxSèckBuf„r
;

653 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_ONLY
;

655 
	`¥vInôüli£NewTask
–
pxTaskDeföôi⁄
->
pvTaskCode
,

656 
pxTaskDeföôi⁄
->
pcName
,

657 –
uöt32_t
 ) 
pxTaskDeföôi⁄
->
usSèckDïth
,

658 
pxTaskDeföôi⁄
->
pvP¨amëîs
,

659 
pxTaskDeföôi⁄
->
uxPri‹ôy
,

660 
pxCª©edTask
, 
pxNewTCB
,

661 
pxTaskDeföôi⁄
->
xRegi⁄s
 );

663 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

664 
xRëu∫
 = 
pdPASS
;

668  
xRëu∫
;

669 
	}
}

674 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

676 
Ba£Ty≥_t
 
	$xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

677 c⁄° * c⁄° 
pcName
,

678 c⁄° 
uöt16_t
 
usSèckDïth
,

679 * c⁄° 
pvP¨amëîs
,

680 
UBa£Ty≥_t
 
uxPri‹ôy
,

681 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 )

683 
TCB_t
 *
pxNewTCB
;

684 
Ba£Ty≥_t
 
xRëu∫
;

689 #if–
p‹tSTACK_GROWTH
 > 0 )

694 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

696 if–
pxNewTCB
 !
NULL
 )

701 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * ( StackType_t ) ) );

703 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

706 
	`vP‹tFªe
–
pxNewTCB
 );

707 
pxNewTCB
 = 
NULL
;

713 
SèckTy≥_t
 *
pxSèck
;

716 
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * ( StackType_t ) ) );

718 if–
pxSèck
 !
NULL
 )

721 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

723 if–
pxNewTCB
 !
NULL
 )

726 
pxNewTCB
->
pxSèck
 =ÖxStack;

732 
	`vP‹tFªe
–
pxSèck
 );

737 
pxNewTCB
 = 
NULL
;

742 if–
pxNewTCB
 !
NULL
 )

744 #if–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

748 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
;

752 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, ( 
uöt32_t
 ) 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
, 
pxNewTCB
, 
NULL
 );

753 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

754 
xRëu∫
 = 
pdPASS
;

758 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

761  
xRëu∫
;

762 
	}
}

767 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

768 c⁄° * c⁄° 
pcName
,

769 c⁄° 
uöt32_t
 
ulSèckDïth
,

770 * c⁄° 
pvP¨amëîs
,

771 
UBa£Ty≥_t
 
uxPri‹ôy
,

772 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

773 
TCB_t
 *
pxNewTCB
,

774 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

776 
SèckTy≥_t
 *
pxT›OfSèck
;

777 
UBa£Ty≥_t
 
x
;

779 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

781 
Ba£Ty≥_t
 
xRunPrivûeged
;

782 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

784 
xRunPrivûeged
 = 
pdTRUE
;

788 
xRunPrivûeged
 = 
pdFALSE
;

790 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

794 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

797 –Ë
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
ulSèckDïth
 * –
SèckTy≥_t
 ) );

805 #if–
p‹tSTACK_GROWTH
 < 0 )

807 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
 + ( 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 );

808 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

811 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxT›OfSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

815 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

818 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxNewTCB
->
pxSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

822 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 );

827  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

829 
pxNewTCB
->
pcTaskName
[ 
x
 ] = 
pcName
[ x ];

834 if–
pcName
[ 
x
 ] == 0x00 )

840 
	`mtCOVERAGE_TEST_MARKER
();

846 
pxNewTCB
->
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 - 1 ] = '\0';

850 if–
uxPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

852 
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

856 
	`mtCOVERAGE_TEST_MARKER
();

859 
pxNewTCB
->
uxPri‹ôy
 = uxPriority;

860 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

862 
pxNewTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

863 
pxNewTCB
->
uxMuãxesHñd
 = 0;

867 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xSèãLi°Iãm
 ) );

868 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xEvítLi°Iãm
 ) );

872 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xSèãLi°Iãm
 ),ÖxNewTCB );

875 
	`li°SET_LIST_ITEM_VALUE
–&–
pxNewTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 );

876 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xEvítLi°Iãm
 ),ÖxNewTCB );

878 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

880 
pxNewTCB
->
uxCrôiˇlNe°ög
 = ( 
UBa£Ty≥_t
 ) 0U;

884 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

886 
pxNewTCB
->
pxTaskTag
 = 
NULL
;

890 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

892 
pxNewTCB
->
ulRunTimeCou¡î
 = 0UL;

896 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

898 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxNewTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxNewTCB->
pxSèck
, 
ulSèckDïth
 );

903 –Ë
xRegi⁄s
;

907 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

909  
x
 = 0; x < ( 
UBa£Ty≥_t
 ) 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
; x++ )

911 
pxNewTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
x
 ] = 
NULL
;

916 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

918 
pxNewTCB
->
ulNŸifõdVÆue
 = 0;

919 
pxNewTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

923 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

926 
	`_REENT_INIT_PTR
––&–
pxNewTCB
->
xNewLib_ªít
 ) ) );

930 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

932 
pxNewTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

940 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

942 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

946 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

950 if––* ) 
pxCª©edTask
 !
NULL
 )

954 *
pxCª©edTask
 = ( 
TaskH™dÀ_t
 ) 
pxNewTCB
;

958 
	`mtCOVERAGE_TEST_MARKER
();

960 
	}
}

963 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 *
pxNewTCB
 )

967 
	`èskENTER_CRITICAL
();

969 
uxCuºítNumbîOfTasks
++;

970 if–
pxCuºítTCB
 =
NULL
 )

974 
pxCuºítTCB
 = 
pxNewTCB
;

976 if–
uxCuºítNumbîOfTasks
 =–
UBa£Ty≥_t
 ) 1 )

981 
	`¥vInôüli£TaskLi°s
();

985 
	`mtCOVERAGE_TEST_MARKER
();

993 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

995 if–
pxCuºítTCB
->
uxPri‹ôy
 <
pxNewTCB
->uxPriority )

997 
pxCuºítTCB
 = 
pxNewTCB
;

1001 
	`mtCOVERAGE_TEST_MARKER
();

1006 
	`mtCOVERAGE_TEST_MARKER
();

1010 
uxTaskNumbî
++;

1012 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1015 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

1018 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

1020 
	`¥vAddTaskToRódyLi°
–
pxNewTCB
 );

1022 
	`p‹tSETUP_TCB
–
pxNewTCB
 );

1024 
	`èskEXIT_CRITICAL
();

1026 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1030 if–
pxCuºítTCB
->
uxPri‹ôy
 < 
pxNewTCB
->uxPriority )

1032 
	`èskYIELD_IF_USING_PREEMPTION
();

1036 
	`mtCOVERAGE_TEST_MARKER
();

1041 
	`mtCOVERAGE_TEST_MARKER
();

1043 
	}
}

1046 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1048 
	$vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 )

1050 
TCB_t
 *
pxTCB
;

1052 
	`èskENTER_CRITICAL
();

1056 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToDñëe
 );

1059 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1061 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1065 
	`mtCOVERAGE_TEST_MARKER
();

1069 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1071 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1075 
	`mtCOVERAGE_TEST_MARKER
();

1082 
uxTaskNumbî
++;

1084 if–
pxTCB
 =
pxCuºítTCB
 )

1091 
	`vLi°In£πEnd
–&
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1096 ++
uxDñëedTasksWaôögCÀ™Up
;

1103 
	`p‹tPRE_TASK_DELETE_HOOK
–
pxTCB
, &
xYõldPídög
 );

1107 --
uxCuºítNumbîOfTasks
;

1108 
	`¥vDñëeTCB
–
pxTCB
 );

1112 
	`¥vRe£tNextTaskUnblockTime
();

1115 
	`åa˚TASK_DELETE
–
pxTCB
 );

1117 
	`èskEXIT_CRITICAL
();

1121 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1123 if–
pxTCB
 =
pxCuºítTCB
 )

1125 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1126 
	`p‹tYIELD_WITHIN_API
();

1130 
	`mtCOVERAGE_TEST_MARKER
();

1133 
	}
}

1138 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

1140 
	$vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 )

1142 
TickTy≥_t
 
xTimeToWake
;

1143 
Ba£Ty≥_t
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

1145 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

1146 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0U ) );

1147 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1149 
	`vTaskSu•ídAŒ
();

1153 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

1156 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

1158 if–
xC⁄°TickCou¡
 < *
pxPªviousWakeTime
 )

1165 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1167 
xShouldDñay
 = 
pdTRUE
;

1171 
	`mtCOVERAGE_TEST_MARKER
();

1179 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1181 
xShouldDñay
 = 
pdTRUE
;

1185 
	`mtCOVERAGE_TEST_MARKER
();

1190 *
pxPªviousWakeTime
 = 
xTimeToWake
;

1192 if–
xShouldDñay
 !
pdFALSE
 )

1194 
	`åa˚TASK_DELAY_UNTIL
–
xTimeToWake
 );

1198 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 - 
xC⁄°TickCou¡
, 
pdFALSE
 );

1202 
	`mtCOVERAGE_TEST_MARKER
();

1205 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1209 if–
xAÃódyYõlded
 =
pdFALSE
 )

1211 
	`p‹tYIELD_WITHIN_API
();

1215 
	`mtCOVERAGE_TEST_MARKER
();

1217 
	}
}

1222 #i‡–
INCLUDE_vTaskDñay
 == 1 )

1224 
	$vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 )

1226 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

1229 if–
xTicksToDñay
 > ( 
TickTy≥_t
 ) 0U )

1231 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1232 
	`vTaskSu•ídAŒ
();

1234 
	`åa˚TASK_DELAY
();

1243 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToDñay
, 
pdFALSE
 );

1245 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1249 
	`mtCOVERAGE_TEST_MARKER
();

1254 if–
xAÃódyYõlded
 =
pdFALSE
 )

1256 
	`p‹tYIELD_WITHIN_API
();

1260 
	`mtCOVERAGE_TEST_MARKER
();

1262 
	}
}

1267 #if––
INCLUDE_eTaskGëSèã
 =1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 == 1 ) )

1269 
eTaskSèã
 
	$eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 )

1271 
eTaskSèã
 
eRëu∫
;

1272 
Li°_t
 *
pxSèãLi°
;

1273 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTask
;

1275 
	`c⁄figASSERT
–
pxTCB
 );

1277 if–
pxTCB
 =
pxCuºítTCB
 )

1280 
eRëu∫
 = 
eRu¬ög
;

1284 
	`èskENTER_CRITICAL
();

1286 
pxSèãLi°
 = ( 
Li°_t
 * ) 
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1288 
	`èskEXIT_CRITICAL
();

1290 if––
pxSèãLi°
 =
pxDñayedTaskLi°
 ) || (ÖxSèãLi° =
pxOvîÊowDñayedTaskLi°
 ) )

1294 
eRëu∫
 = 
eBlocked
;

1297 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1298 if–
pxSèãLi°
 =&
xSu•ídedTaskLi°
 )

1303 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 )

1305 
eRëu∫
 = 
eSu•íded
;

1309 
eRëu∫
 = 
eBlocked
;

1314 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1315 if––
pxSèãLi°
 =&
xTasksWaôögTîmö©i⁄
 ) || (ÖxSèãLi° =
NULL
 ) )

1320 
eRëu∫
 = 
eDñëed
;

1328 
eRëu∫
 = 
eRódy
;

1332  
eRëu∫
;

1333 
	}
}

1338 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1340 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 )

1342 
TCB_t
 *
pxTCB
;

1343 
UBa£Ty≥_t
 
uxRëu∫
;

1345 
	`èskENTER_CRITICAL
();

1349 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1350 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1352 
	`èskEXIT_CRITICAL
();

1354  
uxRëu∫
;

1355 
	}
}

1360 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1362 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGëFromISR
–
TaskH™dÀ_t
 
xTask
 )

1364 
TCB_t
 *
pxTCB
;

1365 
UBa£Ty≥_t
 
uxRëu∫
, 
uxSavedI¡îru±Sèã
;

1383 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1385 
uxSavedI¡îru±Sèã
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1389 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1390 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1392 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sèã
 );

1394  
uxRëu∫
;

1395 
	}
}

1400 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

1402 
	$vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 )

1404 
TCB_t
 *
pxTCB
;

1405 
UBa£Ty≥_t
 
uxCuºítBa£Pri‹ôy
, 
uxPri‹ôyU£dOnE¡ry
;

1406 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1408 
	`c⁄figASSERT
––
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

1411 if–
uxNewPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

1413 
uxNewPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

1417 
	`mtCOVERAGE_TEST_MARKER
();

1420 
	`èskENTER_CRITICAL
();

1424 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1426 
	`åa˚TASK_PRIORITY_SET
–
pxTCB
, 
uxNewPri‹ôy
 );

1428 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1430 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

1434 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

1438 if–
uxCuºítBa£Pri‹ôy
 !
uxNewPri‹ôy
 )

1442 if–
uxNewPri‹ôy
 > 
uxCuºítBa£Pri‹ôy
 )

1444 if–
pxTCB
 !
pxCuºítTCB
 )

1449 if–
uxNewPri‹ôy
 >
pxCuºítTCB
->
uxPri‹ôy
 )

1451 
xYõldRequúed
 = 
pdTRUE
;

1455 
	`mtCOVERAGE_TEST_MARKER
();

1465 if–
pxTCB
 =
pxCuºítTCB
 )

1470 
xYõldRequúed
 = 
pdTRUE
;

1482 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

1484 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1488 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

1490 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1494 
	`mtCOVERAGE_TEST_MARKER
();

1498 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

1502 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1508 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

1510 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxNewPri‹ôy
 ) );

1514 
	`mtCOVERAGE_TEST_MARKER
();

1521 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1526 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1531 
	`p‹tRESET_READY_PRIORITY
–
uxPri‹ôyU£dOnE¡ry
, 
uxT›RódyPri‹ôy
 );

1535 
	`mtCOVERAGE_TEST_MARKER
();

1537 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1541 
	`mtCOVERAGE_TEST_MARKER
();

1544 if–
xYõldRequúed
 !
pdFALSE
 )

1546 
	`èskYIELD_IF_USING_PREEMPTION
();

1550 
	`mtCOVERAGE_TEST_MARKER
();

1555 –Ë
uxPri‹ôyU£dOnE¡ry
;

1558 
	`èskEXIT_CRITICAL
();

1559 
	}
}

1564 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1566 
	$vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 )

1568 
TCB_t
 *
pxTCB
;

1570 
	`èskENTER_CRITICAL
();

1574 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSu•íd
 );

1576 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

1580 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1582 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1586 
	`mtCOVERAGE_TEST_MARKER
();

1590 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1592 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1596 
	`mtCOVERAGE_TEST_MARKER
();

1599 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1601 
	`èskEXIT_CRITICAL
();

1603 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1607 
	`èskENTER_CRITICAL
();

1609 
	`¥vRe£tNextTaskUnblockTime
();

1611 
	`èskEXIT_CRITICAL
();

1615 
	`mtCOVERAGE_TEST_MARKER
();

1618 if–
pxTCB
 =
pxCuºítTCB
 )

1620 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1623 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1624 
	`p‹tYIELD_WITHIN_API
();

1631 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

1637 
pxCuºítTCB
 = 
NULL
;

1641 
	`vTaskSwôchC⁄ãxt
();

1647 
	`mtCOVERAGE_TEST_MARKER
();

1649 
	}
}

1654 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1656 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1658 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

1659 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTask
;

1665 
	`c⁄figASSERT
–
xTask
 );

1668 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1671 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdFALSE
 )

1675 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdFALSE
 )

1677 
xRëu∫
 = 
pdTRUE
;

1681 
	`mtCOVERAGE_TEST_MARKER
();

1686 
	`mtCOVERAGE_TEST_MARKER
();

1691 
	`mtCOVERAGE_TEST_MARKER
();

1694  
xRëu∫
;

1695 
	}
}

1700 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1702 
	$vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 )

1704 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTaskToResume
;

1707 
	`c⁄figASSERT
–
xTaskToResume
 );

1711 if––
pxTCB
 !
NULL
 ) && (ÖxTCB !
pxCuºítTCB
 ) )

1713 
	`èskENTER_CRITICAL
();

1715 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1717 
	`åa˚TASK_RESUME
–
pxTCB
 );

1721 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1722 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1725 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1730 
	`èskYIELD_IF_USING_PREEMPTION
();

1734 
	`mtCOVERAGE_TEST_MARKER
();

1739 
	`mtCOVERAGE_TEST_MARKER
();

1742 
	`èskEXIT_CRITICAL
();

1746 
	`mtCOVERAGE_TEST_MARKER
();

1748 
	}
}

1754 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1756 
Ba£Ty≥_t
 
	$xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 )

1758 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1759 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTaskToResume
;

1760 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1762 
	`c⁄figASSERT
–
xTaskToResume
 );

1780 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1782 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1784 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1786 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1789 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1793 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1795 
xYõldRequúed
 = 
pdTRUE
;

1799 
	`mtCOVERAGE_TEST_MARKER
();

1802 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1803 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1810 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1815 
	`mtCOVERAGE_TEST_MARKER
();

1818 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1820  
xYõldRequúed
;

1821 
	}
}

1826 
	$vTaskSèπScheduÀr
( )

1828 
Ba£Ty≥_t
 
xRëu∫
;

1831 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1833 
SèticTask_t
 *
pxIdÀTaskTCBBuf„r
 = 
NULL
;

1834 
SèckTy≥_t
 *
pxIdÀTaskSèckBuf„r
 = 
NULL
;

1835 
uöt32_t
 
ulIdÀTaskSèckSize
;

1839 
	`vAµliˇti⁄GëIdÀTaskMem‹y
–&
pxIdÀTaskTCBBuf„r
, &
pxIdÀTaskSèckBuf„r
, &
ulIdÀTaskSèckSize
 );

1840 
xIdÀTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vIdÀTask
,

1842 
ulIdÀTaskSèckSize
,

1843 –* ) 
NULL
,

1844 –
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ),

1845 
pxIdÀTaskSèckBuf„r
,

1846 
pxIdÀTaskTCBBuf„r
 );

1848 if–
xIdÀTaskH™dÀ
 !
NULL
 )

1850 
xRëu∫
 = 
pdPASS
;

1854 
xRëu∫
 = 
pdFAIL
;

1860 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
,

1861 "IDLE", 
c⁄figMINIMAL_STACK_SIZE
,

1862 –* ) 
NULL
,

1863 –
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ),

1864 &
xIdÀTaskH™dÀ
 );

1868 #i‡–
c⁄figUSE_TIMERS
 == 1 )

1870 if–
xRëu∫
 =
pdPASS
 )

1872 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

1876 
	`mtCOVERAGE_TEST_MARKER
();

1881 if–
xRëu∫
 =
pdPASS
 )

1888 
	`p‹tDISABLE_INTERRUPTS
();

1890 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

1894 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

1898 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

1899 
xScheduÀrRu¬ög
 = 
pdTRUE
;

1900 
xTickCou¡
 = ( 
TickTy≥_t
 ) 0U;

1905 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

1909 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

1924 
	`c⁄figASSERT
–
xRëu∫
 !
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 );

1929 –Ë
xIdÀTaskH™dÀ
;

1930 
	}
}

1933 
	$vTaskEndScheduÀr
( )

1938 
	`p‹tDISABLE_INTERRUPTS
();

1939 
xScheduÀrRu¬ög
 = 
pdFALSE
;

1940 
	`vP‹tEndScheduÀr
();

1941 
	}
}

1944 
	$vTaskSu•ídAŒ
( )

1950 ++
uxScheduÀrSu•íded
;

1951 
	}
}

1954 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

1956 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
( )

1958 
TickTy≥_t
 
xRëu∫
;

1959 
UBa£Ty≥_t
 
uxHighîPri‹ôyRódyTasks
 = 
pdFALSE
;

1965 #if–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

1967 if–
uxT›RódyPri‹ôy
 > 
tskIDLE_PRIORITY
 )

1969 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

1974 c⁄° 
UBa£Ty≥_t
 
uxLó°Signifiˇ¡Bô
 = ( UBaseType_t ) 0x01;

1981 if–
uxT›RódyPri‹ôy
 > 
uxLó°Signifiˇ¡Bô
 )

1983 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

1985 
	}
}

1988 if–
	gpxCuºítTCB
->
	guxPri‹ôy
 > 
	gtskIDLE_PRIORITY
 )

1990 
	gxRëu∫
 = 0;

1992 if–
li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > 1 )

1997 
	gxRëu∫
 = 0;

1999 if–
	guxHighîPri‹ôyRódyTasks
 !
pdFALSE
 )

2004 
xRëu∫
 = 0;

2008 
	gxRëu∫
 = 
xNextTaskUnblockTime
 - 
xTickCou¡
;

2011  
	gxRëu∫
;

2017 
Ba£Ty≥_t
 
	$xTaskResumeAŒ
( )

2019 
TCB_t
 *
pxTCB
 = 
NULL
;

2020 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

2024 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

2031 
	`èskENTER_CRITICAL
();

2033 --
uxScheduÀrSu•íded
;

2035 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2037 if–
uxCuºítNumbîOfTasks
 > ( 
UBa£Ty≥_t
 ) 0U )

2041  
	`li°LIST_IS_EMPTY
–&
xPídögRódyLi°
 ) =
pdFALSE
 )

2043 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xPídögRódyLi°
 ) );

2044 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2045 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2046 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2050 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2052 
xYõldPídög
 = 
pdTRUE
;

2056 
	`mtCOVERAGE_TEST_MARKER
();

2060 if–
pxTCB
 !
NULL
 )

2068 
	`¥vRe£tNextTaskUnblockTime
();

2076 
UBa£Ty≥_t
 
uxPídedCou¡s
 = 
uxPídedTicks
;

2078 if–
uxPídedCou¡s
 > ( 
UBa£Ty≥_t
 ) 0U )

2082 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

2084 
xYõldPídög
 = 
pdTRUE
;

2088 
	`mtCOVERAGE_TEST_MARKER
();

2090 --
uxPídedCou¡s
;

2091 }  
uxPídedCou¡s
 > ( 
UBa£Ty≥_t
 ) 0U );

2093 
uxPídedTicks
 = 0;

2097 
	`mtCOVERAGE_TEST_MARKER
();

2101 if–
xYõldPídög
 !
pdFALSE
 )

2103 #if–
c⁄figUSE_PREEMPTION
 != 0 )

2105 
xAÃódyYõlded
 = 
pdTRUE
;

2108 
	`èskYIELD_IF_USING_PREEMPTION
();

2112 
	`mtCOVERAGE_TEST_MARKER
();

2118 
	`mtCOVERAGE_TEST_MARKER
();

2121 
	`èskEXIT_CRITICAL
();

2123  
xAÃódyYõlded
;

2124 
	}
}

2127 
TickTy≥_t
 
	$xTaskGëTickCou¡
( )

2129 
TickTy≥_t
 
xTicks
;

2132 
	`p‹tTICK_TYPE_ENTER_CRITICAL
();

2134 
xTicks
 = 
xTickCou¡
;

2136 
	`p‹tTICK_TYPE_EXIT_CRITICAL
();

2138  
xTicks
;

2139 
	}
}

2142 
TickTy≥_t
 
	$xTaskGëTickCou¡FromISR
( )

2144 
TickTy≥_t
 
xRëu∫
;

2145 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

2161 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

2163 
uxSavedI¡îru±Sètus
 = 
	`p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
();

2165 
xRëu∫
 = 
xTickCou¡
;

2167 
	`p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

2169  
xRëu∫
;

2170 
	}
}

2173 
UBa£Ty≥_t
 
	$uxTaskGëNumbîOfTasks
( )

2177  
uxCuºítNumbîOfTasks
;

2178 
	}
}

2181 *
	$pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 )

2183 
TCB_t
 *
pxTCB
;

2187 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

2188 
	`c⁄figASSERT
–
pxTCB
 );

2189  &–
pxTCB
->
pcTaskName
[ 0 ] );

2190 
	}
}

2193 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2195 
TCB_t
 *
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 *
pxLi°
, c⁄° 
pcNameToQuîy
[] )

2197 
TCB_t
 *
pxNextTCB
, *
pxFú°TCB
, *
pxRëu∫
 = 
NULL
;

2198 
UBa£Ty≥_t
 
x
;

2199 
cNextCh¨
;

2203 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

2205 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2209 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2213  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

2215 
cNextCh¨
 = 
pxNextTCB
->
pcTaskName
[ 
x
 ];

2217 if–
cNextCh¨
 !
pcNameToQuîy
[ 
x
 ] )

2222 if–
cNextCh¨
 == 0x00 )

2226 
pxRëu∫
 = 
pxNextTCB
;

2231 
	`mtCOVERAGE_TEST_MARKER
();

2235 if–
pxRëu∫
 !
NULL
 )

2241 }  
pxNextTCB
 !
pxFú°TCB
 );

2245 
	`mtCOVERAGE_TEST_MARKER
();

2248  
pxRëu∫
;

2249 
	}
}

2254 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2256 
TaskH™dÀ_t
 
	$xTaskGëH™dÀ
–c⁄° *
pcNameToQuîy
 )

2258 
UBa£Ty≥_t
 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2259 
TCB_t
* 
pxTCB
;

2262 
	`c⁄figASSERT
–
	`°æí
–
pcNameToQuîy
 ) < 
c⁄figMAX_TASK_NAME_LEN
 );

2264 
	`vTaskSu•ídAŒ
();

2269 
uxQueue
--;

2270 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
pcNameToQuîy
 );

2272 if–
pxTCB
 !
NULL
 )

2278 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2281 if–
pxTCB
 =
NULL
 )

2283 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxDñayedTaskLi°
, 
pcNameToQuîy
 );

2286 if–
pxTCB
 =
NULL
 )

2288 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
pcNameToQuîy
 );

2291 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2293 if–
pxTCB
 =
NULL
 )

2296 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xSu•ídedTaskLi°
, 
pcNameToQuîy
 );

2301 #if–
INCLUDE_vTaskDñëe
 == 1 )

2303 if–
pxTCB
 =
NULL
 )

2306 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xTasksWaôögTîmö©i⁄
, 
pcNameToQuîy
 );

2311 –Ë
	`xTaskResumeAŒ
();

2313  ( 
TaskH™dÀ_t
 ) 
pxTCB
;

2314 
	}
}

2319 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2321 
UBa£Ty≥_t
 
	$uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° 
UBa£Ty≥_t
 
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 )

2323 
UBa£Ty≥_t
 
uxTask
 = 0, 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2325 
	`vTaskSu•ídAŒ
();

2328 if–
uxAºaySize
 >
uxCuºítNumbîOfTasks
 )

2334 
uxQueue
--;

2335 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
eRódy
 );

2337 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2341 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxDñayedTaskLi°
, 
eBlocked
 );

2342 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
eBlocked
 );

2344 #if–
INCLUDE_vTaskDñëe
 == 1 )

2348 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xTasksWaôögTîmö©i⁄
, 
eDñëed
 );

2352 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2356 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xSu•ídedTaskLi°
, 
eSu•íded
 );

2360 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1)

2362 if–
pulTŸÆRunTime
 !
NULL
 )

2364 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


2365 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
––*
pulTŸÆRunTime
 ) );

2367 *
pulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

2373 if–
pulTŸÆRunTime
 !
NULL
 )

2375 *
pulTŸÆRunTime
 = 0;

2382 
	`mtCOVERAGE_TEST_MARKER
();

2385 –Ë
	`xTaskResumeAŒ
();

2387  
uxTask
;

2388 
	}
}

2393 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

2395 
TaskH™dÀ_t
 
	$xTaskGëIdÀTaskH™dÀ
( )

2399 
	`c⁄figASSERT
––
xIdÀTaskH™dÀ
 !
NULL
 ) );

2400  
xIdÀTaskH™dÀ
;

2401 
	}
}

2410 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2412 
	$vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 )

2417 
	`c⁄figASSERT
––
xTickCou¡
 + 
xTicksToJump
 ) <
xNextTaskUnblockTime
 );

2418 
xTickCou¡
 +
xTicksToJump
;

2419 
	`åa˚INCREASE_TICK_COUNT
–
xTicksToJump
 );

2420 
	}
}

2425 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

2427 
Ba£Ty≥_t
 
	$xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 )

2429 
TCB_t
 *
pxTCB
 = ( TCB_à* ) 
xTask
;

2430 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2432 
	`c⁄figASSERT
–
pxTCB
 );

2434 
	`vTaskSu•ídAŒ
();

2438 if–
	`eTaskGëSèã
–
xTask
 ) =
eBlocked
 )

2443 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2449 
	`èskENTER_CRITICAL
();

2451 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2453 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2454 
pxTCB
->
ucDñayAb‹ãd
 = 
pdTRUE
;

2458 
	`mtCOVERAGE_TEST_MARKER
();

2461 
	`èskEXIT_CRITICAL
();

2464 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2468 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2473 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2477 
xYõldPídög
 = 
pdTRUE
;

2481 
	`mtCOVERAGE_TEST_MARKER
();

2488 
	`mtCOVERAGE_TEST_MARKER
();

2491 
	`xTaskResumeAŒ
();

2493  
xRëu∫
;

2494 
	}
}

2499 
Ba£Ty≥_t
 
	$xTaskIn¸emítTick
( )

2501 
TCB_t
 * 
pxTCB
;

2502 
TickTy≥_t
 
xIãmVÆue
;

2503 
Ba£Ty≥_t
 
xSwôchRequúed
 = 
pdFALSE
;

2508 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

2509 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2513 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
 + 1;

2517 
xTickCou¡
 = 
xC⁄°TickCou¡
;

2519 if–
xC⁄°TickCou¡
 =–
TickTy≥_t
 ) 0U )

2521 
	`èskSWITCH_DELAYED_LISTS
();

2525 
	`mtCOVERAGE_TEST_MARKER
();

2532 if–
xC⁄°TickCou¡
 >
xNextTaskUnblockTime
 )

2536 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

2543 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

2552 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

2553 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2555 if–
xC⁄°TickCou¡
 < 
xIãmVÆue
 )

2562 
xNextTaskUnblockTime
 = 
xIãmVÆue
;

2567 
	`mtCOVERAGE_TEST_MARKER
();

2571 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2575 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2577 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2581 
	`mtCOVERAGE_TEST_MARKER
();

2586 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2590 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2596 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2598 
xSwôchRequúed
 = 
pdTRUE
;

2602 
	`mtCOVERAGE_TEST_MARKER
();

2613 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figUSE_TIME_SLICING
 == 1 ) )

2615 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
pxCuºítTCB
->
uxPri‹ôy
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

2617 
xSwôchRequúed
 = 
pdTRUE
;

2621 
	`mtCOVERAGE_TEST_MARKER
();

2626 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2630 if–
uxPídedTicks
 =–
UBa£Ty≥_t
 ) 0U )

2632 
	`vAµliˇti⁄TickHook
();

2636 
	`mtCOVERAGE_TEST_MARKER
();

2643 ++
uxPídedTicks
;

2647 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2649 
	`vAµliˇti⁄TickHook
();

2654 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2656 if–
xYõldPídög
 !
pdFALSE
 )

2658 
xSwôchRequúed
 = 
pdTRUE
;

2662 
	`mtCOVERAGE_TEST_MARKER
();

2667  
xSwôchRequúed
;

2668 
	}
}

2671 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2673 
	$vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 )

2675 
TCB_t
 *
xTCB
;

2679 if–
xTask
 =
NULL
 )

2681 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2685 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2690 
	`èskENTER_CRITICAL
();

2691 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

2692 
	`èskEXIT_CRITICAL
();

2693 
	}
}

2698 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2700 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 )

2702 
TCB_t
 *
xTCB
;

2703 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2706 if–
xTask
 =
NULL
 )

2708 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2712 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2717 
	`èskENTER_CRITICAL
();

2719 
xRëu∫
 = 
xTCB
->
pxTaskTag
;

2721 
	`èskEXIT_CRITICAL
();

2723  
xRëu∫
;

2724 
	}
}

2729 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2731 
Ba£Ty≥_t
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 )

2733 
TCB_t
 *
xTCB
;

2734 
Ba£Ty≥_t
 
xRëu∫
;

2737 if–
xTask
 =
NULL
 )

2739 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2743 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2746 if–
xTCB
->
pxTaskTag
 !
NULL
 )

2748 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

2752 
xRëu∫
 = 
pdFAIL
;

2755  
xRëu∫
;

2756 
	}
}

2761 
	$vTaskSwôchC⁄ãxt
( )

2763 if–
uxScheduÀrSu•íded
 !–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2767 
xYõldPídög
 = 
pdTRUE
;

2771 
xYõldPídög
 = 
pdFALSE
;

2772 
	`åa˚TASK_SWITCHED_OUT
();

2774 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2776 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


2777 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

2779 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

2789 if–
ulTŸÆRunTime
 > 
ulTaskSwôchedInTime
 )

2791 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTŸÆRunTime
 - 
ulTaskSwôchedInTime
 );

2795 
	`mtCOVERAGE_TEST_MARKER
();

2797 
ulTaskSwôchedInTime
 = 
ulTŸÆRunTime
;

2802 
	`èskCHECK_FOR_STACK_OVERFLOW
();

2806 
	`èskSELECT_HIGHEST_PRIORITY_TASK
();

2807 
	`åa˚TASK_SWITCHED_IN
();

2809 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

2813 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

2817 
	}
}

2820 
	$vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

2822 
	`c⁄figASSERT
–
pxEvítLi°
 );

2831 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2833 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

2834 
	}
}

2837 
	$vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 )

2839 
	`c⁄figASSERT
–
pxEvítLi°
 );

2843 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 != 0 );

2848 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

2855 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2857 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

2858 
	}
}

2861 #if–
c⁄figUSE_TIMERS
 == 1 )

2863 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

2865 
	`c⁄figASSERT
–
pxEvítLi°
 );

2877 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2882 if–
xWaôIndeföôñy
 !
pdFALSE
 )

2884 
xTicksToWaô
 = 
p‹tMAX_DELAY
;

2887 
	`åa˚TASK_DELAY_UNTIL
––
xTickCou¡
 + 
xTicksToWaô
 ) );

2888 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
xWaôIndeföôñy
 );

2889 
	}
}

2894 
Ba£Ty≥_t
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 )

2896 
TCB_t
 *
pxUnblockedTCB
;

2897 
Ba£Ty≥_t
 
xRëu∫
;

2912 
pxUnblockedTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

2913 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

2914 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

2916 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2918 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

2919 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

2925 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

2928 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2933 
xRëu∫
 = 
pdTRUE
;

2937 
xYõldPídög
 = 
pdTRUE
;

2941 
xRëu∫
 = 
pdFALSE
;

2944 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2954 
	`¥vRe£tNextTaskUnblockTime
();

2958  
xRëu∫
;

2959 
	}
}

2962 
Ba£Ty≥_t
 
	$xTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 )

2964 
TCB_t
 *
pxUnblockedTCB
;

2965 
Ba£Ty≥_t
 
xRëu∫
;

2969 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 !
pdFALSE
 );

2972 
	`li°SET_LIST_ITEM_VALUE
–
pxEvítLi°Iãm
, 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

2976 
pxUnblockedTCB
 = ( 
TCB_t
 * ) 
	`li°GET_LIST_ITEM_OWNER
–
pxEvítLi°Iãm
 );

2977 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

2978 –Ë
	`uxLi°Remove
–
pxEvítLi°Iãm
 );

2983 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

2984 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

2986 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2992 
xRëu∫
 = 
pdTRUE
;

2996 
xYõldPídög
 = 
pdTRUE
;

3000 
xRëu∫
 = 
pdFALSE
;

3003  
xRëu∫
;

3004 
	}
}

3007 
	$vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

3009 
	`c⁄figASSERT
–
pxTimeOut
 );

3010 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

3011 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

3012 
	}
}

3015 
Ba£Ty≥_t
 
	$xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 )

3017 
Ba£Ty≥_t
 
xRëu∫
;

3019 
	`c⁄figASSERT
–
pxTimeOut
 );

3020 
	`c⁄figASSERT
–
pxTicksToWaô
 );

3022 
	`èskENTER_CRITICAL
();

3025 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

3027 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

3028 if–
pxCuºítTCB
->
ucDñayAb‹ãd
 !
pdFALSE
 )

3032 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

3033 
xRëu∫
 = 
pdTRUE
;

3038 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3039 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

3044 
xRëu∫
 = 
pdFALSE
;

3049 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( 
xC⁄°TickCou¡
 >pxTimeOut->
xTimeOnE¡îög
 ) )

3056 
xRëu∫
 = 
pdTRUE
;

3058 if–––
TickTy≥_t
 ) ( 
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
 ) ) < *
pxTicksToWaô
 )

3061 *
pxTicksToWaô
 -–
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
 );

3062 
	`vTaskSëTimeOutSèã
–
pxTimeOut
 );

3063 
xRëu∫
 = 
pdFALSE
;

3067 
xRëu∫
 = 
pdTRUE
;

3070 
	`èskEXIT_CRITICAL
();

3072  
xRëu∫
;

3073 
	}
}

3076 
	$vTaskMis£dYõld
( )

3078 
xYõldPídög
 = 
pdTRUE
;

3079 
	}
}

3082 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3084 
UBa£Ty≥_t
 
	$uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 )

3086 
UBa£Ty≥_t
 
uxRëu∫
;

3087 
TCB_t
 *
pxTCB
;

3089 if–
xTask
 !
NULL
 )

3091 
pxTCB
 = ( 
TCB_t
 * ) 
xTask
;

3092 
uxRëu∫
 = 
pxTCB
->
uxTaskNumbî
;

3096 
uxRëu∫
 = 0U;

3099  
uxRëu∫
;

3100 
	}
}

3105 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3107 
	$vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 )

3109 
TCB_t
 *
pxTCB
;

3111 if–
xTask
 !
NULL
 )

3113 
pxTCB
 = ( 
TCB_t
 * ) 
xTask
;

3114 
pxTCB
->
uxTaskNumbî
 = 
uxH™dÀ
;

3116 
	}
}

3131 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

3134 –Ë
pvP¨amëîs
;

3143 
	`¥vCheckTasksWaôögTîmö©i⁄
();

3145 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

3151 
	`èskYIELD
();

3155 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

3166 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

3168 
	`èskYIELD
();

3172 
	`mtCOVERAGE_TEST_MARKER
();

3177 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

3179 
	`vAµliˇti⁄IdÀHook
( );

3186 
	`vAµliˇti⁄IdÀHook
();

3194 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3196 
TickTy≥_t
 
xEx≥˘edIdÀTime
;

3203 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3205 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3207 
	`vTaskSu•ídAŒ
();

3212 
	`c⁄figASSERT
–
xNextTaskUnblockTime
 >
xTickCou¡
 );

3213 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3215 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3217 
	`åa˚LOW_POWER_IDLE_BEGIN
();

3218 
	`p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 );

3219 
	`åa˚LOW_POWER_IDLE_END
();

3223 
	`mtCOVERAGE_TEST_MARKER
();

3226 –Ë
	`xTaskResumeAŒ
();

3230 
	`mtCOVERAGE_TEST_MARKER
();

3235 
	}
}

3238 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3240 
eSÀïModeSètus
 
	$eTaskC⁄fúmSÀïModeSètus
( )

3243 c⁄° 
UBa£Ty≥_t
 
uxN⁄Aµliˇti⁄Tasks
 = 1;

3244 
eSÀïModeSètus
 
eRëu∫
 = 
eSènd¨dSÀï
;

3246 if–
	`li°CURRENT_LIST_LENGTH
–&
xPídögRódyLi°
 ) != 0 )

3249 
eRëu∫
 = 
eAb‹tSÀï
;

3251 if–
xYõldPídög
 !
pdFALSE
 )

3254 
eRëu∫
 = 
eAb‹tSÀï
;

3262 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =–
uxCuºítNumbîOfTasks
 - 
uxN⁄Aµliˇti⁄Tasks
 ) )

3264 
eRëu∫
 = 
eNoTasksWaôögTimeout
;

3268 
	`mtCOVERAGE_TEST_MARKER
();

3272  
eRëu∫
;

3273 
	}
}

3278 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3280 
	$vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 )

3282 
TCB_t
 *
pxTCB
;

3284 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3286 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSë
 );

3287 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ] = 
pvVÆue
;

3289 
	}
}

3294 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3296 *
	$pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 )

3298 *
pvRëu∫
 = 
NULL
;

3299 
TCB_t
 *
pxTCB
;

3301 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3303 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

3304 
pvRëu∫
 = 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ];

3308 
pvRëu∫
 = 
NULL
;

3311  
pvRëu∫
;

3312 
	}
}

3317 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

3319 
	$vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTaskToModify
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

3321 
TCB_t
 *
pxTCB
;

3325 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

3327 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

3328 
	}
}

3333 
	$¥vInôüli£TaskLi°s
( )

3335 
UBa£Ty≥_t
 
uxPri‹ôy
;

3337  
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 0U; uxPri‹ôy < ( UBa£Ty≥_àË
c⁄figMAX_PRIORITIES
; uxPriority++ )

3339 
	`vLi°Inôüli£
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

3342 
	`vLi°Inôüli£
–&
xDñayedTaskLi°1
 );

3343 
	`vLi°Inôüli£
–&
xDñayedTaskLi°2
 );

3344 
	`vLi°Inôüli£
–&
xPídögRódyLi°
 );

3346 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3348 
	`vLi°Inôüli£
–&
xTasksWaôögTîmö©i⁄
 );

3352 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3354 
	`vLi°Inôüli£
–&
xSu•ídedTaskLi°
 );

3360 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

3361 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

3362 
	}
}

3365 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

3370 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3372 
Ba£Ty≥_t
 
xLi°IsEm±y
;

3376  
uxDñëedTasksWaôögCÀ™Up
 > ( 
UBa£Ty≥_t
 ) 0U )

3378 
	`vTaskSu•ídAŒ
();

3380 
xLi°IsEm±y
 = 
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 );

3382 –Ë
	`xTaskResumeAŒ
();

3384 if–
xLi°IsEm±y
 =
pdFALSE
 )

3386 
TCB_t
 *
pxTCB
;

3388 
	`èskENTER_CRITICAL
();

3390 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xTasksWaôögTîmö©i⁄
 ) );

3391 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

3392 --
uxCuºítNumbîOfTasks
;

3393 --
uxDñëedTasksWaôögCÀ™Up
;

3395 
	`èskEXIT_CRITICAL
();

3397 
	`¥vDñëeTCB
–
pxTCB
 );

3401 
	`mtCOVERAGE_TEST_MARKER
();

3406 
	}
}

3409 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3411 
	$vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
 )

3413 
TCB_t
 *
pxTCB
;

3416 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3418 
pxTaskSètus
->
xH™dÀ
 = ( 
TaskH™dÀ_t
 ) 
pxTCB
;

3419 
pxTaskSètus
->
pcTaskName
 = ( c⁄° * ) &–
pxTCB
->pcTaskName [ 0 ] );

3420 
pxTaskSètus
->
uxCuºítPri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

3421 
pxTaskSètus
->
pxSèckBa£
 = 
pxTCB
->
pxSèck
;

3422 
pxTaskSètus
->
xTaskNumbî
 = 
pxTCB
->
uxTCBNumbî
;

3424 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3429 if–
pxTaskSètus
->
eCuºítSèã
 =
eSu•íded
 )

3431 
	`vTaskSu•ídAŒ
();

3433 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

3435 
pxTaskSètus
->
eCuºítSèã
 = 
eBlocked
;

3438 
	`xTaskResumeAŒ
();

3443 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3445 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 
pxTCB
->uxBasePriority;

3449 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 0;

3453 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

3455 
pxTaskSètus
->
ulRunTimeCou¡î
 = 
pxTCB
->ulRunTimeCounter;

3459 
pxTaskSètus
->
ulRunTimeCou¡î
 = 0;

3466 if–
eSèã
 !
eInvÆid
 )

3468 
pxTaskSètus
->
eCuºítSèã
 = 
eSèã
;

3472 
pxTaskSètus
->
eCuºítSèã
 = 
	`eTaskGëSèã
–
xTask
 );

3477 if–
xGëFªeSèckS∑˚
 !
pdFALSE
 )

3479 #i‡–
p‹tSTACK_GROWTH
 > 0 )

3481 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
 );

3485 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxSèck
 );

3491 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 0;

3493 
	}
}

3498 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3500 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 )

3502 vﬁ©ûê
TCB_t
 *
pxNextTCB
, *
pxFú°TCB
;

3503 
UBa£Ty≥_t
 
uxTask
 = 0;

3505 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

3507 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

3515 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

3516 
	`vTaskGëInfo
––
TaskH™dÀ_t
 ) 
pxNextTCB
, &–
pxTaskSètusAºay
[ 
uxTask
 ] ), 
pdTRUE
, 
eSèã
 );

3517 
uxTask
++;

3518 }  
pxNextTCB
 !
pxFú°TCB
 );

3522 
	`mtCOVERAGE_TEST_MARKER
();

3525  
uxTask
;

3526 
	}
}

3531 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

3533 
uöt16_t
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 )

3535 
uöt32_t
 
ulCou¡
 = 0U;

3537  *
pucSèckByã
 =–
uöt8_t
 ) 
tskSTACK_FILL_BYTE
 )

3539 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

3540 
ulCou¡
++;

3543 
ulCou¡
 /–
uöt32_t
 ) –
SèckTy≥_t
 );

3545  ( 
uöt16_t
 ) 
ulCou¡
;

3546 
	}
}

3551 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

3553 
UBa£Ty≥_t
 
	$uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 )

3555 
TCB_t
 *
pxTCB
;

3556 
uöt8_t
 *
pucEndOfSèck
;

3557 
UBa£Ty≥_t
 
uxRëu∫
;

3559 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3561 #i‡
p‹tSTACK_GROWTH
 < 0

3563 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3567 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3571 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3573  
uxRëu∫
;

3574 
	}
}

3579 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3581 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 )

3586 
	`p‹tCLEAN_UP_TCB
–
pxTCB
 );

3590 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

3592 
	`_ª˛aim_ªít
–&–
pxTCB
->
xNewLib_ªít
 ) );

3596 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
p‹tUSING_MPU_WRAPPERS
 == 0 ) )

3600 
	`vP‹tFªe
–
pxTCB
->
pxSèck
 );

3601 
	`vP‹tFªe
–
pxTCB
 );

3603 #ñif–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 == 1 )

3608 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 )

3612 
	`vP‹tFªe
–
pxTCB
->
pxSèck
 );

3613 
	`vP‹tFªe
–
pxTCB
 );

3615 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_ONLY
 )

3619 
	`vP‹tFªe
–
pxTCB
 );

3625 
	`c⁄figASSERT
–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 )

3626 
	`mtCOVERAGE_TEST_MARKER
();

3630 
	}
}

3635 
	$¥vRe£tNextTaskUnblockTime
( )

3637 
TCB_t
 *
pxTCB
;

3639 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

3645 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

3653 –
pxTCB
 ) = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

3654 
xNextTaskUnblockTime
 = 
	`li°GET_LIST_ITEM_VALUE
–&––
pxTCB
 )->
xSèãLi°Iãm
 ) );

3656 
	}
}

3659 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

3661 
TaskH™dÀ_t
 
	$xTaskGëCuºítTaskH™dÀ
( )

3663 
TaskH™dÀ_t
 
xRëu∫
;

3668 
xRëu∫
 = 
pxCuºítTCB
;

3670  
xRëu∫
;

3671 
	}
}

3676 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

3678 
Ba£Ty≥_t
 
	$xTaskGëScheduÀrSèã
( )

3680 
Ba£Ty≥_t
 
xRëu∫
;

3682 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

3684 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

3688 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3690 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

3694 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

3698  
xRëu∫
;

3699 
	}
}

3704 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3706 
	$vTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

3708 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
pxMuãxHﬁdî
;

3712 if–
pxMuãxHﬁdî
 !
NULL
 )

3717 if–
pxTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

3722 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

3724 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
pxCuºítTCB
->
uxPri‹ôy
 );

3728 
	`mtCOVERAGE_TEST_MARKER
();

3733 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxTCB
->
uxPri‹ôy
 ] ), &–pxTCB->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

3735 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

3737 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

3741 
	`mtCOVERAGE_TEST_MARKER
();

3745 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

3746 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

3751 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

3754 
	`åa˚TASK_PRIORITY_INHERIT
–
pxTCB
, 
pxCuºítTCB
->
uxPri‹ôy
 );

3758 
	`mtCOVERAGE_TEST_MARKER
();

3763 
	`mtCOVERAGE_TEST_MARKER
();

3765 
	}
}

3770 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3772 
Ba£Ty≥_t
 
	$xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

3774 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
pxMuãxHﬁdî
;

3775 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

3777 if–
pxMuãxHﬁdî
 !
NULL
 )

3783 
	`c⁄figASSERT
–
pxTCB
 =
pxCuºítTCB
 );

3785 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

3786 –
pxTCB
->
uxMuãxesHñd
 )--;

3790 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

3793 if–
pxTCB
->
uxMuãxesHñd
 =–
UBa£Ty≥_t
 ) 0 )

3800 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

3802 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

3806 
	`mtCOVERAGE_TEST_MARKER
();

3811 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

3812 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

3817 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxTCB->
uxPri‹ôy
 );

3818 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

3828 
xRëu∫
 = 
pdTRUE
;

3832 
	`mtCOVERAGE_TEST_MARKER
();

3837 
	`mtCOVERAGE_TEST_MARKER
();

3842 
	`mtCOVERAGE_TEST_MARKER
();

3845  
xRëu∫
;

3846 
	}
}

3851 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

3853 
	$vTaskE¡îCrôiˇl
( )

3855 
	`p‹tDISABLE_INTERRUPTS
();

3857 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

3859 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

3867 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 1 )

3869 
	`p‹tASSERT_IF_IN_ISR
();

3874 
	`mtCOVERAGE_TEST_MARKER
();

3876 
	}
}

3881 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

3883 
	$vTaskExôCrôiˇl
( )

3885 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

3887 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0U )

3889 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

3891 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0U )

3893 
	`p‹tENABLE_INTERRUPTS
();

3897 
	`mtCOVERAGE_TEST_MARKER
();

3902 
	`mtCOVERAGE_TEST_MARKER
();

3907 
	`mtCOVERAGE_TEST_MARKER
();

3909 
	}
}

3914 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

3916 *
	$¥vWrôeNameToBuf„r
–*
pcBuf„r
, c⁄° *
pcTaskName
 )

3918 
size_t
 
x
;

3921 
	`°r˝y
–
pcBuf„r
, 
pcTaskName
 );

3925  
x
 = 
	`°æí
–
pcBuf„r
 ); x < ( 
size_t
 ) ( 
c⁄figMAX_TASK_NAME_LEN
 - 1 ); x++ )

3927 
pcBuf„r
[ 
x
 ] = ' ';

3931 
pcBuf„r
[ 
x
 ] = 0x00;

3934  &–
pcBuf„r
[ 
x
 ] );

3935 
	}
}

3940 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

3942 
	$vTaskLi°
–* 
pcWrôeBuf„r
 )

3944 
TaskSètus_t
 *
pxTaskSètusAºay
;

3945 vﬁ©ûê
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

3946 
cSètus
;

3974 *
pcWrôeBuf„r
 = 0x00;

3978 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

3983 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

3985 if–
pxTaskSètusAºay
 !
NULL
 )

3988 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, 
NULL
 );

3991  
x
 = 0; x < 
uxAºaySize
; x++ )

3993  
pxTaskSètusAºay
[ 
x
 ].
eCuºítSèã
 )

3995 
eRódy
: 
cSètus
 = 
tskREADY_CHAR
;

3998 
eBlocked
: 
cSètus
 = 
tskBLOCKED_CHAR
;

4001 
eSu•íded
: 
cSètus
 = 
tskSUSPENDED_CHAR
;

4004 
eDñëed
: 
cSètus
 = 
tskDELETED_CHAR
;

4009 
cSètus
 = 0x00;

4015 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4018 
	`•rötf
–
pcWrôeBuf„r
, "\t%c\t%u\t%u\t%u\r\n", 
cSètus
, ( Ë
pxTaskSètusAºay
[ 
x
 ].
uxCuºítPri‹ôy
, ( ËpxTaskSètusAºay[ x ].
usSèckHighW©îM¨k
, ( ËpxTaskSètusAºay[ x ].
xTaskNumbî
 );

4019 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4024 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4028 
	`mtCOVERAGE_TEST_MARKER
();

4030 
	}
}

4035 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

4037 
	$vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 )

4039 
TaskSètus_t
 *
pxTaskSètusAºay
;

4040 vﬁ©ûê
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

4041 
uöt32_t
 
ulTŸÆTime
, 
ulSètsAsPî˚¡age
;

4043 #if–
c⁄figUSE_TRACE_FACILITY
 != 1 )

4045 #îr‹ 
c⁄figUSE_TRACE_FACILITY
 
mu°
 
Æso
 
be
 
£t
 
to
 1 
ö
 
FªeRTOSC⁄fig
.
h
Åÿ
u£
 
	`vTaskGëRunTimeSèts
().

4075 *
pcWrôeBuf„r
 = 0x00;

4079 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

4084 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

4086 if–
pxTaskSètusAºay
 !
NULL
 )

4089 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, &
ulTŸÆTime
 );

4092 
ulTŸÆTime
 /= 100UL;

4095 if–
ulTŸÆTime
 > 0 )

4098  
x
 = 0; x < 
uxAºaySize
; x++ )

4103 
ulSètsAsPî˚¡age
 = 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 / 
ulTŸÆTime
;

4108 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4110 if–
ulSètsAsPî˚¡age
 > 0UL )

4112 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4114 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t%lu%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

4120 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t%u%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

4128 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4130 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t<1%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4136 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t<1%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4141 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4146 
	`mtCOVERAGE_TEST_MARKER
();

4151 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4155 
	`mtCOVERAGE_TEST_MARKER
();

4157 
	}
}

4162 
TickTy≥_t
 
	$uxTaskRe£tEvítIãmVÆue
( )

4164 
TickTy≥_t
 
uxRëu∫
;

4166 
uxRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

4170 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxCuºítTCB->
uxPri‹ôy
 ) );

4172  
uxRëu∫
;

4173 
	}
}

4176 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4178 *
	$pvTaskIn¸emítMuãxHñdCou¡
( )

4182 if–
pxCuºítTCB
 !
NULL
 )

4184 –
pxCuºítTCB
->
uxMuãxesHñd
 )++;

4187  
pxCuºítTCB
;

4188 
	}
}

4193 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4195 
uöt32_t
 
	$ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 )

4197 
uöt32_t
 
ulRëu∫
;

4199 
	`èskENTER_CRITICAL
();

4202 if–
pxCuºítTCB
->
ulNŸifõdVÆue
 == 0UL )

4205 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskWAITING_NOTIFICATION
;

4207 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4209 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4210 
	`åa˚TASK_NOTIFY_TAKE_BLOCK
();

4216 
	`p‹tYIELD_WITHIN_API
();

4220 
	`mtCOVERAGE_TEST_MARKER
();

4225 
	`mtCOVERAGE_TEST_MARKER
();

4228 
	`èskEXIT_CRITICAL
();

4230 
	`èskENTER_CRITICAL
();

4232 
	`åa˚TASK_NOTIFY_TAKE
();

4233 
ulRëu∫
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
;

4235 if–
ulRëu∫
 != 0UL )

4237 if–
xCÀ¨Cou¡OnExô
 !
pdFALSE
 )

4239 
pxCuºítTCB
->
ulNŸifõdVÆue
 = 0UL;

4243 
pxCuºítTCB
->
ulNŸifõdVÆue
 = 
ulRëu∫
 - 1;

4248 
	`mtCOVERAGE_TEST_MARKER
();

4251 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

4253 
	`èskEXIT_CRITICAL
();

4255  
ulRëu∫
;

4256 
	}
}

4261 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4263 
Ba£Ty≥_t
 
	$xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 )

4265 
Ba£Ty≥_t
 
xRëu∫
;

4267 
	`èskENTER_CRITICAL
();

4270 if–
pxCuºítTCB
->
ucNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4275 
pxCuºítTCB
->
ulNŸifõdVÆue
 &~
ulBôsToCÀ¨OnE¡ry
;

4278 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskWAITING_NOTIFICATION
;

4280 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4282 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4283 
	`åa˚TASK_NOTIFY_WAIT_BLOCK
();

4289 
	`p‹tYIELD_WITHIN_API
();

4293 
	`mtCOVERAGE_TEST_MARKER
();

4298 
	`mtCOVERAGE_TEST_MARKER
();

4301 
	`èskEXIT_CRITICAL
();

4303 
	`èskENTER_CRITICAL
();

4305 
	`åa˚TASK_NOTIFY_WAIT
();

4307 if–
pulNŸifiˇti⁄VÆue
 !
NULL
 )

4311 *
pulNŸifiˇti⁄VÆue
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
;

4318 if–
pxCuºítTCB
->
ucNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4321 
xRëu∫
 = 
pdFALSE
;

4327 
pxCuºítTCB
->
ulNŸifõdVÆue
 &~
ulBôsToCÀ¨OnExô
;

4328 
xRëu∫
 = 
pdTRUE
;

4331 
pxCuºítTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

4333 
	`èskEXIT_CRITICAL
();

4335  
xRëu∫
;

4336 
	}
}

4341 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4343 
Ba£Ty≥_t
 
	$xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 )

4345 
TCB_t
 * 
pxTCB
;

4346 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4347 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4349 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4350 
pxTCB
 = ( 
TCB_t
 * ) 
xTaskToNŸify
;

4352 
	`èskENTER_CRITICAL
();

4354 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4356 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
;

4359 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
;

4361 
pxTCB
->
ucNŸifySèã
 = 
èskNOTIFICATION_RECEIVED
;

4363  
eA˘i⁄
 )

4365 
eSëBôs
 :

4366 
pxTCB
->
ulNŸifõdVÆue
 |
ulVÆue
;

4369 
eIn¸emít
 :

4370 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4373 
eSëVÆueWôhOvîwrôe
 :

4374 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4377 
eSëVÆueWôhoutOvîwrôe
 :

4378 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4380 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4385 
xRëu∫
 = 
pdFAIL
;

4389 
eNoA˘i⁄
:

4395 
	`åa˚TASK_NOTIFY
();

4399 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4401 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4402 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4405 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4407 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

4419 
	`¥vRe£tNextTaskUnblockTime
();

4423 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4427 
	`èskYIELD_IF_USING_PREEMPTION
();

4431 
	`mtCOVERAGE_TEST_MARKER
();

4436 
	`mtCOVERAGE_TEST_MARKER
();

4439 
	`èskEXIT_CRITICAL
();

4441  
xRëu∫
;

4442 
	}
}

4447 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4449 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

4451 
TCB_t
 * 
pxTCB
;

4452 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4453 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4454 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

4456 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4474 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

4476 
pxTCB
 = ( 
TCB_t
 * ) 
xTaskToNŸify
;

4478 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

4480 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4482 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
;

4485 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
;

4486 
pxTCB
->
ucNŸifySèã
 = 
èskNOTIFICATION_RECEIVED
;

4488  
eA˘i⁄
 )

4490 
eSëBôs
 :

4491 
pxTCB
->
ulNŸifõdVÆue
 |
ulVÆue
;

4494 
eIn¸emít
 :

4495 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4498 
eSëVÆueWôhOvîwrôe
 :

4499 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4502 
eSëVÆueWôhoutOvîwrôe
 :

4503 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4505 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4510 
xRëu∫
 = 
pdFAIL
;

4514 
eNoA˘i⁄
 :

4520 
	`åa˚TASK_NOTIFY_FROM_ISR
();

4524 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4527 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4529 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

4531 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4532 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4538 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

4541 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4545 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

4547 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

4554 
xYõldPídög
 = 
pdTRUE
;

4559 
	`mtCOVERAGE_TEST_MARKER
();

4563 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

4565  
xRëu∫
;

4566 
	}
}

4571 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4573 
	$vTaskNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

4575 
TCB_t
 * 
pxTCB
;

4576 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4577 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

4579 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4597 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

4599 
pxTCB
 = ( 
TCB_t
 * ) 
xTaskToNŸify
;

4601 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

4603 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
;

4604 
pxTCB
->
ucNŸifySèã
 = 
èskNOTIFICATION_RECEIVED
;

4608 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4610 
	`åa˚TASK_NOTIFY_GIVE_FROM_ISR
();

4614 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4617 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4619 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

4621 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4622 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4628 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

4631 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4635 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

4637 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

4644 
xYõldPídög
 = 
pdTRUE
;

4649 
	`mtCOVERAGE_TEST_MARKER
();

4653 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

4654 
	}
}

4660 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4662 
Ba£Ty≥_t
 
	$xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 )

4664 
TCB_t
 *
pxTCB
;

4665 
Ba£Ty≥_t
 
xRëu∫
;

4669 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

4671 
	`èskENTER_CRITICAL
();

4673 if–
pxTCB
->
ucNŸifySèã
 =
èskNOTIFICATION_RECEIVED
 )

4675 
pxTCB
->
ucNŸifySèã
 = 
èskNOT_WAITING_NOTIFICATION
;

4676 
xRëu∫
 = 
pdPASS
;

4680 
xRëu∫
 = 
pdFAIL
;

4683 
	`èskEXIT_CRITICAL
();

4685  
xRëu∫
;

4686 
	}
}

4692 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 )

4694 
TickTy≥_t
 
xTimeToWake
;

4695 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

4697 #if–
INCLUDE_xTaskAb‹tDñay
 == 1 )

4702 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

4708 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4712 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4716 
	`mtCOVERAGE_TEST_MARKER
();

4719 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

4721 if––
xTicksToWaô
 =
p‹tMAX_DELAY
 ) && ( 
xC™BlockIndeföôñy
 !
pdFALSE
 ) )

4726 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

4733 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

4736 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

4738 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

4742 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

4748 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

4753 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

4755 
xNextTaskUnblockTime
 = 
xTimeToWake
;

4759 
	`mtCOVERAGE_TEST_MARKER
();

4769 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

4772 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

4774 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

4777 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

4782 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

4787 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

4789 
xNextTaskUnblockTime
 = 
xTimeToWake
;

4793 
	`mtCOVERAGE_TEST_MARKER
();

4798 –Ë
xC™BlockIndeföôñy
;

4801 
	}
}

4804 #ifde‡
FREERTOS_MODULE_TEST


4805 
	~"èsks_ã°_ac˚ss_fun˘i⁄s.h
"

	@rtos/timers.h

71 #i‚de‡
TIMERS_H


72 
	#TIMERS_H


	)

74 #i‚de‡
INC_FREERTOS_H


80 
	~"èsk.h
"

83 #ifde‡
__˝lu•lus


96 
	#tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) -2 )

	)

97 
	#tmrCOMMAND_EXECUTE_CALLBACK
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

98 
	#tmrCOMMAND_START_DONT_TRACE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

99 
	#tmrCOMMAND_START
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

100 
	#tmrCOMMAND_RESET
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

101 
	#tmrCOMMAND_STOP
 ( ( 
Ba£Ty≥_t
 ) 3 )

	)

102 
	#tmrCOMMAND_CHANGE_PERIOD
 ( ( 
Ba£Ty≥_t
 ) 4 )

	)

103 
	#tmrCOMMAND_DELETE
 ( ( 
Ba£Ty≥_t
 ) 5 )

	)

105 
	#tmrFIRST_FROM_ISR_COMMAND
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

106 
	#tmrCOMMAND_START_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

107 
	#tmrCOMMAND_RESET_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 7 )

	)

108 
	#tmrCOMMAND_STOP_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 8 )

	)

109 
	#tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 9 )

	)

118 * 
	tTimîH™dÀ_t
;

123 (*
TimîCÆlbackFun˘i⁄_t
)–
	tTimîH™dÀ_t
 
	txTimî
 );

129 (*
PídedFun˘i⁄_t
)–*, 
	tuöt32_t
 );

268 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

269 
TimîH™dÀ_t
 
xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

270 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

271 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

272 * c⁄° 
pvTimîID
,

273 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

398 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

399 
TimîH™dÀ_t
 
xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

400 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

401 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

402 * c⁄° 
pvTimîID
,

403 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

404 
SèticTimî_t
 *
pxTimîBuf„r
 ) 
PRIVILEGED_FUNCTION
;

427 *
pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

448 
vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
, *
pvNewID
 ) 
PRIVILEGED_FUNCTION
;

485 
Ba£Ty≥_t
 
xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

493 
TaskH™dÀ_t
 
xTimîGëTimîD´m⁄TaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

545 
	#xTimîSèπ
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

587 
	#xTimîSt›
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

667 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), 
NULL
, ( xTicksToWaô ) )

	)

705 
	#xTimîDñëe
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

829 
	#xTimîRe£t
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

915 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

978 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP_FROM_ISR
, 0, (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1051 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
, ( xNewPîiod ), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1137 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1228 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1262 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1273 c⁄° * 
pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1284 
TickTy≥_t
 
xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1299 
TickTy≥_t
 
xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1305 
Ba£Ty≥_t
 
xTimîCª©eTimîTask
–Ë
PRIVILEGED_FUNCTION
;

1306 
Ba£Ty≥_t
 
xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1308 #ifde‡
__˝lu•lus


	@
1
.
0
60
1363
../libwwg/include/getline.h
../libwwg/include/intelhex.h
../libwwg/include/mcuio.h
../libwwg/include/miniprintf.h
../libwwg/include/monitor.h
../libwwg/include/uartlib.h
../libwwg/include/usbcdc.h
../libwwg/include/utils.h
../libwwg/include/winbond.h
../libwwg/src/getline.c
../libwwg/src/intelhex.c
../libwwg/src/mcuio.c
../libwwg/src/miniprintf.c
../libwwg/src/monitor.c
../libwwg/src/rtos/FreeRTOS.h
../libwwg/src/rtos/FreeRTOSConfig.h
../libwwg/src/rtos/StackMacros.h
../libwwg/src/rtos/croutine.h
../libwwg/src/rtos/deprecated_definitions.h
../libwwg/src/rtos/event_groups.h
../libwwg/src/rtos/list.h
../libwwg/src/rtos/mpu_prototypes.h
../libwwg/src/rtos/mpu_wrappers.h
../libwwg/src/rtos/portable.h
../libwwg/src/rtos/portmacro.h
../libwwg/src/rtos/projdefs.h
../libwwg/src/rtos/queue.h
../libwwg/src/rtos/semphr.h
../libwwg/src/rtos/task.h
../libwwg/src/rtos/timers.h
../libwwg/src/uartlib.c
../libwwg/src/usbcdc.c
../libwwg/src/winbond.c
FreeRTOSConfig.h
main.c
rtos/FreeRTOS.h
rtos/StackMacros.h
rtos/croutine.h
rtos/deprecated_definitions.h
rtos/event_groups.h
rtos/heap_1.c
rtos/heap_2.c
rtos/heap_3.c
rtos/heap_4.c
rtos/heap_5.c
rtos/list.c
rtos/list.h
rtos/mpu_prototypes.h
rtos/mpu_wrappers.h
rtos/opencm3.c
rtos/port.c
rtos/portable.h
rtos/portmacro.h
rtos/projdefs.h
rtos/queue.c
rtos/queue.h
rtos/semphr.h
rtos/task.h
rtos/tasks.c
rtos/timers.h
